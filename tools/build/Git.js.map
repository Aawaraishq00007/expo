{"version":3,"file":"Git.js","sourceRoot":"","sources":["../src/Git.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\n\nimport { spawnAsync, SpawnResult, SpawnOptions } from './Utils';\nimport { EXPO_DIR } from './Constants';\n\nexport type GitPullOptions = {\n  rebase?: boolean;\n};\n\nexport type GitPushOptions = {\n  track?: string;\n};\n\nexport type GitLogOptions = {\n  fromCommit?: string;\n  toCommit?: string;\n  paths?: string[];\n};\n\nexport type GitLog = {\n  hash: string;\n  parent: string;\n  title: string;\n  authorName: string;\n  committerRelativeDate: string;\n};\n\nexport type GitFileLog = {\n  path: string;\n  relativePath: string;\n  status: GitFileStatus;\n};\n\nexport enum GitFileStatus {\n  M = 'modified',\n  C = 'copy',\n  R = 'rename',\n  A = 'added',\n  D = 'deleted',\n  U = 'unmerged',\n}\n\nexport type GitBranchesStats = {\n  ahead: number;\n  behind: number;\n};\n\nexport type GitCommitOptions = {\n  title: string;\n  body?: string;\n};\n\nexport type GitFetchOptions = {\n  depth?: number;\n  remote?: string;\n  ref?: string;\n};\n\n/**\n * Helper class that stores the directory inside the repository so we don't have to pass it many times.\n * This directory path doesn't have to be the repo's root path,\n * it's just like current working directory for all other commands.\n */\nexport class GitDirectory {\n  readonly Directory = GitDirectory;\n\n  constructor(readonly path) {}\n\n  /**\n   * Generic command used by other methods. Spawns `git` process at instance's repository path.\n   */\n  async runAsync(args: string[], options: SpawnOptions = {}): Promise<SpawnResult> {\n    return spawnAsync('git', args, {\n      cwd: this.path,\n      ...options,\n    });\n  }\n\n  /**\n   * Same as `runAsync` but returns boolean value whether the process succeeded or not.\n   */\n  async tryAsync(args: string[], options: SpawnOptions = {}): Promise<boolean> {\n    try {\n      await this.runAsync(args, options);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Initializes git repository in the directory.\n   */\n  async initAsync() {\n    const dotGitPath = path.join(this.path, '.git');\n    if (!(await fs.pathExists(dotGitPath))) {\n      await this.runAsync(['init']);\n    }\n  }\n\n  /**\n   * Adds a new remote to the local repository.\n   */\n  async addRemoteAsync(name: string, url: string): Promise<void> {\n    await this.runAsync(['remote', 'add', name, url]);\n  }\n\n  /**\n   * Switches to given commit reference.\n   */\n  async checkoutAsync(ref: string) {\n    await this.runAsync(['checkout', ref]);\n  }\n\n  /**\n   * Returns repository's branch name that you're checked out on.\n   */\n  async getCurrentBranchNameAsync(): Promise<string> {\n    const { stdout } = await this.runAsync(['rev-parse', '--abbrev-ref', 'HEAD']);\n    return stdout.replace(/\\n+$/, '');\n  }\n\n  /**\n   * Returns name of remote branch that the current local branch is tracking.\n   */\n  async getTrackingBranchNameAsync(): Promise<string> {\n    const { stdout } = await this.runAsync([\n      'rev-parse',\n      '--abbrev-ref',\n      '--symbolic-full-name',\n      '@{u}',\n    ]);\n    return stdout.trim();\n  }\n\n  /**\n   * Tries to deduce the SDK version from branch name. Returns null if the branch name is not a release branch.\n   */\n  async getSDKVersionFromBranchNameAsync(): Promise<string | null> {\n    const currentBranch = await this.getCurrentBranchNameAsync();\n    const match = currentBranch.match(/\\bsdk-(\\d+)$/);\n\n    if (match) {\n      const sdkMajorNumber = match[1];\n      return `${sdkMajorNumber}.0.0`;\n    }\n    return null;\n  }\n\n  /**\n   * Returns full head commit hash.\n   */\n  async getHeadCommitHashAsync(): Promise<string> {\n    const { stdout } = await this.runAsync(['rev-parse', 'HEAD']);\n    return stdout.trim();\n  }\n\n  /**\n   * Fetches updates from remote repository.\n   */\n  async fetchAsync(options: GitFetchOptions = {}): Promise<void> {\n    const args = ['fetch'];\n\n    if (options.depth) {\n      args.push('--depth', options.depth.toString());\n    }\n    if (options.remote) {\n      args.push(options.remote);\n    }\n    if (options.ref) {\n      args.push(options.ref);\n    }\n    await this.runAsync(args);\n  }\n\n  /**\n   * Pulls changes from the tracking remote branch.\n   */\n  async pullAsync(options: GitPullOptions): Promise<void> {\n    const args = ['pull'];\n    if (options.rebase) {\n      args.push('--rebase');\n    }\n    await this.runAsync(args);\n  }\n\n  /**\n   * Pushes new commits to the tracking remote branch.\n   */\n  async pushAsync(options: GitPushOptions): Promise<void> {\n    const args = ['push'];\n    if (options.track) {\n      args.push('--set-upstream', 'origin', options.track);\n    }\n    await this.runAsync(args);\n  }\n\n  /**\n   * Returns formatted results of `git log` command.\n   */\n  async logAsync(options: GitLogOptions = {}): Promise<GitLog[]> {\n    const fromCommit = options.fromCommit ?? '';\n    const toCommit = options.toCommit ?? 'head';\n    const paths = options.paths ?? ['.'];\n\n    const template = {\n      hash: '%H',\n      parent: '%P',\n      title: '%s',\n      authorName: '%aN',\n      committerRelativeDate: '%cr',\n    };\n\n    // We use random \\u200b character (zero-width space) instead of double quotes\n    // because we need to know which quotes to escape before we pass it to `JSON.parse`.\n    // Otherwise, double quotes in commits message would cause this function to throw JSON exceptions.\n    const format =\n      ',{' +\n      Object.entries(template)\n        .map(([key, value]) => `\\u200b${key}\\u200b:\\u200b${value}\\u200b`)\n        .join(',') +\n      '}';\n\n    const { stdout } = await this.runAsync([\n      'log',\n      `--pretty=format:${format}`,\n      `${fromCommit}..${toCommit}`,\n      '--',\n      ...paths,\n    ]);\n\n    // Remove comma at the beginning, escape double quotes and replace \\u200b with unescaped double quotes.\n    const jsonItemsString = stdout\n      .slice(1)\n      .replace(/\"/g, '\\\\\"')\n      .replace(/\\u200b/gu, '\"');\n\n    return JSON.parse(`[${jsonItemsString}]`);\n  }\n\n  /**\n   * Returns a list of files that have been modified, deleted or added between specified commits.\n   */\n  async logFilesAsync(options: GitLogOptions = {}): Promise<GitFileLog[]> {\n    const fromCommit = options.fromCommit ?? '';\n    const toCommit = options.toCommit ?? 'HEAD';\n\n    // This diff command returns a list of relative paths of files that have changed preceded by their status.\n    // Status is just a letter, which is also a key of `GitFileStatus` enum.\n    const { stdout } = await this.runAsync([\n      'diff',\n      '--name-status',\n      `${fromCommit}..${toCommit}`,\n      '--relative',\n      '--',\n      '.',\n    ]);\n\n    return stdout\n      .split(/\\n/g)\n      .filter(Boolean)\n      .map((line) => {\n        // Consecutive columns are separated by horizontal tabs.\n        // In case of `R` (rename) status, there are three columns instead of two,\n        // where the third is the new path after renaming and we should use the new one.\n        const [status, relativePath, relativePathAfterRename] = line.split(/\\t+/g);\n        const newPath = relativePathAfterRename ?? relativePath;\n\n        return {\n          relativePath: newPath,\n          path: path.join(this.path, newPath),\n          // `R` status also has a number, but we take care of only the first character.\n          status: GitFileStatus[status[0]] ?? status,\n        };\n      });\n  }\n\n  /**\n   * Adds files at given glob paths.\n   */\n  async addFilesAsync(paths?: string[]): Promise<void> {\n    if (!paths || paths.length === 0) {\n      return;\n    }\n    await this.runAsync(['add', '--', ...paths]);\n  }\n\n  /**\n   * Checkouts changes and cleans untracked files at given glob paths.\n   */\n  async discardFilesAsync(paths?: string[]): Promise<void> {\n    if (!paths || paths.length === 0) {\n      return;\n    }\n    await this.runAsync(['checkout', '--', ...paths]);\n    await this.runAsync(['clean', '-df', '--', ...paths]);\n  }\n\n  /**\n   * Commits staged changes with given options including commit's title and body.\n   */\n  async commitAsync(options: GitCommitOptions): Promise<void> {\n    const args = ['commit', '--message', options.title];\n\n    if (options.body) {\n      args.push('--message', options.body);\n    }\n    await this.runAsync(args);\n  }\n\n  /**\n   * Checks how many commits ahead and behind the former branch is relative to the latter.\n   */\n  async compareBranchesAsync(a: string, b?: string): Promise<GitBranchesStats> {\n    const { stdout } = await this.runAsync(['rev-list', '--left-right', '--count', `${a}...${b}`]);\n    const numbers = stdout\n      .trim()\n      .split(/\\s+/g)\n      .map((n) => +n);\n\n    if (numbers.length !== 2) {\n      throw new Error(`Oops, something went really wrong. Unable to parse \"${stdout}\"`);\n    }\n    const [ahead, behind] = numbers;\n    return { ahead, behind };\n  }\n\n  /**\n   * Resolves to boolean value meaning whether the repository contains any unstaged changes.\n   */\n  async hasUnstagedChangesAsync(paths: string[] = []): Promise<boolean> {\n    return !(await this.tryAsync(['diff', '--quiet', '--', ...paths]));\n  }\n\n  /**\n   * Returns a list of files with staged changes.\n   */\n  async getStagedFilesAsync(): Promise<string[]> {\n    const { stdout } = await this.runAsync(['diff', '--name-only', '--cached']);\n    return stdout.trim().split(/\\n+/g).filter(Boolean);\n  }\n\n  /**\n   * Checks whether given commit is an ancestor of head commit.\n   */\n  async isAncestorAsync(commit: string): Promise<boolean> {\n    return this.tryAsync(['merge-base', '--is-ancestor', commit, 'HEAD']);\n  }\n\n  /**\n   * Finds the best common ancestor between the current ref and the given ref.\n   */\n  async mergeBaseAsync(ref: string): Promise<string> {\n    const { stdout } = await this.runAsync(['merge-base', 'HEAD', ref]);\n    return stdout.trim();\n  }\n\n  /**\n   * Clones the repository but in a shallow way, which means\n   * it downloads just one commit instead of the entire repository.\n   * Returns `GitDirectory` instance of the cloned repository.\n   */\n  static async shallowCloneAsync(\n    directory: string,\n    remoteUrl: string,\n    ref: string = 'master'\n  ): Promise<GitDirectory> {\n    const git = new GitDirectory(directory);\n\n    await fs.mkdirs(directory);\n    await git.initAsync();\n    await git.addRemoteAsync('origin', remoteUrl);\n    await git.fetchAsync({ depth: 1, remote: 'origin', ref });\n    await git.checkoutAsync('FETCH_HEAD');\n    return git;\n  }\n}\n\nexport default new GitDirectory(EXPO_DIR);\n"]}