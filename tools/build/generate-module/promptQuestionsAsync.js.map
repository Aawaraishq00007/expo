{"version":3,"file":"promptQuestionsAsync.js","sourceRoot":"","sources":["../../src/generate-module/promptQuestionsAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import inquirer, { Question } from 'inquirer';\n\nimport { ModuleConfiguration } from './ModuleConfiguration';\n\n/**\n * Generates CocoaPod name in format `Namepart1Namepart2Namepart3`.\n * For these with `expo` as `partname1` would generate `EXNamepart2...`.\n * @param {string} moduleName - provided module name, expects format: `namepart1-namepart2-namepart3`\n */\nconst generateCocoaPodDefaultName = (moduleName: string) => {\n  const wordsToUpperCase = (s: string) =>\n    s\n      .toLowerCase()\n      .split('-')\n      .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\n      .join('');\n\n  if (moduleName.toLowerCase().startsWith('expo')) {\n    return `EX${wordsToUpperCase(moduleName.substring(4))}`;\n  }\n  return `EX${wordsToUpperCase(moduleName)}`;\n};\n\n/**\n * Generates java package name in format `namepart1.namepart2.namepart3`.\n * @param moduleName - provided module name, expects format: `namepart1-namepart2-namepart3`\n */\nconst generateJavaModuleDefaultName = (moduleName: string) => {\n  const wordsToJavaModule = (s: string) => s.toLowerCase().split('-').join('');\n\n  if (moduleName.toLowerCase().startsWith('expo')) {\n    return `expo.modules.${wordsToJavaModule(moduleName.substring(4))}`;\n  }\n  return wordsToJavaModule(moduleName);\n};\n\n/**\n * Generates JS/TS module name in format `Namepart1Namepart2Namepart3`.\n * @param moduleName - provided module name, expects format: `namepart1-namepart2-namepart3`\n */\nconst generateInCodeModuleDefaultName = (moduleName: string) => {\n  return moduleName\n    .toLowerCase()\n    .split('-')\n    .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\n    .join('');\n};\n\n/**\n * Generates questions\n */\nconst generateQuestions = (suggestedModuleName: string): Question[] => [\n  {\n    name: 'npmModuleName',\n    message: 'How would you like to call your module in JS/npm? (eg. expo-camera)',\n    default: suggestedModuleName,\n    validate: (answer: string) => {\n      return !answer.length\n        ? 'Module name cannot be empty'\n        : /[A-Z]/.test(answer)\n        ? 'Module name cannot contain any upper case characters'\n        : /\\s/.test(answer)\n        ? 'Module name cannot contain any whitespaces'\n        : true;\n    },\n  },\n  {\n    name: 'podName',\n    message: 'How would you like to call your module in CocoaPods? (eg. EXCamera)',\n    default: ({ npmModuleName }) => generateCocoaPodDefaultName(npmModuleName),\n    validate: (answer: string) =>\n      !answer.length\n        ? 'CocoaPod name cannot be empty'\n        : /\\s/.test(answer)\n        ? 'CocoaPod name cannot contain any whitespaces'\n        : true,\n  },\n  {\n    name: 'javaPackage',\n    message: 'How would you like to call your module in Java? (eg. expo.modules.camera)',\n    default: ({ npmModuleName }) => generateJavaModuleDefaultName(npmModuleName),\n    validate: (answer: string) =>\n      !answer.length\n        ? 'Java Package name cannot be empty'\n        : /\\s/.test(answer)\n        ? 'Java Package name cannot contain any whitespaces'\n        : true,\n  },\n  {\n    name: 'jsPackageName',\n    message: 'How would you like to call your module in JS/TS codebase (eg. ExpoCamera)?',\n    default: ({ npmModuleName }) => generateInCodeModuleDefaultName(npmModuleName),\n    validate: (answer: string) =>\n      !answer.length\n        ? 'Module name cannot be empty'\n        : /\\s/.test(answer)\n        ? 'Module name cannot contain any whitespaces'\n        : true,\n  },\n  {\n    name: 'viewManager',\n    message: 'Would you like to create a NativeViewManager?',\n    default: false,\n    type: 'confirm',\n  },\n];\n\n/**\n * Prompt user about new module namings.\n * @param suggestedModuleName - suggested module name that would be used to generate all suggestions for each question\n */\nexport default async function promptQuestionsAsync(\n  suggestedModuleName: string\n): Promise<ModuleConfiguration> {\n  const questions = generateQuestions(suggestedModuleName);\n  // non interactive check\n  if (!process.stdin.isTTY) {\n    let message = `Input is required, but expotools is in a non-interactive shell.\\n`;\n    const firstQuestion = (questions[0].message || '') as string;\n    message += `Required input:\\n${firstQuestion.trim().replace(/^/gm, '> ')}`;\n    throw new Error(message);\n  }\n  // TODO: Migrate to prompts and remove inquirer\n  return (await inquirer.prompt(questions)) as ModuleConfiguration;\n}\n"]}