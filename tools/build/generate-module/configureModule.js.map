{"version":3,"file":"configureModule.js","sourceRoot":"","sources":["../../src/generate-module/configureModule.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs-extra';\nimport walkSync from 'klaw-sync';\nimport * as path from 'path';\n\nimport { ModuleConfiguration } from './ModuleConfiguration';\n\ntype PreparedPrefixes = [nameWithExpoPrefix: string, nameWithoutExpoPrefix: string];\n\n/**\n * prepares _Expo_ prefixes for specified name\n * @param name module name, e.g. JS package name\n * @param prefix prefix to prepare with, defaults to _Expo_\n * @returns tuple `[nameWithPrefix: string, nameWithoutPrefix: string]`\n */\nconst preparePrefixes = (name: string, prefix: string = 'Expo'): PreparedPrefixes =>\n  name.startsWith(prefix) ? [name, name.substr(prefix.length)] : [`${prefix}${name}`, name];\n\nconst asyncForEach = async <T>(\n  array: T[],\n  callback: (value: T, index: number, array: T[]) => Promise<void>\n) => {\n  for (let index = 0; index < array.length; index++) {\n    await callback(array[index], index, array);\n  }\n};\n\n/**\n * Removes specified files. If one file doesn't exist already, skips it\n * @param directoryPath directory containing files to remove\n * @param filenames array of filenames to remove\n */\nasync function removeFiles(directoryPath: string, filenames: string[]) {\n  await Promise.all(filenames.map((filename) => fs.remove(path.resolve(directoryPath, filename))));\n}\n\n/**\n * Renames files names\n * @param directoryPath - directory that holds files to be renamed\n * @param extensions - array of extensions for files that would be renamed, must be provided with leading dot or empty for no extension, e.g. ['.html', '']\n * @param renamings - array of filenames and their replacers\n */\nconst renameFilesWithExtensions = async (\n  directoryPath: string,\n  extensions: string[],\n  renamings: { from: string; to: string }[]\n) => {\n  await asyncForEach(\n    renamings,\n    async ({ from, to }) =>\n      await asyncForEach(extensions, async (extension) => {\n        const fromFilename = `${from}${extension}`;\n        if (!fs.existsSync(path.join(directoryPath, fromFilename))) {\n          return;\n        }\n        const toFilename = `${to}${extension}`;\n        await fs.rename(\n          path.join(directoryPath, fromFilename),\n          path.join(directoryPath, toFilename)\n        );\n      })\n  );\n};\n\n/**\n * Enters each file recursively in provided dir and replaces content by invoking provided callback function\n * @param directoryPath - root directory\n * @param replaceFunction - function that converts current content into something different\n */\nconst replaceContents = async (\n  directoryPath: string,\n  replaceFunction: (contentOfSingleFile: string) => string\n) => {\n  await Promise.all(\n    walkSync(directoryPath, { nodir: true }).map((file) =>\n      replaceContent(file.path, replaceFunction)\n    )\n  );\n};\n\n/**\n * Replaces content in file. Does nothing if the file doesn't exist\n * @param filePath - provided file\n * @param replaceFunction - function that converts current content into something different\n */\nconst replaceContent = async (\n  filePath: string,\n  replaceFunction: (contentOfSingleFile: string) => string\n) => {\n  if (!fs.existsSync(filePath)) {\n    return;\n  }\n\n  const content = await fs.readFile(filePath, 'utf8');\n  const newContent = replaceFunction(content);\n  if (newContent !== content) {\n    await fs.writeFile(filePath, newContent);\n  }\n};\n\n/**\n * Removes all empty subdirs up to and including dirPath\n * Recursively enters all subdirs and removes them if one is empty or cantained only empty subdirs\n * @param dirPath - directory path that is being inspected\n * @returns whether the given base directory and any empty subdirectories were deleted or not\n */\nconst removeUponEmptyOrOnlyEmptySubdirs = async (dirPath: string): Promise<boolean> => {\n  const contents = await fs.readdir(dirPath);\n  const results = await Promise.all(\n    contents.map(async (file) => {\n      const filePath = path.join(dirPath, file);\n      const fileStats = await fs.lstat(filePath);\n      return fileStats.isDirectory() && (await removeUponEmptyOrOnlyEmptySubdirs(filePath));\n    })\n  );\n  const isRemovable = results.reduce((acc, current) => acc && current, true);\n  if (isRemovable) {\n    await fs.remove(dirPath);\n  }\n  return isRemovable;\n};\n\n/**\n * Prepares iOS part, mainly by renaming all files and some template word in files\n * Versioning is done automatically based on package.json from JS/TS part\n * @param modulePath - module directory\n * @param configuration - naming configuration\n */\nasync function configureIOS(\n  modulePath: string,\n  { podName, jsPackageName, viewManager }: ModuleConfiguration\n) {\n  const iosPath = path.join(modulePath, 'ios');\n\n  // remove ViewManager from template\n  if (!viewManager) {\n    await removeFiles(path.join(iosPath, 'EXModuleTemplate'), [\n      `EXModuleTemplateView.h`,\n      `EXModuleTemplateView.m`,\n      `EXModuleTemplateViewManager.h`,\n      `EXModuleTemplateViewManager.m`,\n    ]);\n  }\n\n  await renameFilesWithExtensions(\n    path.join(iosPath, 'EXModuleTemplate'),\n    ['.h', '.m'],\n    [\n      { from: 'EXModuleTemplateModule', to: `${podName}Module` },\n      {\n        from: 'EXModuleTemplateView',\n        to: `${podName}View`,\n      },\n      {\n        from: 'EXModuleTemplateViewManager',\n        to: `${podName}ViewManager`,\n      },\n    ]\n  );\n  await renameFilesWithExtensions(\n    iosPath,\n    ['', '.podspec'],\n    [{ from: 'EXModuleTemplate', to: `${podName}` }]\n  );\n  await replaceContents(iosPath, (singleFileContent) =>\n    singleFileContent\n      .replace(/EXModuleTemplate/g, podName)\n      .replace(/ExpoModuleTemplate/g, jsPackageName)\n  );\n}\n\n/**\n * Gets path to Android source base dir: android/src/main/[java|kotlin]\n * Defaults to Java path if both exist\n * @param androidPath path do module android/ directory\n * @param flavor package flavor e.g main, test. Defaults to main\n * @returns path to flavor source base directory\n */\nfunction findAndroidSourceDir(androidPath: string, flavor: string = 'main'): string {\n  const androidSrcPathBase = path.join(androidPath, 'src', flavor);\n\n  const javaExists = fs.pathExistsSync(path.join(androidSrcPathBase, 'java'));\n  const kotlinExists = fs.pathExistsSync(path.join(androidSrcPathBase, 'kotlin'));\n\n  if (!javaExists && !kotlinExists) {\n    throw new Error(\n      `Invalid template. Android source directory not found: ${androidSrcPathBase}/[java|kotlin]`\n    );\n  }\n\n  return path.join(androidSrcPathBase, javaExists ? 'java' : 'kotlin');\n}\n\n/**\n * Finds java package name based on directory structure\n * @param flavorSrcPath Path to source base directory: e.g. android/src/main/java\n * @returns java package name\n */\nfunction findTemplateAndroidPackage(flavorSrcPath: string) {\n  const srcFiles = walkSync(flavorSrcPath, {\n    filter: (item) => item.path.endsWith('.kt') || item.path.endsWith('.java'),\n    nodir: true,\n    traverseAll: true,\n  });\n\n  if (srcFiles.length === 0) {\n    throw new Error('No Android source files found in the template');\n  }\n\n  // srcFiles[0] will always be at the most top-level of the package structure\n  const packageDirNames = path.relative(flavorSrcPath, srcFiles[0].path).split('/').slice(0, -1);\n\n  if (packageDirNames.length === 0) {\n    throw new Error('Template Android sources must be within a package.');\n  }\n\n  return packageDirNames.join('.');\n}\n\n/**\n * Prepares Android part, mainly by renaming all files and template words in files\n * Sets all versions in Gradle to 1.0.0\n * @param modulePath - module directory\n * @param configuration - naming configuration\n */\nasync function configureAndroid(\n  modulePath: string,\n  { javaPackage, jsPackageName, viewManager }: ModuleConfiguration\n) {\n  const androidPath = path.join(modulePath, 'android');\n  const [, moduleName] = preparePrefixes(jsPackageName, 'Expo');\n\n  const androidSrcPath = findAndroidSourceDir(androidPath);\n  const templateJavaPackage = findTemplateAndroidPackage(androidSrcPath);\n\n  const sourceFilesPath = path.join(androidSrcPath, ...templateJavaPackage.split('.'));\n  const destinationFilesPath = path.join(androidSrcPath, ...javaPackage.split('.'));\n\n  // remove ViewManager from template\n  if (!viewManager) {\n    removeFiles(sourceFilesPath, [`ModuleTemplateView.kt`, `ModuleTemplateViewManager.kt`]);\n\n    replaceContent(path.join(sourceFilesPath, 'ModuleTemplatePackage.kt'), (packageContent) =>\n      packageContent\n        .replace(/(^\\s+)+(^.*?){1}createViewManagers[\\s\\W\\w]+?\\}/m, '')\n        .replace(/^.*ViewManager$/, '')\n    );\n  }\n\n  await fs.mkdirp(destinationFilesPath);\n  await fs.copy(sourceFilesPath, destinationFilesPath);\n\n  // Remove leaf directory content\n  await fs.remove(sourceFilesPath);\n  // Cleanup all empty subdirs up to template package root dir\n  await removeUponEmptyOrOnlyEmptySubdirs(\n    path.join(androidSrcPath, templateJavaPackage.split('.')[0])\n  );\n\n  // prepare tests\n  if (fs.existsSync(path.resolve(androidPath, 'src', 'test'))) {\n    const androidTestPath = findAndroidSourceDir(androidPath, 'test');\n    const templateTestPackage = findTemplateAndroidPackage(androidTestPath);\n    const testSourcePath = path.join(androidTestPath, ...templateTestPackage.split('.'));\n    const testDestinationPath = path.join(androidTestPath, ...javaPackage.split('.'));\n\n    await fs.mkdirp(testDestinationPath);\n    await fs.copy(testSourcePath, testDestinationPath);\n    await fs.remove(testSourcePath);\n    await removeUponEmptyOrOnlyEmptySubdirs(\n      path.join(androidTestPath, templateTestPackage.split('.')[0])\n    );\n\n    await replaceContents(testDestinationPath, (singleFileContent) =>\n      singleFileContent.replace(new RegExp(templateTestPackage, 'g'), javaPackage)\n    );\n\n    await renameFilesWithExtensions(\n      testDestinationPath,\n      ['.kt', '.java'],\n      [{ from: 'ModuleTemplateModuleTest', to: `${moduleName}ModuleTest` }]\n    );\n  }\n\n  // Replace contents of destination files\n  await replaceContents(androidPath, (singleFileContent) =>\n    singleFileContent\n      .replace(new RegExp(templateJavaPackage, 'g'), javaPackage)\n      .replace(/ModuleTemplate/g, moduleName)\n      .replace(/ExpoModuleTemplate/g, jsPackageName)\n  );\n  await replaceContent(path.join(androidPath, 'build.gradle'), (gradleContent) =>\n    gradleContent\n      .replace(/\\bversion = ['\"][\\w.-]+['\"]/, \"version = '1.0.0'\")\n      .replace(/versionCode \\d+/, 'versionCode 1')\n      .replace(/versionName ['\"][\\w.-]+['\"]/, \"versionName '1.0.0'\")\n  );\n  await renameFilesWithExtensions(\n    destinationFilesPath,\n    ['.kt', '.java'],\n    [\n      { from: 'ModuleTemplateModule', to: `${moduleName}Module` },\n      { from: 'ModuleTemplatePackage', to: `${moduleName}Package` },\n      { from: 'ModuleTemplateView', to: `${moduleName}View` },\n      { from: 'ModuleTemplateViewManager', to: `${moduleName}ViewManager` },\n    ]\n  );\n}\n\n/**\n * Prepares TS part.\n * @param modulePath - module directory\n * @param configuration - naming configuration\n */\nasync function configureTS(\n  modulePath: string,\n  { jsPackageName, viewManager }: ModuleConfiguration\n) {\n  const [moduleNameWithExpoPrefix, moduleName] = preparePrefixes(jsPackageName);\n\n  const tsPath = path.join(modulePath, 'src');\n\n  // remove View Manager from template\n  if (!viewManager) {\n    await removeFiles(path.join(tsPath), [\n      'ExpoModuleTemplateView.tsx',\n      'ExpoModuleTemplateNativeView.ts',\n      'ExpoModuleTemplateNativeView.web.tsx',\n    ]);\n    await replaceContent(path.join(tsPath, 'ModuleTemplate.ts'), (fileContent) =>\n      fileContent.replace(/(^\\s+)+(^.*?){1}ExpoModuleTemplateView.*$/m, '')\n    );\n  }\n\n  await renameFilesWithExtensions(\n    path.join(tsPath, '__tests__'),\n    ['.ts'],\n    [{ from: 'ModuleTemplate-test', to: `${moduleName}-test` }]\n  );\n  await renameFilesWithExtensions(\n    tsPath,\n    ['.tsx', '.ts'],\n    [\n      { from: 'ExpoModuleTemplateView', to: `${moduleNameWithExpoPrefix}View` },\n      { from: 'ExpoModuleTemplateNativeView', to: `${moduleNameWithExpoPrefix}NativeView` },\n      { from: 'ExpoModuleTemplateNativeView.web', to: `${moduleNameWithExpoPrefix}NativeView.web` },\n      { from: 'ExpoModuleTemplate', to: moduleNameWithExpoPrefix },\n      { from: 'ExpoModuleTemplate.web', to: `${moduleNameWithExpoPrefix}.web` },\n      { from: 'ModuleTemplate', to: moduleName },\n      { from: 'ModuleTemplate.types', to: `${moduleName}.types` },\n    ]\n  );\n\n  await replaceContents(tsPath, (singleFileContent) =>\n    singleFileContent\n      .replace(/ExpoModuleTemplate/g, moduleNameWithExpoPrefix)\n      .replace(/ModuleTemplate/g, moduleName)\n  );\n}\n\n/**\n * Prepares files for npm (package.json and README.md).\n * @param modulePath - module directory\n * @param configuration - naming configuration\n */\nasync function configureNPM(\n  modulePath: string,\n  { npmModuleName, podName, jsPackageName }: ModuleConfiguration\n) {\n  const [, moduleName] = preparePrefixes(jsPackageName);\n\n  await replaceContent(path.join(modulePath, 'package.json'), (singleFileContent) =>\n    singleFileContent\n      .replace(/expo-module-template/g, npmModuleName)\n      .replace(/\"version\": \"[\\w.-]+\"/, '\"version\": \"1.0.0\"')\n      .replace(/ExpoModuleTemplate/g, jsPackageName)\n      .replace(/ModuleTemplate/g, moduleName)\n  );\n  await replaceContent(path.join(modulePath, 'README.md'), (readmeContent) =>\n    readmeContent\n      .replace(/expo-module-template/g, npmModuleName)\n      .replace(/ExpoModuleTemplate/g, jsPackageName)\n      .replace(/EXModuleTemplate/g, podName)\n  );\n}\n\n/**\n * Configures TS, Android and iOS parts of generated module mostly by applying provided renamings.\n * @param modulePath - module directory\n * @param configuration - naming configuration\n */\nexport default async function configureModule(\n  newModulePath: string,\n  configuration: ModuleConfiguration\n) {\n  await configureNPM(newModulePath, configuration);\n  await configureTS(newModulePath, configuration);\n  await configureAndroid(newModulePath, configuration);\n  await configureIOS(newModulePath, configuration);\n}\n"]}