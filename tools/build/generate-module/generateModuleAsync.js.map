{"version":3,"file":"generateModuleAsync.js","sourceRoot":"","sources":["../../src/generate-module/generateModuleAsync.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAA+B;AAC/B,2CAA6B;AAC7B,kDAA0B;AAE1B,wEAAgD;AAChD,oEAA4C;AAC5C,kFAA0D;AAC1D,4CAAsD;AAEtD,MAAM,qBAAqB,GAAG,sBAAsB,CAAC;AAEtC,KAAK,UAAU,mBAAmB,CAC/C,mBAA2B,EAC3B,OAA0D;IAE1D,OAAO,CAAC,GAAG,CACT,gCAAgC,eAAK,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,oBAAQ,EAAE,mBAAmB,CAAC,CAAC,KAAK,CACjG,CAAC;IAEF,IAAI,YAAgC,CAAC;IAErC,IAAI,OAAO,CAAC,QAAQ,EAAE;QACpB,OAAO,CAAC,GAAG,CAAC,iCAAiC,eAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC7E,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC;KACjC;SAAM,IAAI,OAAO,CAAC,gBAAgB,EAAE;QACnC,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,wBAAY,EAAE,qBAAqB,CAAC,CAAC;QAE9D,OAAO,CAAC,GAAG,CACT,oCAAoC,eAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,oBAAQ,EAAE,YAAY,CAAC,CAAC,EAAE,CACxF,CAAC;KACH;IAED,MAAM,qBAAqB,GAAG,mBAAmB,IAAI,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;IACvF,MAAM,aAAa,GAAG,qBAAqB,IAAI,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC;IACpF,MAAM,mBAAmB,GAAG,qBAAqB;QAC/C,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC;QACrC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;IAElB,MAAM,aAAa,GAAG,MAAM,8BAAoB,CAAC,aAAa,CAAC,CAAC;IAChE,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,aAAa,CAAC,aAAa,CAAC,CAAC;IACrF,IAAI,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;QAChC,MAAM,IAAI,KAAK,CAAC,WAAW,aAAa,mBAAmB,CAAC,CAAC;KAC9D;IAED,MAAM,uBAAa,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;IAEjD,MAAM,yBAAe,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;AACtD,CAAC;AApCD,sCAoCC","sourcesContent":["import * as fs from 'fs-extra';\nimport * as path from 'path';\nimport chalk from 'chalk';\n\nimport configureModule from './configureModule';\nimport fetchTemplate from './fetchTemplate';\nimport promptQuestionsAsync from './promptQuestionsAsync';\nimport { PACKAGES_DIR, EXPO_DIR } from '../Constants';\n\nconst TEMPLATE_PACKAGE_NAME = 'expo-module-template';\n\nexport default async function generateModuleAsync(\n  newModuleProjectDir: string,\n  options: { template?: string; useLocalTemplate?: boolean }\n) {\n  console.log(\n    `Creating new unimodule under ${chalk.magenta(path.relative(EXPO_DIR, newModuleProjectDir))}...`\n  );\n\n  let templatePath: string | undefined;\n\n  if (options.template) {\n    console.log(`Using custom module template: ${chalk.blue(options.template)}`);\n    templatePath = options.template;\n  } else if (options.useLocalTemplate) {\n    templatePath = path.join(PACKAGES_DIR, TEMPLATE_PACKAGE_NAME);\n\n    console.log(\n      `Using local module template from ${chalk.blue(path.relative(EXPO_DIR, templatePath))}`\n    );\n  }\n\n  const newModulePathFromArgv = newModuleProjectDir && path.resolve(newModuleProjectDir);\n  const newModuleName = newModulePathFromArgv && path.basename(newModulePathFromArgv);\n  const newModuleParentPath = newModulePathFromArgv\n    ? path.dirname(newModulePathFromArgv)\n    : process.cwd();\n\n  const configuration = await promptQuestionsAsync(newModuleName);\n  const newModulePath = path.resolve(newModuleParentPath, configuration.npmModuleName);\n  if (fs.existsSync(newModulePath)) {\n    throw new Error(`Module '${newModulePath}' already exists!`);\n  }\n\n  await fetchTemplate(newModulePath, templatePath);\n\n  await configureModule(newModulePath, configuration);\n}\n"]}