{"version":3,"file":"AndroidBuildPackages.js","sourceRoot":"","sources":["../../src/commands/AndroidBuildPackages.ts"],"names":[],"mappings":"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","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport inquirer from 'inquirer';\nimport path from 'path';\nimport readline from 'readline';\n\nimport * as Directories from '../Directories';\nimport * as Packages from '../Packages';\nimport * as ProjectVersions from '../ProjectVersions';\n\ntype ActionOptions = {\n  sdkVersion: string;\n  packages?: string;\n};\n\ntype Package = {\n  name: string;\n  sourceDir: string;\n  buildDirRelative: string;\n};\n\n// There are a few packages that we want to exclude from shell app builds; they don't follow any\n// easy pattern so we just keep track of them manually here.\nexport const EXCLUDED_PACKAGE_SLUGS = [\n  'expo-dev-menu',\n  'expo-dev-menu-interface',\n  'expo-module-template',\n  'unimodules-test-core',\n];\n\nconst EXPO_ROOT_DIR = Directories.getExpoRepositoryRootDir();\nconst ANDROID_DIR = Directories.getAndroidDir();\n\nconst REACT_ANDROID_PKG = {\n  name: 'ReactAndroid',\n  sourceDir: path.join(ANDROID_DIR, 'ReactAndroid'),\n  buildDirRelative: path.join('com', 'facebook', 'react'),\n};\nconst EXPOVIEW_PKG = {\n  name: 'expoview',\n  sourceDir: path.join(ANDROID_DIR, 'expoview'),\n  buildDirRelative: path.join('host', 'exp', 'exponent', 'expoview'),\n};\n\nasync function _findUnimodules(pkgDir: string): Promise<Package[]> {\n  const unimodules: Package[] = [];\n\n  const packages = await Packages.getListOfPackagesAsync();\n  for (const pkg of packages) {\n    if (!pkg.isSupportedOnPlatform('android') || !pkg.androidPackageName) continue;\n    unimodules.push({\n      name: pkg.packageSlug,\n      sourceDir: path.join(pkg.path, pkg.androidSubdirectory),\n      buildDirRelative: `${pkg.androidPackageName.replace(/\\./g, '/')}/${pkg.packageSlug}`,\n    });\n  }\n\n  return unimodules;\n}\n\nasync function _isPackageUpToDate(sourceDir: string, buildDir: string): Promise<boolean> {\n  try {\n    const sourceCommits = await _gitLogAsync(sourceDir);\n    const buildCommits = await _gitLogAsync(buildDir);\n\n    const latestSourceCommitSha = sourceCommits.lines[0].split(' ')[0];\n    const latestBuildCommitSha = buildCommits.lines[0].split(' ')[0];\n\n    // throws if source commit is not an ancestor of build commit\n    await spawnAsync(\n      'git',\n      ['merge-base', '--is-ancestor', latestSourceCommitSha, latestBuildCommitSha],\n      {\n        cwd: EXPO_ROOT_DIR,\n      }\n    );\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nasync function _gitLogAsync(path: string): Promise<{ lines: string[] }> {\n  const child = await spawnAsync('git', ['log', `--pretty=oneline`, '--', path], {\n    stdio: 'pipe',\n    cwd: EXPO_ROOT_DIR,\n  });\n\n  return {\n    lines: child.stdout\n      .trim()\n      .split(/\\r?\\n/g)\n      .filter((a) => a),\n  };\n}\n\nasync function _getSuggestedPackagesToBuild(packages: Package[]): Promise<string[]> {\n  let packagesToBuild: string[] = [];\n  for (const pkg of packages) {\n    const isUpToDate = await _isPackageUpToDate(\n      pkg.sourceDir,\n      path.join(EXPO_ROOT_DIR, 'android', 'maven', pkg.buildDirRelative)\n    );\n    if (!isUpToDate) {\n      packagesToBuild.push(pkg.name);\n    }\n  }\n  return packagesToBuild;\n}\n\nasync function _regexFileAsync(\n  filename: string,\n  regex: RegExp | string,\n  replace: string\n): Promise<void> {\n  let file = await fs.readFile(filename);\n  let fileString = file.toString();\n  await fs.writeFile(filename, fileString.replace(regex, replace));\n}\n\nlet savedFiles = {};\nasync function _stashFilesAsync(filenames: string[]): Promise<void> {\n  for (const filename of filenames) {\n    let file = await fs.readFile(filename);\n    savedFiles[filename] = file.toString();\n  }\n}\n\nasync function _restoreFilesAsync(): Promise<void> {\n  for (const filename in savedFiles) {\n    await fs.writeFile(filename, savedFiles[filename]);\n    delete savedFiles[filename];\n  }\n}\n\nasync function _commentWhenDistributing(filenames: string[]): Promise<void> {\n  for (const filename of filenames) {\n    await _regexFileAsync(\n      filename,\n      /\\/\\/ WHEN_DISTRIBUTING_REMOVE_FROM_HERE/g,\n      '/* WHEN_DISTRIBUTING_REMOVE_FROM_HERE'\n    );\n    await _regexFileAsync(\n      filename,\n      /\\/\\ WHEN_DISTRIBUTING_REMOVE_TO_HERE/g,\n      'WHEN_DISTRIBUTING_REMOVE_TO_HERE */'\n    );\n  }\n}\n\nasync function _uncommentWhenDistributing(filenames: string[]): Promise<void> {\n  for (const filename of filenames) {\n    await _regexFileAsync(filename, '/* UNCOMMENT WHEN DISTRIBUTING', '');\n    await _regexFileAsync(filename, 'END UNCOMMENT WHEN DISTRIBUTING */', '');\n  }\n}\n\nasync function _updateExpoViewAsync(packages: Package[], sdkVersion: string): Promise<number> {\n  let appBuildGradle = path.join(ANDROID_DIR, 'app', 'build.gradle');\n  let rootBuildGradle = path.join(ANDROID_DIR, 'build.gradle');\n  let expoViewBuildGradle = path.join(ANDROID_DIR, 'expoview', 'build.gradle');\n  const settingsGradle = path.join(ANDROID_DIR, 'settings.gradle');\n  const constantsJava = path.join(\n    ANDROID_DIR,\n    'expoview/src/main/java/host/exp/exponent/Constants.java'\n  );\n  const multipleVersionReactNativeActivity = path.join(\n    ANDROID_DIR,\n    'expoview/src/main/java/host/exp/exponent/experience/MultipleVersionReactNativeActivity.java'\n  );\n\n  // Modify permanently\n  await _regexFileAsync(expoViewBuildGradle, /version = '[\\d.]+'/, `version = '${sdkVersion}'`);\n  await _regexFileAsync(\n    expoViewBuildGradle,\n    /api 'com.facebook.react:react-native:[\\d.]+'/,\n    `api 'com.facebook.react:react-native:${sdkVersion}'`\n  );\n  await _regexFileAsync(\n    path.join(ANDROID_DIR, 'ReactAndroid', 'release.gradle'),\n    /version = '[\\d.]+'/,\n    `version = '${sdkVersion}'`\n  );\n  await _regexFileAsync(\n    path.join(ANDROID_DIR, 'app', 'build.gradle'),\n    /host.exp.exponent:expoview:[\\d.]+/,\n    `host.exp.exponent:expoview:${sdkVersion}`\n  );\n\n  await _stashFilesAsync([\n    appBuildGradle,\n    rootBuildGradle,\n    expoViewBuildGradle,\n    multipleVersionReactNativeActivity,\n    constantsJava,\n    settingsGradle,\n  ]);\n\n  // Modify temporarily\n  await _regexFileAsync(\n    constantsJava,\n    /TEMPORARY_ABI_VERSION\\s*=\\s*null/,\n    `TEMPORARY_ABI_VERSION = \"${sdkVersion}\"`\n  );\n  await _uncommentWhenDistributing([appBuildGradle, expoViewBuildGradle]);\n  await _commentWhenDistributing([\n    constantsJava,\n    rootBuildGradle,\n    expoViewBuildGradle,\n    multipleVersionReactNativeActivity,\n  ]);\n\n  // Clear maven local so that we don't end up with multiple versions\n  console.log(' ❌  Clearing old package versions...');\n\n  for (const pkg of packages) {\n    await fs.remove(path.join(process.env.HOME!, '.m2', 'repository', pkg.buildDirRelative));\n    await fs.remove(path.join(ANDROID_DIR, 'maven', pkg.buildDirRelative));\n    await fs.remove(path.join(pkg.sourceDir, 'build'));\n  }\n\n  // hacky workaround for weird issue where some packages need to be built twice after cleaning\n  // in order to have .so libs included in the aar\n  const reactAndroidIndex = packages.findIndex(pkg => pkg.name === REACT_ANDROID_PKG.name);\n  if (reactAndroidIndex > -1) {\n    packages.splice(reactAndroidIndex, 0, REACT_ANDROID_PKG);\n  }\n  const expoviewIndex = packages.findIndex(pkg => pkg.name === EXPOVIEW_PKG.name);\n  if (expoviewIndex > -1) {\n    packages.splice(expoviewIndex, 0, EXPOVIEW_PKG);\n  }\n\n  let failedPackages: string[] = [];\n  for (const pkg of packages) {\n    process.stdout.write(` 🛠   Building ${pkg.name}...`);\n    try {\n      await spawnAsync('./gradlew', [`:${pkg.name}:uploadArchives`], {\n        cwd: ANDROID_DIR,\n      });\n      readline.clearLine(process.stdout, 0);\n      readline.cursorTo(process.stdout, 0);\n      process.stdout.write(` ✅  Finished building ${pkg.name}\\n`);\n    } catch (e) {\n      if (\n        e.status === 130 ||\n        e.signal === 'SIGINT' ||\n        e.status === 137 ||\n        e.signal === 'SIGKILL' ||\n        e.status === 143 ||\n        e.signal === 'SIGTERM'\n      ) {\n        throw e;\n      } else {\n        failedPackages.push(pkg.name);\n        readline.clearLine(process.stdout, 0);\n        readline.cursorTo(process.stdout, 0);\n        process.stdout.write(` ❌  Failed to build ${pkg.name}:\\n`);\n        console.error(chalk.red(e.message));\n        console.error(chalk.red(e.stderr));\n      }\n    }\n  }\n\n  await _restoreFilesAsync();\n\n  console.log(' 🚚  Copying newly built packages...');\n\n  await fs.mkdirs(path.join(ANDROID_DIR, 'maven/com/facebook'));\n  await fs.mkdirs(path.join(ANDROID_DIR, 'maven/host/exp/exponent'));\n  await fs.mkdirs(path.join(ANDROID_DIR, 'maven/org/unimodules'));\n\n  for (const pkg of packages) {\n    if (failedPackages.includes(pkg.name)) {\n      continue;\n    }\n    await fs.copy(\n      path.join(process.env.HOME!, '.m2', 'repository', pkg.buildDirRelative),\n      path.join(ANDROID_DIR, 'maven', pkg.buildDirRelative)\n    );\n  }\n\n  if (failedPackages.length) {\n    console.log(' ❌  The following packages failed to build:');\n    console.log(failedPackages);\n    console.log(\n      `You will need to fix the compilation errors show in the logs above and then run \\`et abp -s ${sdkVersion} -p ${failedPackages.join(\n        ','\n      )}\\``\n    );\n  }\n\n  return failedPackages.length;\n}\n\nasync function action(options: ActionOptions) {\n  process.on('SIGINT', _exitHandler);\n  process.on('SIGTERM', _exitHandler);\n\n  const detachableUniversalModules = (\n    await _findUnimodules(path.join(EXPO_ROOT_DIR, 'packages'))\n  ).filter((unimodule) => !EXCLUDED_PACKAGE_SLUGS.includes(unimodule.name));\n\n  // packages must stay in this order --\n  // ReactAndroid MUST be first and expoview MUST be last\n  const packages: Package[] = [REACT_ANDROID_PKG, ...detachableUniversalModules, EXPOVIEW_PKG];\n  let packagesToBuild: string[] = [];\n\n  const expoviewBuildGradle = await fs.readFile(path.join(ANDROID_DIR, 'expoview', 'build.gradle'));\n  const match = expoviewBuildGradle\n    .toString()\n    .match(/api 'com.facebook.react:react-native:([\\d.]+)'/);\n  if (!match || !match[1]) {\n    throw new Error(\n      'Could not find SDK version in android/expoview/build.gradle: unexpected format'\n    );\n  }\n\n  if (match[1] !== options.sdkVersion) {\n    console.log(\n      \" 🔍  It looks like you're adding a new SDK version. Ignoring the `--packages` option and rebuilding all packages...\"\n    );\n    packagesToBuild = packages.map((pkg) => pkg.name);\n  } else if (options.packages) {\n    if (options.packages === 'all') {\n      packagesToBuild = packages.map((pkg) => pkg.name);\n    } else if (options.packages === 'suggested') {\n      console.log(' 🔍  Gathering data about packages...');\n      packagesToBuild = await _getSuggestedPackagesToBuild(packages);\n    } else {\n      const packageNames = options.packages.split(',');\n      packagesToBuild = packages\n        .map((pkg) => pkg.name)\n        .filter((pkgName) => packageNames.includes(pkgName));\n    }\n    console.log(' 🛠   Rebuilding the following packages:');\n    console.log(packagesToBuild);\n  } else {\n    // gather suggested package data and then show prompts\n    console.log(' 🔍  Gathering data...');\n\n    packagesToBuild = await _getSuggestedPackagesToBuild(packages);\n\n    console.log(' 🕵️   It appears that the following packages need to be rebuilt:');\n    console.log(packagesToBuild);\n\n    const { option } = await inquirer.prompt<{ option: string }>([\n      {\n        type: 'list',\n        name: 'option',\n        message: 'What would you like to do?',\n        choices: [\n          { value: 'suggested', name: 'Build the suggested packages only' },\n          { value: 'all', name: 'Build all packages' },\n          { value: 'choose', name: 'Choose packages manually' },\n        ],\n      },\n    ]);\n\n    if (option === 'all') {\n      packagesToBuild = packages.map((pkg) => pkg.name);\n    } else if (option === 'choose') {\n      const result = await inquirer.prompt<{ packagesToBuild: string[] }>([\n        {\n          type: 'checkbox',\n          name: 'packagesToBuild',\n          message: 'Choose which packages to build',\n          choices: packages.map((pkg) => pkg.name),\n          default: packagesToBuild,\n          pageSize: Math.min(packages.length, (process.stdout.rows || 100) - 2),\n        },\n      ]);\n      packagesToBuild = result.packagesToBuild;\n    }\n  }\n\n  try {\n    const failedPackagesCount = await _updateExpoViewAsync(\n      packages.filter((pkg) => packagesToBuild.includes(pkg.name)),\n      options.sdkVersion\n    );\n    if (failedPackagesCount > 0) {\n      process.exitCode = 1;\n    }\n  } catch (e) {\n    await _exitHandler();\n    throw e;\n  }\n}\n\nasync function _exitHandler(): Promise<void> {\n  if (Object.keys(savedFiles).length) {\n    console.log('Exited early, cleaning up...');\n    await _restoreFilesAsync();\n  }\n}\n\nexport default (program: any) => {\n  program\n    .command('android-build-packages')\n    .alias('abp')\n    .description('Builds all Android AAR packages for Turtle')\n    .option('-s, --sdkVersion [string]', '[optional] SDK version')\n    .option(\n      '-p, --packages [string]',\n      '[optional] packages to build. May be `all`, `suggested`, or a comma-separate list of package names.'\n    )\n    .asyncAction(async (options: Partial<ActionOptions>) => {\n      const sdkVersion =\n        options.sdkVersion ?? (await ProjectVersions.getNewestSDKVersionAsync('android'));\n\n      if (!sdkVersion) {\n        throw new Error('Could not infer SDK version, please run with `--sdkVersion SDK_VERSION`');\n      }\n\n      await action({ ...options, sdkVersion });\n    });\n};\n"]}