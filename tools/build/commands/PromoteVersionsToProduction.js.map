{"version":3,"file":"PromoteVersionsToProduction.js","sourceRoot":"","sources":["../../src/commands/PromoteVersionsToProduction.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,kDAA0B;AAC1B,wDAAgC;AAChC,mCAA6C;AAC7C,6DAA+C;AAG/C,4CAAqE;AAErE,KAAK,UAAU,MAAM;IACnB,mBAAmB;IACnB,YAAM,CAAC,GAAG,CAAC,IAAI,GAAG,4BAAgB,CAAC;IACnC,MAAM,eAAe,GAAG,MAAM,cAAQ,CAAC,aAAa,EAAE,CAAC;IAEvD,kEAAkE;IAClE,4EAA4E;IAC5E,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;IAExD,YAAM,CAAC,GAAG,CAAC,IAAI,GAAG,+BAAmB,CAAC;IACtC,MAAM,YAAY,GAAG,MAAM,cAAQ,CAAC,aAAa,EAAE,CAAC;IACpD,MAAM,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;IAEhE,IAAI,CAAC,KAAK,EAAE;QACV,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,MAAM,CAAC,qDAAqD,CAAC,CAAC,CAAC;QACjF,OAAO;KACR;IAED,OAAO,CAAC,GAAG,CAAC,yBAAyB,eAAK,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,eAAK,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;IAChG,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC,CAAC;IAE1E,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,kBAAQ,CAAC,MAAM,CAAyB;QAClE;YACE,IAAI,EAAE,SAAS;YACf,IAAI,EAAE,WAAW;YACjB,OAAO,EAAE,gDAAgD,eAAK,CAAC,KAAK,CAAC,YAAY,CAAC,UAAU;YAC5F,OAAO,EAAE,KAAK;SACf;KACF,CAAC,CAAC;IAEH,IAAI,SAAS,EAAE;QACb,+CAA+C;QAC/C,MAAM,cAAQ,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;QAEjD,OAAO,CAAC,GAAG,CACT,eAAK,CAAC,KAAK,CAAC,mEAAmE,CAAC,EAChF,eAAK,CAAC,IAAI,CAAC,WAAW,+BAAmB,qBAAqB,CAAC,CAChE,CAAC;KACH;SAAM;QACL,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;KACvC;AACH,CAAC;AAED,kBAAe,CAAC,OAAgB,EAAE,EAAE;IAClC,OAAO;SACJ,OAAO,CAAC,gCAAgC,CAAC;SACzC,KAAK,CAAC,0BAA0B,EAAE,kBAAkB,CAAC;SACrD,WAAW,CAAC,iEAAiE,CAAC;SAC9E,WAAW,CAAC,MAAM,CAAC,CAAC;AACzB,CAAC,CAAC","sourcesContent":["import chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport { Config, Versions } from '@expo/xdl';\nimport * as jsondiffpatch from 'jsondiffpatch';\nimport { Command } from '@expo/commander';\n\nimport { STAGING_API_HOST, PRODUCTION_API_HOST } from '../Constants';\n\nasync function action() {\n  // Get from staging\n  Config.api.host = STAGING_API_HOST;\n  const versionsStaging = await Versions.versionsAsync();\n\n  // since there is only one versions cache, we need to wait a small\n  // amount of time so that the cache is invalidated before fetching from prod\n  await new Promise((resolve) => setTimeout(resolve, 10));\n\n  Config.api.host = PRODUCTION_API_HOST;\n  const versionsProd = await Versions.versionsAsync();\n  const delta = jsondiffpatch.diff(versionsProd, versionsStaging);\n\n  if (!delta) {\n    console.log(chalk.yellow('There are no changes to apply in the configuration.'));\n    return;\n  }\n\n  console.log(`Here is the diff from ${chalk.green('staging')} -> ${chalk.green('production')}:`);\n  console.log(jsondiffpatch.formatters.console.format(delta, versionsProd));\n\n  const { isCorrect } = await inquirer.prompt<{ isCorrect: boolean }>([\n    {\n      type: 'confirm',\n      name: 'isCorrect',\n      message: `Does this look correct? Type \\`y\\` to update ${chalk.green('production')} config.`,\n      default: false,\n    },\n  ]);\n\n  if (isCorrect) {\n    // Promote staging configuration to production.\n    await Versions.setVersionsAsync(versionsStaging);\n\n    console.log(\n      chalk.green('\\nSuccessfully updated production config. You can check it out on'),\n      chalk.blue(`https://${PRODUCTION_API_HOST}/--/api/v2/versions`)\n    );\n  } else {\n    console.log(chalk.yellow('Canceled'));\n  }\n}\n\nexport default (program: Command) => {\n  program\n    .command('promote-versions-to-production')\n    .alias('promote-versions-to-prod', 'promote-versions')\n    .description('Promotes the latest versions config from staging to production.')\n    .asyncAction(action);\n};\n"]}