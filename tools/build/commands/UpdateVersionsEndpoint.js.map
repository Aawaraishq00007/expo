{"version":3,"file":"UpdateVersionsEndpoint.js","sourceRoot":"","sources":["../../src/commands/UpdateVersionsEndpoint.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport semver from 'semver';\nimport set from 'lodash/set';\nimport inquirer from 'inquirer';\nimport unset from 'lodash/unset';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { Config, Versions } from '@expo/xdl';\nimport * as jsondiffpatch from 'jsondiffpatch';\nimport { Command } from '@expo/commander';\n\nimport { STAGING_API_HOST, PRODUCTION_API_HOST } from '../Constants';\nimport { sleepAsync } from '../Utils';\n\ntype ActionOptions = {\n  sdkVersion: string;\n  root: boolean;\n  deprecated?: boolean;\n  releaseNoteUrl?: string;\n  key?: string;\n  value?: any;\n  delete: boolean;\n  deleteSdk: boolean;\n  reset: boolean;\n};\n\nasync function chooseSdkVersionAsync(sdkVersions: string[]): Promise<string> {\n  const { sdkVersion } = await inquirer.prompt<{ sdkVersion: string }>([\n    {\n      type: 'list',\n      name: 'sdkVersion',\n      default: sdkVersions[0],\n      choices: sdkVersions,\n    },\n  ]);\n  return sdkVersion;\n}\n\nasync function askForCorrectnessAsync(): Promise<boolean> {\n  const { isCorrect } = await inquirer.prompt<{ isCorrect: boolean }>([\n    {\n      type: 'confirm',\n      name: 'isCorrect',\n      message: `Does this look correct? Type \\`y\\` or press enter to update ${chalk.green(\n        'staging'\n      )} config.`,\n      default: true,\n    },\n  ]);\n  return isCorrect;\n}\n\nfunction setConfigValueForKey(config: object, key: string, value: any): void {\n  if (value === undefined) {\n    console.log(`Deleting ${chalk.yellow(key)} config key ...`);\n    unset(config, key);\n  } else {\n    console.log(`Changing ${chalk.yellow(key)} config key ...`);\n    set(config, key, value);\n  }\n}\n\nasync function applyChangesToStagingAsync(delta: any, previousVersions: any, newVersions: any) {\n  if (!delta) {\n    console.log(chalk.yellow('There are no changes to apply in the configuration.'));\n    return;\n  }\n\n  console.log(\n    `\\nHere is the diff of changes to apply on ${chalk.green('staging')} version config:`\n  );\n  console.log(jsondiffpatch.formatters.console.format(delta!, previousVersions));\n\n  const isCorrect = await askForCorrectnessAsync();\n\n  if (isCorrect) {\n    // Save new configuration.\n    try {\n      await Versions.setVersionsAsync(newVersions);\n    } catch (error) {\n      console.error(error);\n    }\n\n    console.log(\n      chalk.green('\\nSuccessfully updated staging config. You can check it out on'),\n      chalk.blue(`https://${STAGING_API_HOST}/--/api/v2/versions`)\n    );\n  } else {\n    console.log(chalk.yellow('Canceled'));\n  }\n}\n\nasync function resetStagingConfigurationAsync() {\n  // Get current production config.\n  Config.api.host = PRODUCTION_API_HOST;\n  const productionVersions = await Versions.versionsAsync();\n\n  // Wait for the cache to invalidate.\n  await sleepAsync(10);\n\n  // Get current staging config.\n  Config.api.host = STAGING_API_HOST;\n  const stagingVersions = await Versions.versionsAsync();\n\n  // Calculate the diff between them.\n  const delta = jsondiffpatch.diff(stagingVersions, productionVersions);\n\n  // Reset changes (if any) on staging.\n  await applyChangesToStagingAsync(delta, stagingVersions, productionVersions);\n}\n\nasync function applyChangesToRootAsync(options: ActionOptions, versions: any) {\n  const newVersions = cloneDeep(versions);\n  if (options.key) {\n    if (!('value' in options) && !options.delete) {\n      console.log(chalk.red('`--key` flag requires `--value` or `--delete` flag.'));\n      return;\n    }\n    setConfigValueForKey(\n      newVersions,\n      options.key,\n      options.delete ? undefined : options.value\n    );\n  }\n\n  const delta = jsondiffpatch.diff(versions, newVersions);\n\n  await applyChangesToStagingAsync(delta, versions, newVersions);\n}\n\nasync function applyChangesToSDKVersionAsync(options: ActionOptions, versions: any) {\n  const sdkVersions = Object.keys(versions.sdkVersions).sort(semver.rcompare);\n  const sdkVersion = options.sdkVersion || (await chooseSdkVersionAsync(sdkVersions));\n  const containsSdk = sdkVersions.includes(sdkVersion);\n\n  if (!semver.valid(sdkVersion)) {\n    console.error(chalk.red(`Provided SDK version ${chalk.cyan(sdkVersion)} is invalid.`));\n    return;\n  }\n  if (!containsSdk) {\n    const { addNewSdk } = await inquirer.prompt<{ addNewSdk: boolean }>([\n      {\n        type: 'confirm',\n        name: 'addNewSdk',\n        message: `Configuration for SDK ${chalk.cyan(\n          sdkVersion\n        )} doesn't exist. Do you want to initialize it?`,\n        default: true,\n      },\n    ]);\n    if (!addNewSdk) {\n      console.log(chalk.yellow('Canceled'));\n      return;\n    }\n  }\n\n  // If SDK is already there, make a deep clone of the sdkVersion config so we can calculate a diff later.\n  const sdkVersionConfig = containsSdk ? cloneDeep(versions.sdkVersions[sdkVersion]) : {};\n\n  console.log(`\\nUsing ${chalk.blue(STAGING_API_HOST)} host ...`);\n  console.log(`Using SDK ${chalk.cyan(sdkVersion)} ...`);\n\n  if ('deprecated' in options) {\n    setConfigValueForKey(sdkVersionConfig, 'isDeprecated', !!options.deprecated);\n  }\n  if ('releaseNoteUrl' in options && typeof options.releaseNoteUrl === 'string') {\n    setConfigValueForKey(sdkVersionConfig, 'releaseNoteUrl', options.releaseNoteUrl);\n  }\n  if (options.key) {\n    if (!('value' in options) && !options.delete) {\n      console.log(chalk.red('`--key` flag requires `--value` or `--delete` flag.'));\n      return;\n    }\n    setConfigValueForKey(\n      sdkVersionConfig,\n      options.key,\n      options.delete ? undefined : options.value\n    );\n  }\n\n  const newVersions = {\n    ...versions,\n    sdkVersions: {\n      ...versions.sdkVersions,\n      [sdkVersion]: sdkVersionConfig,\n    },\n  };\n\n  if (options.deleteSdk) {\n    delete newVersions.sdkVersions[sdkVersion];\n  }\n\n  const delta = jsondiffpatch.diff(\n    versions.sdkVersions[sdkVersion],\n    newVersions.sdkVersions[sdkVersion]\n  );\n\n  await applyChangesToStagingAsync(delta, versions.sdkVersions[sdkVersion], newVersions);\n}\n\nasync function action(options: ActionOptions) {\n  if (options.reset) {\n    await resetStagingConfigurationAsync();\n    return;\n  }\n\n  Config.api.host = STAGING_API_HOST;\n  const versions = await Versions.versionsAsync();\n\n  if (options.root) {\n    await applyChangesToRootAsync(options, versions);\n  } else {\n    await applyChangesToSDKVersionAsync(options, versions);\n  }\n}\n\nexport default (program: Command) => {\n  program\n    .command('update-versions-endpoint')\n    .alias('update-versions')\n    .description(\n      `Updates SDK configuration under ${chalk.blue('https://staging.exp.host/--/api/v2/versions')}`\n    )\n    .option(\n      '-s, --sdkVersion [string]',\n      'SDK version to update. Can be chosen from the list if not provided.'\n    )\n    .option(\n      '--root',\n      'Modify a key at the root of the versions config rather than a specific SDK version.',\n      false\n    )\n    .option('-d, --deprecated [boolean]', 'Sets chosen SDK version as deprecated.')\n    .option('-r, --release-note-url [string]', 'URL pointing to the release blog post.')\n    .option('-k, --key [string]', 'A custom, dotted key that you want to set in the configuration.')\n    .option('-v, --value [any]', 'Value for the custom key to be set in the configuration.')\n    .option('--delete', 'Deletes config entry under key specified by `--key` flag.', false)\n    .option(\n      '--delete-sdk',\n      'Deletes configuration for SDK specified by `--sdkVersion` flag.',\n      false\n    )\n    .option('--reset', 'Resets changes on staging to the state from production.', false)\n    .asyncAction(action);\n};\n"]}