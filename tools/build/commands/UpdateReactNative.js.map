{"version":3,"file":"UpdateReactNative.js","sourceRoot":"","sources":["../../src/commands/UpdateReactNative.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs-extra';\nimport chalk from 'chalk';\nimport { Command } from '@expo/commander';\nimport spawnAsync from '@expo/spawn-async';\n\nimport { EXPO_DIR, ANDROID_DIR } from '../Constants';\nimport { getNextSDKVersionAsync } from '../ProjectVersions';\nimport { getReactNativeSubmoduleDir } from '../Directories';\n\ntype ActionOptions = {\n  checkout?: string;\n  sdkVersion?: string;\n};\n\nconst REACT_NATIVE_SUBMODULE_PATH = getReactNativeSubmoduleDir();\nconst REACT_ANDROID_PATH = path.join(ANDROID_DIR, 'ReactAndroid');\nconst REACT_COMMON_PATH = path.join(ANDROID_DIR, 'ReactCommon');\n\nasync function checkoutReactNativeSubmoduleAsync(checkoutRef: string): Promise<void> {\n  await spawnAsync('git', ['fetch'], {\n    cwd: REACT_NATIVE_SUBMODULE_PATH,\n  });\n  await spawnAsync('git', ['checkout', checkoutRef], {\n    cwd: REACT_NATIVE_SUBMODULE_PATH,\n  });\n}\n\nasync function updateReactAndroidAsync(sdkVersion: string): Promise<void> {\n  console.log(`Cleaning ${chalk.magenta(path.relative(EXPO_DIR, REACT_ANDROID_PATH))}...`);\n  await fs.remove(REACT_ANDROID_PATH);\n\n  console.log(`Cleaning ${chalk.magenta(path.relative(EXPO_DIR, REACT_COMMON_PATH))}...`);\n  await fs.remove(REACT_COMMON_PATH);\n\n  console.log(\n    `Running ${chalk.blue('ReactAndroidCodeTransformer')} with ${chalk.yellow(\n      `./gradlew :tools:execute --args ${sdkVersion}`\n    )} command...`\n  );\n  await spawnAsync('./gradlew', [':tools:execute', '--args', sdkVersion], {\n    cwd: ANDROID_DIR,\n    stdio: 'inherit',\n  });\n}\n\nasync function action(options: ActionOptions) {\n  if (options.checkout) {\n    console.log(\n      `Checking out ${chalk.magenta(\n        path.relative(EXPO_DIR, REACT_NATIVE_SUBMODULE_PATH)\n      )} submodule at ${chalk.blue(options.checkout)} ref...`\n    );\n    await checkoutReactNativeSubmoduleAsync(options.checkout);\n  }\n\n  // When we're updating React Native, we mostly want it to be for the next SDK that isn't versioned yet.\n  const androidSdkVersion = options.sdkVersion || (await getNextSDKVersionAsync('android'));\n\n  if (!androidSdkVersion) {\n    throw new Error(\n      'Cannot obtain next SDK version. Try to run with --sdkVersion <sdkVersion> flag.'\n    );\n  }\n\n  console.log(\n    `Updating ${chalk.green('ReactAndroid')} for SDK ${chalk.cyan(androidSdkVersion)} ...`\n  );\n  await updateReactAndroidAsync(androidSdkVersion);\n}\n\nexport default (program: Command) => {\n  program\n    .command('update-react-native')\n    .alias('update-rn', 'urn')\n    .description(\n      'Updates React Native submodule and applies Expo-specific code transformations on ReactAndroid and ReactCommon folders.'\n    )\n    .option(\n      '-c, --checkout [string]',\n      \"Git's ref to the commit, tag or branch on which the React Native submodule should be checkouted.\"\n    )\n    .option(\n      '-s, --sdkVersion [string]',\n      'SDK version for which the forked React Native will be used. Defaults to the newest SDK version increased by a major update.'\n    )\n    .asyncAction(action);\n};\n"]}