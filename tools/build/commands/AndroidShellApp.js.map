{"version":3,"file":"AndroidShellApp.js","sourceRoot":"","sources":["../../src/commands/AndroidShellApp.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAA4C;AAC5C,wDAA0B;AAC1B,gDAAwB;AACxB,4DAA8C;AAC9C,oEAAsD;AAetD,KAAK,UAAU,MAAM,CAAC,OAAsB;IAC1C,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;QACvC,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAC;KAChF;IAED,IAAI,OAAO,CAAC,UAAU,KAAK,CAAC,MAAM,eAAe,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC,EAAE;QACtF,MAAM,IAAI,KAAK,CACb,kDAAkD,OAAO,CAAC,UAAU,mDAAmD,CACxH,CAAC;KACH;IAED,IAAI,CAAC,kBAAE,CAAC,UAAU,CAAC,cAAI,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,EAAE,OAAO,CAAC,CAAC,EAAE;QACnE,MAAM,IAAI,KAAK,CACb,sIAAsI,CACvI,CAAC;KACH;IAED,qBAAe,CAAC,0BAA0B,CAAC;QACzC,SAAS,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO;QACjD,SAAS,EAAE,KAAK;QAChB,UAAU,EAAE,WAAW,CAAC,wBAAwB,EAAE;QAClD,GAAG,OAAO;QACV,KAAK,EAAE,OAAO,CAAC,aAAa;KAC7B,CAAC,CAAC;AACL,CAAC;AAED,kBAAe,CAAC,OAAY,EAAE,EAAE;IAC9B,OAAO;SACJ,OAAO,CAAC,mBAAmB,CAAC;SAC5B,WAAW,CACV,oFAAoF,CACrF;SACA,MAAM,CAAC,oBAAoB,EAAE,cAAc,CAAC;SAC5C,MAAM,CAAC,2BAA2B,EAAE,aAAa,CAAC;SAClD,MAAM,CAAC,+BAA+B,EAAE,iBAAiB,CAAC;SAC1D,MAAM,CAAC,0BAA0B,EAAE,8CAA8C,CAAC;SAClF,MAAM,CACL,0BAA0B,EAC1B,6FAA6F,CAC9F;SACA,MAAM,CACL,oBAAoB,EACpB,mEAAmE,CACpE;SACA,MAAM,CAAC,qBAAqB,EAAE,6BAA6B,CAAC;SAC5D,MAAM,CAAC,0BAA0B,EAAE,2BAA2B,CAAC;SAC/D,MAAM,CAAC,6BAA6B,EAAE,8BAA8B,CAAC;SACrE,MAAM,CAAC,wBAAwB,EAAE,yBAAyB,CAAC;SAC3D,WAAW,CAAC,MAAM,CAAC,CAAC;AACzB,CAAC,CAAC","sourcesContent":["import { AndroidShellApp } from '@expo/xdl';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport * as Directories from '../Directories';\nimport * as ProjectVersions from '../ProjectVersions';\n\ntype ActionOptions = {\n  url: string;\n  sdkVersion: string;\n  releaseChannel?: string;\n  keystore?: string;\n  keystoreAlias?: string;\n  keystorePassword?: string;\n  keyPassword?: string;\n  buildType?: string;\n  buildMode?: string;\n  modules?: string;\n};\n\nasync function action(options: ActionOptions) {\n  if (!options.url || !options.sdkVersion) {\n    throw new Error('Must run with `--url MANIFEST_URL --sdkVersion SDK_VERSION`');\n  }\n\n  if (options.sdkVersion !== (await ProjectVersions.getNewestSDKVersionAsync('android'))) {\n    throw new Error(\n      `In order to build a shell app with SDK version ${options.sdkVersion} you need to check out that SDK's release branch.`\n    );\n  }\n\n  if (!fs.existsSync(path.join(Directories.getAndroidDir(), 'maven'))) {\n    throw new Error(\n      'You need to build the aar packages locally before creating a shell app; run `et android-build-packages` and then rerun this command.'\n    );\n  }\n\n  AndroidShellApp.createAndroidShellAppAsync({\n    buildMode: options.keystore ? 'release' : 'debug',\n    buildType: 'apk',\n    workingDir: Directories.getExpoRepositoryRootDir(),\n    ...options,\n    alias: options.keystoreAlias,\n  });\n}\n\nexport default (program: any) => {\n  program\n    .command('android-shell-app')\n    .description(\n      'Generates and builds an Android shell app locally with the specified configuration'\n    )\n    .option('-u, --url [string]', 'Manifest URL')\n    .option('-s, --sdkVersion [string]', 'SDK version')\n    .option('-r, --releaseChannel [string]', 'Release channel')\n    .option('-t, --buildType [string]', 'type of build: app-bundle|apk (default: apk)')\n    .option(\n      '-m, --buildMode [string]',\n      'mode of build: debug|release (defaults to release if keystore is provided, debug otherwise)'\n    )\n    .option(\n      '--modules [string]',\n      'list of modules to include in the build (defaults to all modules)'\n    )\n    .option('--keystore [string]', 'Path to keystore (optional)')\n    .option('--keystoreAlias [string]', 'Keystore alias (optional)')\n    .option('--keystorePassword [string]', 'Keystore password (optional)')\n    .option('--keyPassword [string]', 'Key password (optional)')\n    .asyncAction(action);\n};\n"]}