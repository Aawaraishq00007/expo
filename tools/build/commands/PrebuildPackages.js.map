{"version":3,"file":"PrebuildPackages.js","sourceRoot":"","sources":["../../src/commands/PrebuildPackages.ts"],"names":[],"mappings":";;;;;AAAA,kDAA0B;AAC1B,2CAAyC;AAGzC,uDAA+B;AAC/B,0CAAwD;AACxD,6EAAqD;AACrD,wDAMiC;AAQjC,KAAK,UAAU,IAAI,CAAC,YAAsB,EAAE,OAAsB;IAChE,MAAM,oBAAoB,GACxB,YAAY,CAAC,MAAM,GAAG,CAAC;QACrB,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,iCAAoB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACpE,CAAC,CAAC,iCAAoB,CAAC;IAE3B,IAAI,OAAO,CAAC,UAAU,EAAE;QACtB,gBAAM,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;QACzD,MAAM,sBAAY,CAAC,qBAAqB,EAAE,CAAC;KAC5C;IAED,MAAM,QAAQ,GAAG,oBAAoB,CAAC,GAAG,CAAC,2BAAgB,CAAC,CAAC,MAAM,CAAC,OAAO,CAAc,CAAC;IAEzF,IAAI,OAAO,CAAC,eAAe,EAAE;QAC3B,gBAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;QAC9C,MAAM,iCAAoB,CAAC,QAAQ,CAAC,CAAC;QACrC,+DAA+D;QAC/D,OAAO;KACR;IAED,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAE;QAC1B,gBAAM,CAAC,IAAI,CAAC,kBAAkB,eAAK,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAE9D,MAAM,SAAS,GAAG,wBAAW,CAAC,GAAG,EAAE,CAAC;QACpC,MAAM,YAAY,GAAG,MAAM,0CAA6B,CAAC,GAAG,CAAC,CAAC;QAE9D,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE;YAC1B,MAAM,2CAA8B,CAAC,YAAY,CAAC,CAAC;YACnD,MAAM,qCAAwB,CAAC,YAAY,CAAC,CAAC;SAC9C;QAED,MAAM,OAAO,GAAG,wBAAW,CAAC,GAAG,EAAE,CAAC;QAClC,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,CAAC,GAAG,IAAI,CAAC;QAC9C,gBAAM,CAAC,OAAO,CAAC,sBAAsB,EAAE,eAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;KAClF;AACH,CAAC;AAED,kBAAe,CAAC,OAAgB,EAAE,EAAE;IAClC,OAAO;SACJ,OAAO,CAAC,qCAAqC,CAAC;SAC9C,KAAK,CAAC,UAAU,CAAC;SACjB,MAAM,CAAC,wBAAwB,EAAE,sDAAsD,EAAE,KAAK,CAAC;SAC/F,MAAM,CAAC,mBAAmB,EAAE,2DAA2D,EAAE,KAAK,CAAC;SAC/F,MAAM,CAAC,sBAAsB,EAAE,8BAA8B,EAAE,KAAK,CAAC;SACrE,WAAW,CAAC,IAAI,CAAC,CAAC;AACvB,CAAC,CAAC","sourcesContent":["import chalk from 'chalk';\nimport { performance } from 'perf_hooks';\nimport { Command } from '@expo/commander';\n\nimport logger from '../Logger';\nimport { Package, getPackageByName } from '../Packages';\nimport XcodeProject from '../prebuilds/XcodeProject';\nimport {\n  buildFrameworksForProjectAsync,\n  cleanTemporaryFilesAsync,\n  cleanFrameworksAsync,\n  generateXcodeProjectSpecAsync,\n  PACKAGES_TO_PREBUILD,\n} from '../prebuilds/Prebuilder';\n\ntype ActionOptions = {\n  removeArtifacts: boolean;\n  cleanCache: boolean;\n  generateSpecs: boolean;\n};\n\nasync function main(packageNames: string[], options: ActionOptions) {\n  const filteredPackageNames =\n    packageNames.length > 0\n      ? packageNames.filter((name) => PACKAGES_TO_PREBUILD.includes(name))\n      : PACKAGES_TO_PREBUILD;\n\n  if (options.cleanCache) {\n    logger.info('ðŸ§¹ Cleaning shared derived data directory');\n    await XcodeProject.cleanBuildFolderAsync();\n  }\n\n  const packages = filteredPackageNames.map(getPackageByName).filter(Boolean) as Package[];\n\n  if (options.removeArtifacts) {\n    logger.info('ðŸ§¹ Removing existing artifacts');\n    await cleanFrameworksAsync(packages);\n    // Stop here, it doesn't make much sense to build them again ;)\n    return;\n  }\n\n  for (const pkg of packages) {\n    logger.info(`ðŸ“¦ Prebuilding ${chalk.green(pkg.packageName)}`);\n\n    const startTime = performance.now();\n    const xcodeProject = await generateXcodeProjectSpecAsync(pkg);\n\n    if (!options.generateSpecs) {\n      await buildFrameworksForProjectAsync(xcodeProject);\n      await cleanTemporaryFilesAsync(xcodeProject);\n    }\n\n    const endTime = performance.now();\n    const timeDiff = (endTime - startTime) / 1000;\n    logger.success('   Finished in: %s\\n', chalk.magenta(timeDiff.toFixed(2) + 's'));\n  }\n}\n\nexport default (program: Command) => {\n  program\n    .command('prebuild-packages [packageNames...]')\n    .alias('prebuild')\n    .option('-r, --remove-artifacts', 'Removes `.xcframework` artifacts for given packages.', false)\n    .option('-c, --clean-cache', 'Cleans the shared derived data folder before prebuilding.', false)\n    .option('-g, --generate-specs', 'Only generates project specs', false)\n    .asyncAction(main);\n};\n"]}