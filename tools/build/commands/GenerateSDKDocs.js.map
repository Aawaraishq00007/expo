{"version":3,"file":"GenerateSDKDocs.js","sourceRoot":"","sources":["../../src/commands/GenerateSDKDocs.ts"],"names":[],"mappings":"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","sourcesContent":["import JsonFile from '@expo/json-file';\nimport spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport * as Directories from '../Directories';\nimport { transformFileAsync } from '../Transforms';\n\nconst EXPO_DIR = Directories.getExpoRepositoryRootDir();\nconst DOCS_DIR = path.join(EXPO_DIR, 'docs');\nconst SDK_DOCS_DIR = path.join(DOCS_DIR, 'pages', 'versions');\nconst STATIC_EXAMPLES_DIR = path.join(DOCS_DIR, 'public', 'static', 'examples');\n\nasync function action(options) {\n  const { sdk, updateReactNativeDocs } = options;\n\n  if (!sdk) {\n    throw new Error('Must run with `--sdk SDK_VERSION`.');\n  }\n\n  if (updateReactNativeDocs) {\n    const reactNativeWebsiteDir = path.join(DOCS_DIR, 'react-native-website');\n    const reactNativePackageJsonPath = path.join(\n      EXPO_DIR,\n      'react-native-lab',\n      'react-native',\n      'package.json'\n    );\n    const reactNativeVersion = await JsonFile.getAsync(reactNativePackageJsonPath, 'version', null);\n\n    if (!reactNativeVersion) {\n      throw new Error(`React Native version not found at ${reactNativePackageJsonPath}`);\n    }\n\n    console.log(`Updating ${chalk.cyan('react-native-website')} submodule...`);\n\n    await spawnAsync('git', ['checkout', 'master'], {\n      cwd: reactNativeWebsiteDir,\n    });\n\n    await spawnAsync('git', ['pull'], {\n      cwd: reactNativeWebsiteDir,\n    });\n\n    console.log(`Importing React Native docs to ${chalk.yellow('unversioned')} directory...\\n`);\n\n    await fs.remove(path.join(SDK_DOCS_DIR, 'unversioned', 'react-native'));\n\n    await spawnAsync('et', ['update-react-native-docs', '--sdk', 'unversioned'], {\n      stdio: 'inherit',\n      cwd: DOCS_DIR,\n    });\n  }\n\n  const targetSdkDirectory = path.join(SDK_DOCS_DIR, `v${sdk}`);\n  const targetExampleDirectory = path.join(STATIC_EXAMPLES_DIR, `v${sdk}`);\n\n  if (await fs.pathExists(targetSdkDirectory)) {\n    console.log(chalk.magenta(`v${sdk}`), 'directory already exists. Skipping copy operation.');\n  } else {\n    console.log(\n      `Copying ${chalk.yellow('unversioned')} docs to ${chalk.yellow(`v${sdk}`)} directory...`\n    );\n\n    await fs.copy(path.join(SDK_DOCS_DIR, 'unversioned'), targetSdkDirectory);\n\n    // Version the sourcecode URLs for the API pages\n    const apiPages = await fs.readdir(path.join(targetSdkDirectory, 'sdk'));\n    await Promise.all(\n      apiPages.map(async (api) => {\n        const apiFilePath = path.join(targetSdkDirectory, 'sdk', api);\n        await transformFileAsync(apiFilePath, [\n          {\n            find: /(sourceCodeUrl:.*?\\/tree\\/)(master)(\\/packages[^\\n]*)/,\n            replaceWith: `$1sdk-${sdk.substring(0, 2)}$3`,\n          },\n        ]);\n      })\n    );\n  }\n\n  if (await fs.pathExists(targetExampleDirectory)) {\n    console.log(\n      chalk.magenta(`v${sdk}`),\n      'examples directory already exists. Skipping copy operation.'\n    );\n  } else {\n    console.log(\n      `Copying ${chalk.yellow('unversioned')} static examples to ${chalk.yellow(\n        `v${sdk}`\n      )} directory...`\n    );\n\n    await fs.copy(path.join(STATIC_EXAMPLES_DIR, 'unversioned'), targetExampleDirectory);\n  }\n\n  console.log(\n    `\\nDocs version ${chalk.red(\n      sdk\n    )} created successfully. By default, it will not be included in the production build.` +\n      `\\nWhen the new version is ready to deploy, set version to ${chalk.red(\n        sdk\n      )} in ${chalk.yellow('docs/package.json')}`\n  );\n}\n\nexport default (program) => {\n  program\n    .command('generate-sdk-docs')\n    .option('--sdk <string>', 'SDK version of docs to generate.')\n    .option('--update-react-native-docs', 'Whether to update React Native docs.')\n    .description(`Copies unversioned docs and static examples to SDK-specific folder.`)\n    .asyncAction(action);\n};\n"]}