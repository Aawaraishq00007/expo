{"version":3,"file":"NativeUnitTests.js","sourceRoot":"","sources":["../../src/commands/NativeUnitTests.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,oEAA2C;AAC3C,kDAA0B;AAC1B,wDAAgC;AAEhC,4DAA8C;AAC9C,qEAAkE;AAKlE,KAAK,UAAU,UAAU,CAAC,EACxB,QAAQ,EACR,IAAI,GAAG,OAAO,GAIf;IACC,IAAI,CAAC,QAAQ,EAAE;QACb,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,MAAM,CAAC,uDAAuD,CAAC,CAAC,CAAC;QACnF,MAAM,MAAM,GAAG,MAAM,kBAAQ,CAAC,MAAM,CAA6B;YAC/D;gBACE,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,kDAAkD;gBAC3D,OAAO,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,MAAM,CAAC;gBACnC,OAAO,EAAE,SAAS;aACnB;SACF,CAAC,CAAC;QACH,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;KAC5B;IACD,MAAM,UAAU,GAAG,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,MAAM,CAAC;IACjE,MAAM,MAAM,GAAG,QAAQ,KAAK,KAAK,IAAI,QAAQ,KAAK,MAAM,CAAC;IACzD,IAAI,MAAM,EAAE;QACV,IAAI;YACF,MAAM,qBAAU,CAAC,eAAe,EAAE,SAAS,EAAE;gBAC3C,GAAG,EAAE,WAAW,CAAC,SAAS,EAAE;gBAC5B,KAAK,EAAE,SAAS;aACjB,CAAC,CAAC;SACJ;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;YACrC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAChB;KACF;IAED,IAAI,UAAU,EAAE;QACd,MAAM,+CAAsB,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;KACxC;AACH,CAAC;AAED,kBAAe,CAAC,OAAY,EAAE,EAAE;IAC9B,OAAO;SACJ,OAAO,CAAC,mBAAmB,CAAC;SAC5B,MAAM,CACL,yBAAyB,EACzB,+EAA+E,CAChF;SACA,MAAM,CACL,qBAAqB,EACrB,0FAA0F,CAC3F;SACA,WAAW,CAAC,gEAAgE,CAAC;SAC7E,WAAW,CAAC,UAAU,CAAC,CAAC;AAC7B,CAAC,CAAC","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\n\nimport * as Directories from '../Directories';\nimport { androidNativeUnitTests } from './AndroidNativeUnitTests';\n\ntype PlatformName = 'android' | 'ios' | 'both';\ntype TestType = 'local' | 'instrumented';\n\nasync function thisAction({\n  platform,\n  type = 'local',\n}: {\n  platform?: PlatformName;\n  type: TestType;\n}) {\n  if (!platform) {\n    console.log(chalk.yellow(\"You haven't specified platform to run unit tests for!\"));\n    const result = await inquirer.prompt<{ platform: PlatformName }>([\n      {\n        name: 'platform',\n        type: 'list',\n        message: 'Which platform do you want to run native tests ?',\n        choices: ['android', 'ios', 'both'],\n        default: 'android',\n      },\n    ]);\n    platform = result.platform;\n  }\n  const runAndroid = platform === 'android' || platform === 'both';\n  const runIos = platform === 'ios' || platform === 'both';\n  if (runIos) {\n    try {\n      await spawnAsync('fastlane scan', undefined, {\n        cwd: Directories.getIosDir(),\n        stdio: 'inherit',\n      });\n    } catch (e) {\n      console.log('Something went wrong:');\n      console.log(e);\n    }\n  }\n\n  if (runAndroid) {\n    await androidNativeUnitTests({ type });\n  }\n}\n\nexport default (program: any) => {\n  program\n    .command('native-unit-tests')\n    .option(\n      '-p, --platform <string>',\n      'Determine for which platform we should run native tests: android, ios or both'\n    )\n    .option(\n      '-t, --type <string>',\n      'Type of unit test to run, if supported by this platform. local (default) or instrumented'\n    )\n    .description('Runs native unit tests for each unimodules that provides them.')\n    .asyncAction(thisAction);\n};\n"]}