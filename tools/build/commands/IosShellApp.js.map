{"version":3,"file":"IosShellApp.js","sourceRoot":"","sources":["../../src/commands/IosShellApp.ts"],"names":[],"mappings":"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","sourcesContent":["import { IosShellApp, ImageUtils } from '@expo/xdl';\nimport fs from 'fs';\nimport path from 'path';\nimport sharp from 'sharp';\n\nimport * as Directories from '../Directories';\n\nasync function resizeIconWithSharpAsync(iconSizePx: number, iconFilename: string, destinationIconPath: string) {\n  const filename = path.join(destinationIconPath, iconFilename);\n\n  // sharp can't have same input and output filename, so load to buffer then\n  // write to disk after resize is complete\n  let buffer = await sharp(filename).resize(iconSizePx, iconSizePx).toBuffer();\n\n  fs.writeFileSync(filename, buffer);\n}\n\nasync function getImageDimensionsWithSharpAsync(dirname: string, basename: string) {\n  const filename = path.join(dirname, basename);\n  try {\n    let { width, height } = await sharp(filename).metadata();\n    return { width, height };\n  } catch (e) {\n    return null;\n  }\n}\n\ntype ActionOptions = {\n  action: string;\n  [key: string]: any;\n};\n\nasync function action(providedOptions: ActionOptions) {\n  ImageUtils.setResizeImageFunction(resizeIconWithSharpAsync);\n  ImageUtils.setGetImageDimensionsFunction(getImageDimensionsWithSharpAsync);\n\n  const options = {\n    ...providedOptions,\n    expoSourcePath: Directories.getIosDir(),\n  };\n\n  if (options.action === 'build') {\n    return await IosShellApp.buildAndCopyArtifactAsync(options);\n  } else if (options.action === 'configure') {\n    return await IosShellApp.configureAndCopyArchiveAsync(options);\n  } else if (options.action === 'create-workspace') {\n    return await IosShellApp.createTurtleWorkspaceAsync(options);\n  } else {\n    throw new Error(`Unsupported action '${options.action}'.`);\n  }\n}\n\nexport default (program: any) => {\n  program\n    .command('ios-shell-app')\n    .description('Generates and builds an iOS shell app locally with the specified configuration')\n    .option('-a, --action [string]', 'Action to perform: configure | build | create-workspace')\n    .option('-u, --url [string]', 'Manifest URL')\n    .option('-s, --sdkVersion [string]', 'SDK version to use when requesting the manifest')\n    .option('--shellAppSdkVersion [string]', 'SDK version for the shell app', 'UNVERSIONED')\n    .option('-r, --releaseChannel [string]', 'Release channel')\n    .option('--manifest [string]', 'App manifest')\n    .option('--skipRepoUpdate', 'Include if you want the CocoaPods repo update to be skipped')\n    .option('-t, --type [string]', 'Type of build: simulator | archive | client', 'archive')\n    .option('-c, --configuration [string]', 'Build configuration: Debug | Release', 'Release')\n    .option('-v, --verbose [boolean]', 'Print verbose output', false)\n    .option(\n      '--testEnvironment [string]',\n      'Test environment for the shell app: local | ci | none',\n      'none'\n    )\n    .option(\n      '--privateConfigFile [string]',\n      'Path to a private config file containing, e.g., private api keys'\n    )\n    .option('--appleTeamId [string]', `Apple Developer's account Team ID`)\n    .option('--archivePath [string]', 'Path to existing NSBundle to configure (optional)')\n    .option('--output [string]', 'Path where the archive should be created (optional)')\n    .option(\n      '--workspacePath [string]',\n      'Path for the unbuilt xcode workspace to create/use (optional)'\n    )\n    .asyncAction(action);\n};\n"]}