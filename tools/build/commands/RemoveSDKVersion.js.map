{"version":3,"file":"RemoveSDKVersion.js","sourceRoot":"","sources":["../../src/commands/RemoveSDKVersion.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport semver from 'semver';\nimport inquirer from 'inquirer';\nimport { Command } from '@expo/commander';\n\nimport * as IosVersioning from '../versioning/ios';\nimport * as AndroidVersioning from '../versioning/android';\nimport { Platform, getSDKVersionsAsync, getOldestSDKVersionAsync } from '../ProjectVersions';\n\ntype ActionOptions = {\n  platform: Platform;\n  sdkVersion?: string;\n};\n\nconst SUPPORTED_PLATFORMS: Platform[] = ['ios', 'android'];\n\nasync function getOldestOrAskForSDKVersionAsync(platform: Platform): Promise<string | undefined> {\n  const sdkVersions = await getSDKVersionsAsync(platform);\n  const defaultSdkVersion = await getOldestSDKVersionAsync(platform);\n\n  if (defaultSdkVersion && process.env.CI) {\n    console.log(\n      `${chalk.red('`--sdkVersion`')} not provided - defaulting to ${chalk.cyan(defaultSdkVersion)}`\n    );\n    return defaultSdkVersion;\n  }\n\n  const { sdkVersion } = await inquirer.prompt<{ sdkVersion: string }>([\n    {\n      type: 'list',\n      name: 'sdkVersion',\n      message: 'What is the SDK version that you want to remove?',\n      default: defaultSdkVersion,\n      choices: sdkVersions,\n      validate(value) {\n        if (!semver.valid(value)) {\n          return `Invalid version: ${chalk.cyan(value)}`;\n        }\n        return true;\n      },\n    },\n  ]);\n  return sdkVersion;\n}\n\nasync function askForPlatformAsync(): Promise<Platform> {\n  if (process.env.CI) {\n    throw new Error(`Run with \\`--platform <${SUPPORTED_PLATFORMS.join(' | ')}>\\`.`);\n  }\n\n  const { platform } = await inquirer.prompt<{ platform: Platform }>([\n    {\n      type: 'list',\n      name: 'platform',\n      message: 'Choose a platform from which you want to remove SDK version:',\n      default: SUPPORTED_PLATFORMS[0],\n      choices: SUPPORTED_PLATFORMS,\n    },\n  ]);\n\n  return platform;\n}\n\nasync function action(options: ActionOptions) {\n  const platform = options.platform || (await askForPlatformAsync());\n  const sdkVersion =\n    options.sdkVersion || (await getOldestOrAskForSDKVersionAsync(options.platform));\n\n  if (!sdkVersion) {\n    throw new Error('Oldest SDK version not found. Try to run with `--sdkVersion <SDK version>`.');\n  }\n\n  switch (platform) {\n    case 'ios':\n      return IosVersioning.removeVersionAsync(sdkVersion);\n    case 'android':\n      return AndroidVersioning.removeVersionAsync(sdkVersion);\n    default:\n      throw new Error(`Platform '${platform}' is not supported.`);\n  }\n}\n\nexport default (program: Command) => {\n  program\n    .command('remove-sdk-version')\n    .alias('remove-sdk', 'rm-sdk', 'rs')\n    .description('Removes SDK version.')\n    .usage(\n      `\n    \nTo remove versioned code for the oldest supported SDK on iOS, run:\n${chalk.gray('>')} ${chalk.italic.cyan('et remove-sdk-version --platform ios')}`\n    )\n    .option(\n      '-p, --platform <string>',\n      `Specifies a platform for which the SDK code should be removed. Supported platforms: ${SUPPORTED_PLATFORMS.map(\n        (platform) => chalk.cyan(platform)\n      ).join(', ')}.`\n    )\n    .option(\n      '-s, --sdkVersion [string]',\n      'SDK version to remove. Defaults to the oldest supported SDK version.'\n    )\n    .asyncAction(action);\n};\n"]}