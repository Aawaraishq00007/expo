{"version":3,"file":"WorkflowDispatch.js","sourceRoot":"","sources":["../../src/commands/WorkflowDispatch.ts"],"names":[],"mappings":"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","sourcesContent":["import { Command } from '@expo/commander';\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport open from 'open';\n\nimport Git from '../Git';\nimport {\n  getWorkflowsAsync,\n  dispatchWorkflowEventAsync,\n  getLatestDispatchedWorkflowRunAsync,\n  Workflow,\n  getJobsForWorkflowRunAsync,\n} from '../GitHubActions';\nimport { deepCloneObject, retryAsync } from '../Utils';\nimport logger from '../Logger';\n\ntype CommandOptions = {\n  ref?: string;\n  open?: boolean;\n};\n\n// Object containing configs for custom workflows.\n// Custom workflows extends common workflows by providing specific inputs.\nconst CUSTOM_WORKFLOWS = {\n  'ad-hoc-client-shell-app-ios-upload': {\n    name: 'Ad-hoc iOS Client Shell App (with Upload to S3)',\n    baseWorkflowSlug: 'ad-hoc-client-shell-app-ios',\n    inputs: {\n      upload: 'upload',\n    },\n  },\n  'client-android-release': {\n    name: 'Android Client Release',\n    baseWorkflowSlug: 'client-android',\n    inputs: {\n      releaseGooglePlay: 'release-google-play',\n    },\n  },\n  'client-android-simulator': {\n    name: 'Android Client Simulator Release',\n    baseWorkflowSlug: 'client-android',\n    inputs: {\n      releaseAPK: 'release-apk',\n    },\n  },\n  'client-ios-simulator': {\n    name: 'iOS Client Simulator Release',\n    baseWorkflowSlug: 'client-ios',\n    inputs: {\n      releaseSimulator: 'release-simulator',\n    },\n  },\n  'shell-app-ios-upload': {\n    name: 'iOS Shell App (with Upload to S3)',\n    baseWorkflowSlug: 'shell-app-ios',\n    inputs: {\n      upload: 'upload',\n    },\n  },\n  'sdk-all': {\n    name: 'SDK All',\n    baseWorkflowSlug: 'sdk',\n    inputs: {\n      checkAll: 'check-all',\n    },\n  },\n};\n\nexport default (program: Command) => {\n  program\n    .command('workflow-dispatch [workflowSlug]')\n    .alias('dispatch', 'wd')\n    .option(\n      '-r, --ref <ref>',\n      'The reference of the workflow run. The reference can be a branch, tag, or a commit SHA.'\n    )\n    .option(\n      '--no-open',\n      \"Whether not to automatically open a page with workflow's job run containing the one that has just been triggered.\",\n      false\n    )\n    .description(\n      `Dispatches an event that triggers a workflow on GitHub Actions. Requires ${chalk.magenta(\n        'GITHUB_TOKEN'\n      )} env variable to be set.`\n    )\n    .asyncAction(main);\n};\n\n/**\n * Main action of the command.\n */\nasync function main(workflowSlug: string | undefined, options: CommandOptions) {\n  if (!process.env.GITHUB_TOKEN) {\n    throw new Error('Environment variable `GITHUB_TOKEN` must be set.');\n  }\n\n  const workflows = await getAllWorkflowsAsync();\n  const workflow = await findWorkflowAsync(workflows, workflowSlug);\n  const ref = options.ref || (await Git.getCurrentBranchNameAsync());\n\n  if (!workflow) {\n    throw new Error(`Unable to find workflow with slug \\`${workflowSlug}\\`.`);\n  }\n\n  // We need a confirmation to trigger a custom workflow.\n  if (!process.env.CI && workflow.inputs && !(await confirmTriggeringWorkflowAsync(workflow))) {\n    logger.warn(\n      `\\n‚ö†Ô∏è  Triggering custom workflow ${chalk.green(workflow.slug)} has been canceled.`\n    );\n    return;\n  }\n\n  // Get previously dispatched workflow run.\n  const previousWorkflowRun = await getLatestDispatchedWorkflowRunAsync(workflow.id);\n\n  // Dispatch `workflow_dispatch` event.\n  await dispatchWorkflowEventAsync(workflow.id, ref, workflow.inputs);\n\n  logger.success('üéâ Successfully dispatched workflow event ');\n\n  // Let's wait a little bit for the new workflow run to start and appear in the API response.\n  logger.info('‚è≥ Waiting for the new workflow run to start...');\n  const newWorkflowRun = await retryAsync(2000, 10, async () => {\n    const run = await getLatestDispatchedWorkflowRunAsync(workflow.id);\n\n    // Compare the result with previous workflow run.\n    return previousWorkflowRun?.id !== run?.id ? run : undefined;\n  });\n\n  // Get a list of jobs for the new workflow run.\n  const jobs = newWorkflowRun && (await getJobsForWorkflowRunAsync(newWorkflowRun.id));\n\n  // If the job exists, open it in web browser or print the link.\n  if (jobs?.[0]) {\n    const url = jobs[0].html_url;\n\n    if (options.open && !process.env.CI) {\n      await open(url);\n    }\n    logger.log(`üß≠ You can open ${chalk.magenta(url)} to track the new workflow run.`);\n  } else {\n    logger.warn(`‚ö†Ô∏è  Cannot find any triggered jobs for ${chalk.green(workflow.slug)} workflow`);\n  }\n}\n\n/**\n * Resolves to an array of workflows containing workflows fetched from the API\n * concatenated with custom workflows that declares some specific inputs.\n */\nasync function getAllWorkflowsAsync(): Promise<Workflow[]> {\n  // Fetch workflows from GitHub Actions API.\n  const commonWorkflows = await getWorkflowsAsync();\n\n  // Map custom workflow configs to workflows.\n  const customWorkflows = Object.entries(CUSTOM_WORKFLOWS)\n    .map(([customWorkflowSlug, workflowConfig]) => {\n      const baseWorkflow = commonWorkflows.find(\n        (workflow) => workflow.slug === workflowConfig.baseWorkflowSlug\n      );\n\n      return baseWorkflow\n        ? {\n            ...deepCloneObject(baseWorkflow),\n            name: workflowConfig.name,\n            slug: customWorkflowSlug,\n            baseSlug: workflowConfig.baseWorkflowSlug,\n            inputs: workflowConfig.inputs,\n          }\n        : null;\n    })\n    .filter(Boolean) as Workflow[];\n\n  const allWorkflows = ([] as Workflow[]).concat(commonWorkflows, customWorkflows);\n  return allWorkflows.sort((a, b) => a.name.localeCompare(b.name));\n}\n\n/**\n * Finds workflow ID based on given name or config filename.\n */\nasync function findWorkflowAsync(\n  workflows: Workflow[],\n  workflowSlug: string | undefined\n): Promise<Workflow | null> {\n  if (!workflowSlug) {\n    if (process.env.CI) {\n      throw new Error('Command requires `workflowName` argument when run on the CI.');\n    }\n    return await promptWorkflowAsync(workflows);\n  }\n  return workflows.find((workflow) => workflow.slug === workflowSlug) ?? null;\n}\n\n/**\n * Prompts for the workflow to trigger.\n */\nasync function promptWorkflowAsync(workflows: Workflow[]): Promise<Workflow> {\n  const { workflow } = await inquirer.prompt([\n    {\n      type: 'list',\n      name: 'workflow',\n      message: 'Which workflow do you want to dispatch?',\n      choices: workflows.map((workflow) => {\n        return {\n          name: `${chalk.yellow(workflow.name)} (${chalk.green.italic(workflow.slug)})`,\n          value: workflow,\n        };\n      }),\n      pageSize: workflows.length,\n    },\n  ]);\n  return workflow;\n}\n\n/**\n * Requires the user to confirm dispatching an event that trigger given workflow.\n */\nasync function confirmTriggeringWorkflowAsync(workflow: Workflow): Promise<boolean> {\n  logger.info(\n    `\\nüëâ I'll trigger ${chalk.green(workflow.baseSlug)} workflow extended by the following input:`\n  );\n  logger.log(workflow.inputs, '\\n');\n\n  const { confirm } = await inquirer.prompt([\n    {\n      type: 'confirm',\n      name: 'confirm',\n      message: 'Please type `y` and press enter if you want to continue',\n      default: false,\n    },\n  ]);\n  return confirm;\n}\n"]}