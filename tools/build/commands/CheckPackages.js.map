{"version":3,"file":"CheckPackages.js","sourceRoot":"","sources":["../../src/commands/CheckPackages.ts"],"names":[],"mappings":";;;;;AAAA,kDAA0B;AAG1B,uDAA+B;AAC/B,wGAAgF;AAChF,4FAAoE;AAGpE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,eAAK,CAAC;AAEzC,kBAAe,CAAC,OAAgB,EAAE,EAAE;IAClC,OAAO;SACJ,OAAO,CAAC,kCAAkC,CAAC;SAC3C,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC;SACpB,MAAM,CACL,sBAAsB,EACtB,gHAAgH,EAChH,QAAQ,CACT;SACA,MAAM,CAAC,WAAW,EAAE,4DAA4D,EAAE,KAAK,CAAC;SACxF,MAAM,CAAC,YAAY,EAAE,qCAAqC,EAAE,KAAK,CAAC;SAClE,MAAM,CAAC,WAAW,EAAE,oCAAoC,EAAE,KAAK,CAAC;SAChE,MAAM,CAAC,WAAW,EAAE,oCAAoC,EAAE,KAAK,CAAC;SAChE,MAAM,CAAC,YAAY,EAAE,0DAA0D,EAAE,KAAK,CAAC;SACvF,MAAM,CACL,uBAAuB,EACvB,yEAAyE,EACzE,KAAK,CACN;SACA,WAAW,CAAC,6DAA6D,CAAC;SAC1E,WAAW,CAAC,IAAI,CAAC,CAAC;AACvB,CAAC,CAAC;AAEF,KAAK,UAAU,IAAI,CAAC,YAAsB,EAAE,OAAsB;IAChE,OAAO,CAAC,YAAY,GAAG,YAAY,CAAC;IAEpC,MAAM,QAAQ,GAAG,MAAM,iCAAuB,CAAC,OAAO,CAAC,CAAC;IACxD,MAAM,cAAc,GAAa,EAAE,CAAC;IACpC,IAAI,SAAS,GAAG,CAAC,CAAC;IAElB,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAE;QAC1B,IAAI,MAAM,2BAAiB,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE;YACzC,SAAS,EAAE,CAAC;SACb;aAAM;YACL,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;SACtC;QACD,gBAAM,CAAC,GAAG,EAAE,CAAC;KACd;IAED,MAAM,YAAY,GAAG,cAAc,CAAC,MAAM,CAAC;IAE3C,IAAI,YAAY,KAAK,CAAC,EAAE;QACtB,gBAAM,CAAC,GAAG,CACR,GAAG,KAAK,CAAC,MAAM,SAAS,kBAAkB,CAAC,GAAG,EAC9C,GAAG,OAAO,CAAC,GAAG,YAAY,IAAI,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,UAAU,CAAC,EAAE,EACtF,cAAc,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CACxE,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAChB,OAAO;KACR;IACD,gBAAM,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;AAC5C,CAAC","sourcesContent":["import chalk from 'chalk';\nimport { Command } from '@expo/commander';\n\nimport logger from '../Logger';\nimport getPackagesToCheckAsync from '../check-packages/getPackagesToCheckAsync';\nimport checkPackageAsync from '../check-packages/checkPackageAsync';\nimport { ActionOptions } from '../check-packages/types';\n\nconst { green, magenta, yellow } = chalk;\n\nexport default (program: Command) => {\n  program\n    .command('check-packages [packageNames...]')\n    .alias('check', 'cp')\n    .option(\n      '-s, --since <commit>',\n      'Reference to the commit since which you want to run incremental checks. Defaults to HEAD of the master branch.',\n      'master'\n    )\n    .option('-a, --all', 'Whether to check all packages and ignore `--since` option.', false)\n    .option('--no-build', 'Whether to skip `yarn build` check.', false)\n    .option('--no-test', 'Whether to skip `yarn test` check.', false)\n    .option('--no-lint', 'Whether to skip `yarn lint` check.', false)\n    .option('--fix-lint', 'Whether to run `yarn lint --fix` instead of `yarn lint`.', false)\n    .option(\n      '--no-uniformity-check',\n      'Whether to check the uniformity of committed and generated build files.',\n      false\n    )\n    .description('Checks if packages build successfully and their tests pass.')\n    .asyncAction(main);\n};\n\nasync function main(packageNames: string[], options: ActionOptions): Promise<void> {\n  options.packageNames = packageNames;\n\n  const packages = await getPackagesToCheckAsync(options);\n  const failedPackages: string[] = [];\n  let passCount = 0;\n\n  for (const pkg of packages) {\n    if (await checkPackageAsync(pkg, options)) {\n      passCount++;\n    } else {\n      failedPackages.push(pkg.packageName);\n    }\n    logger.log();\n  }\n\n  const failureCount = failedPackages.length;\n\n  if (failureCount !== 0) {\n    logger.log(\n      `${green(`üèÅ ${passCount} packages passed`)},`,\n      `${magenta(`${failureCount} ${failureCount === 1 ? 'package' : 'packages'} failed:`)}`,\n      failedPackages.map((failedPackage) => yellow(failedPackage)).join(', ')\n    );\n    process.exit(1);\n    return;\n  }\n  logger.success('üèÅ All packages passed.');\n}\n"]}