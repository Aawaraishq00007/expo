{"version":3,"file":"ClientInstall.js","sourceRoot":"","sources":["../../src/commands/ClientInstall.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport { Command } from '@expo/commander';\nimport spawnAsync from '@expo/spawn-async';\nimport { Android, Config, Simulator, Versions } from '@expo/xdl';\n\nimport { STAGING_API_HOST } from '../Constants';\nimport askForPlatformAsync from '../utils/askForPlatformAsync';\nimport askForSDKVersionAsync from '../utils/askForSDKVersionAsync';\nimport { Platform, getNewestSDKVersionAsync } from '../ProjectVersions';\n\ntype ActionOptions = {\n  platform?: Platform;\n  sdkVersion?: string;\n};\n\nasync function downloadAndInstallOnIOSAsync(clientUrl: string): Promise<void> {\n  if (!(await Simulator.isSimulatorInstalledAsync())) {\n    console.error(chalk.red('iOS simulator is not installed!'));\n    return;\n  }\n\n  console.log('Booting up iOS simulator...');\n\n  const simulator = await Simulator.ensureSimulatorOpenAsync();\n\n  console.log('Uninstalling previously installed Expo client...');\n\n  await Simulator.uninstallExpoAppFromSimulatorAsync(simulator);\n\n  console.log(`Installing Expo client from ${chalk.blue(clientUrl)} on iOS simulator...`);\n\n  const installResult = await Simulator.installExpoOnSimulatorAsync({ url: clientUrl, simulator });\n\n  if (installResult.status !== 0) {\n    throw new Error('Installing Expo client simulator failed!');\n  }\n\n  const appIdentifier = 'host.exp.Exponent';\n\n  console.log(`Launching Expo client with identifier ${chalk.blue(appIdentifier)}...`);\n\n  await spawnAsync('xcrun', ['simctl', 'launch', 'booted', appIdentifier]);\n}\n\nasync function downloadAndInstallOnAndroidAsync(clientUrl: string): Promise<void> {\n  try {\n    console.log('Checking if the are any Android devices or emulators connected...');\n\n    const devices = await Android.getAttachedDevicesAsync();\n    if (devices.length === 0) {\n      throw new Error('No connected devices or emulators found.');\n    }\n\n    const device = devices[0];\n    if (devices.length > 1) {\n      console.log(\n        `More than one Android device found. Installing on the first one found, ${device.name}.`\n      );\n    }\n\n    if (!device.isAuthorized) {\n      throw new Error(\n        `This computer is not authorized for developing on ${device.name}. See https://expo.fyi/authorize-android-device.`\n      );\n    }\n\n    console.log('Uninstalling previously installed Expo client...');\n\n    await Android.uninstallExpoAsync(device);\n\n    console.log(\n      `Installing Expo client from ${chalk.blue(clientUrl)} on Android ${device.type}...`\n    );\n\n    await Android.installExpoAsync({ url: clientUrl, device });\n\n    console.log('Launching application...');\n\n    await Android.getAdbOutputAsync([\n      'shell',\n      'am',\n      'start',\n      '-n',\n      `host.exp.exponent/.LauncherActivity`,\n    ]);\n  } catch (error) {\n    console.error(chalk.red(`Unable to install Expo client: ${error.message}`));\n  }\n}\n\nasync function action(options: ActionOptions) {\n  const platform = options.platform || (await askForPlatformAsync());\n  const sdkVersion =\n    options.sdkVersion ||\n    (await askForSDKVersionAsync(platform, await getNewestSDKVersionAsync(platform)));\n\n  if (!sdkVersion) {\n    throw new Error(`Unable to find SDK version. Try to use ${chalk.yellow('--sdkVersion')} flag.`);\n  }\n\n  // Set XDL config to use staging\n  Config.api.host = STAGING_API_HOST;\n\n  const versions = await Versions.versionsAsync();\n  const sdkConfiguration = versions?.sdkVersions?.[sdkVersion];\n\n  if (!sdkConfiguration) {\n    throw new Error(`Versions configuration for SDK ${chalk.cyan(sdkVersion)} not found!`);\n  }\n\n  const tarballKey = `${platform}ClientUrl`;\n  const clientUrl = sdkConfiguration[tarballKey];\n\n  if (!clientUrl) {\n    throw new Error(`Client url not found at ${chalk.yellow(tarballKey)} key of versions config!`);\n  }\n\n  switch (platform) {\n    case 'ios': {\n      await downloadAndInstallOnIOSAsync(clientUrl);\n      break;\n    }\n    case 'android': {\n      await downloadAndInstallOnAndroidAsync(clientUrl);\n      break;\n    }\n    default: {\n      throw new Error(`Platform \"${platform}\" not implemented!`);\n    }\n  }\n  console.log(chalk.green('Successfully installed and launched staging version of the client ðŸŽ‰'));\n}\n\nexport default (program: Command) => {\n  program\n    .command('client-install')\n    .alias('ci')\n    .description(\n      'Installs staging version of the client on iOS simulator, Android emulator or connected Android device.'\n    )\n    .option('-p, --platform [string]', 'Platform for which the client will be installed.')\n    .option('-s, --sdkVersion [string]', 'SDK version of the client to install.')\n    .asyncAction(action);\n};\n"]}