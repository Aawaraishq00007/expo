{"version":3,"file":"CommentatorCommand.js","sourceRoot":"","sources":["../../src/commands/CommentatorCommand.ts"],"names":[],"mappings":";;;;;AACA,kDAA0B;AAC1B,4CAAoC;AAEpC,oDAAuD;AACvD,uDAA+B;AAa/B,kBAAe,CAAC,OAAgB,EAAE,EAAE;IAClC,OAAO;SACJ,OAAO,CAAC,aAAa,CAAC;SACtB,KAAK,CAAC,SAAS,CAAC;SAChB,MAAM,CACL,yBAAyB,EACzB,yEAAyE,CAC1E;SACA,WAAW,CACV,uDAAuD,eAAK,CAAC,IAAI,CAAC,MAAM,CACtE,6DAA6D,CAC9D,EAAE,CACJ;SACA,WAAW,CAAC,IAAI,CAAC,CAAC;AACvB,CAAC,CAAC;AAEF,KAAK,UAAU,IAAI,CAAC,OAAsB;IACxC,MAAM,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC9C,MAAM,eAAe,GAAa,EAAE,CAAC;IAErC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;QAC3B,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;KAC9C;IACD,KAAK,MAAM,OAAO,IAAI,OAAO,EAAE;QAC7B,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;YACnC,gBAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,OAAO,CAAC,CAAC;YACxD,SAAS;SACV;QACD,IAAI;YACF,MAAM,mCAAmB,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;YACvD,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SACrC;QAAC,OAAO,CAAC,EAAE;YACV,gBAAM,CAAC,KAAK,CAAC,+BAA+B,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC;SAClE;KACF;IACD,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;QAC9B,gBAAM,CAAC,GAAG,CACR,2CAA2C,EAC3C,eAAe;aACZ,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CACb,gBAAI,CAAC,eAAK,CAAC,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,EAAE,uCAAuC,KAAK,EAAE,CAAC,CAC9E;aACA,IAAI,CAAC,IAAI,CAAC,CACd,CAAC;KACH;SAAM;QACL,gBAAM,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;KACvC;AACH,CAAC;AAED,SAAS,YAAY,CAAC,aAAqB;IACzC,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAC1C,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import { Command } from '@expo/commander';\nimport chalk from 'chalk';\nimport { link } from '../Formatter';\n\nimport { commentOnIssueAsync } from '../GitHubActions';\nimport logger from '../Logger';\n\ntype ActionOptions = {\n  payload: string;\n};\n\nexport type CommentatorComment = {\n  issue: number;\n  body: string;\n};\n\nexport type CommentatorPayload = CommentatorComment[];\n\nexport default (program: Command) => {\n  program\n    .command('commentator')\n    .alias('comment')\n    .option(\n      '-p, --payload <payload>',\n      'Serialized and escaped JSON array describing what and where to comment.'\n    )\n    .description(\n      `To add \"Hello!\" comment on issue #1234, run it with ${chalk.blue.italic(\n        `--payload \"[{\\\\\"issue\\\\\": 1234, \\\\\"body\\\\\": \\\\\"Hello!\\\\\"}]\"`\n      )}`\n    )\n    .asyncAction(main);\n};\n\nasync function main(options: ActionOptions) {\n  const payload = parsePayload(options.payload);\n  const commentedIssues: number[] = [];\n\n  if (!Array.isArray(payload)) {\n    throw new Error(`Payload must be an array.`);\n  }\n  for (const comment of payload) {\n    if (!comment.issue || !comment.body) {\n      logger.error('Comment payload is incomplete:', comment);\n      continue;\n    }\n    try {\n      await commentOnIssueAsync(comment.issue, comment.body);\n      commentedIssues.push(comment.issue);\n    } catch (e) {\n      logger.error(`Failed to comment on issue #${comment.issue}:`, e);\n    }\n  }\n  if (commentedIssues.length > 0) {\n    logger.log(\n      '✍️  Commented on the following issues: %s',\n      commentedIssues\n        .map((issue) =>\n          link(chalk.blue('#' + issue), `https://github.com/expo/expo/issues/${issue}`)\n        )\n        .join(', ')\n    );\n  } else {\n    logger.log('✍️  Nothing to comment.');\n  }\n}\n\nfunction parsePayload(payloadString: string): CommentatorPayload {\n  const payload = JSON.parse(payloadString);\n  return payload;\n}\n"]}