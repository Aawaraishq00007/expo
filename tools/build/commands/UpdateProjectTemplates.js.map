{"version":3,"file":"UpdateProjectTemplates.js","sourceRoot":"","sources":["../../src/commands/UpdateProjectTemplates.ts"],"names":[],"mappings":"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","sourcesContent":["import { Command } from '@expo/commander';\nimport JsonFile from '@expo/json-file';\nimport spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { PACKAGES_DIR } from '../Constants';\nimport { Template, getAvailableProjectTemplatesAsync } from '../ProjectTemplates';\nimport { getNewestSDKVersionAsync, sdkVersionAsync } from '../ProjectVersions';\n\ntype ActionOptions = {\n  sdkVersion?: string;\n};\n\nconst DEPENDENCIES_KEYS = ['dependencies', 'devDependencies', 'peerDependencies'];\nconst BUNDLED_NATIVE_MODULES_PATH = path.join(PACKAGES_DIR, 'expo', 'bundledNativeModules.json');\n\n/**\n * Finds target version range, that is usually `bundledModuleVersion` param,\n * but in some specific cases we want to use different version range.\n *\n * @param targetVersionRange Version range that exists in `bundledNativeModules.json` file.\n * @param currentVersion Version range that is currenty used in the template.\n * @param sdkVersion SDK version string to which we're upgrading.\n */\nfunction resolveTargetVersionRange(\n  targetVersionRange: string,\n  currentVersion: string,\n  sdkVersion: string\n) {\n  if (currentVersion === '*') {\n    return currentVersion;\n  }\n  if (/^https?:\\/\\/.*\\/react-native\\//.test(currentVersion)) {\n    return `https://github.com/expo/react-native/archive/sdk-${sdkVersion}.tar.gz`;\n  }\n  return targetVersionRange;\n}\n\n/**\n * Updates single project template.\n *\n * @param template Template object containing name and path.\n * @param modulesToUpdate An object with module names to update and their version ranges.\n * @param sdkVersion SDK version string to which we're upgrading.\n */\nasync function updateTemplateAsync(\n  template: Template,\n  modulesToUpdate: object,\n  sdkVersion: string\n): Promise<void> {\n  console.log(`Updating ${chalk.bold.green(template.name)}...`);\n\n  const packageJsonPath = path.join(template.path, 'package.json');\n  const packageJson = require(packageJsonPath);\n\n  for (const dependencyKey of DEPENDENCIES_KEYS) {\n    const dependencies = packageJson[dependencyKey];\n\n    if (!dependencies) {\n      continue;\n    }\n    for (const dependencyName in dependencies) {\n      const currentVersion = dependencies[dependencyName];\n      const targetVersion = resolveTargetVersionRange(\n        modulesToUpdate[dependencyName],\n        currentVersion,\n        sdkVersion\n      );\n\n      if (targetVersion) {\n        if (targetVersion === currentVersion) {\n          console.log(\n            chalk.yellow('>'),\n            `Current version ${chalk.cyan(targetVersion)} of ${chalk.blue(\n              dependencyName\n            )} is up-to-date.`\n          );\n        } else {\n          console.log(\n            chalk.yellow('>'),\n            `Updating ${chalk.blue(dependencyName)} from ${chalk.cyan(\n              currentVersion\n            )} to ${chalk.cyan(targetVersion)}...`\n          );\n          packageJson[dependencyKey][dependencyName] = targetVersion;\n        }\n      }\n    }\n  }\n  await JsonFile.writeAsync(packageJsonPath, packageJson);\n}\n\n/**\n * Removes template's `yarn.lock` and runs `yarn`.\n *\n * @param templatePath Root path of the template.\n */\nasync function yarnTemplateAsync(templatePath: string): Promise<void> {\n  console.log(chalk.yellow('>'), 'Yarning...');\n\n  const yarnLockPath = path.join(templatePath, 'yarn.lock');\n\n  if (await fs.pathExists(yarnLockPath)) {\n    // We do want to always install the newest possible versions that match bundledNativeModules versions,\n    // so let's remove yarn.lock before updating re-yarning dependencies.\n    await fs.remove(yarnLockPath);\n  }\n  await spawnAsync('yarn', [], {\n    stdio: 'ignore',\n    cwd: templatePath,\n    env: process.env,\n  });\n}\n\nasync function action(options: ActionOptions) {\n  // At this point of the release process all platform should have the same newest SDK version.\n  const sdkVersion = options.sdkVersion ?? (await getNewestSDKVersionAsync('ios'));\n\n  if (!sdkVersion) {\n    throw new Error(\n      `Cannot infer current SDK version - please use ${chalk.gray('--sdkVersion')} flag.`\n    );\n  }\n\n  const bundledNativeModules = require(BUNDLED_NATIVE_MODULES_PATH);\n  const templates = await getAvailableProjectTemplatesAsync();\n  const expoVersion = await sdkVersionAsync();\n\n  const modulesToUpdate = {\n    ...bundledNativeModules,\n    expo: `~${expoVersion}`,\n  };\n\n  for (const template of templates) {\n    await updateTemplateAsync(template, modulesToUpdate, sdkVersion);\n    await yarnTemplateAsync(template.path);\n    console.log(chalk.yellow('>'), chalk.green('Success!'), '\\n');\n  }\n}\n\nexport default (program: Command) => {\n  program\n    .command('update-project-templates')\n    .alias('update-templates', 'upt')\n    .description(\n      'Updates dependencies of project templates to the versions that are defined in `bundledNativeModules.json` file.'\n    )\n    .option(\n      '-s, --sdkVersion [string]',\n      'SDK version for which the project templates should be updated. Defaults to the newest SDK version.'\n    )\n    .asyncAction(action);\n};\n"]}