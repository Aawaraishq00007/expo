{"version":3,"file":"UpdateVendoredModule.js","sourceRoot":"","sources":["../../src/commands/UpdateVendoredModule.ts"],"names":[],"mappings":"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","sourcesContent":["import { Command } from '@expo/commander';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport inquirer from 'inquirer';\nimport os from 'os';\nimport path from 'path';\n\nimport { EXPO_DIR } from '../Constants';\nimport { GitDirectory } from '../Git';\nimport logger from '../Logger';\nimport { PackageJson } from '../Packages';\nimport { updateBundledVersionsAsync } from '../ProjectVersions';\nimport * as Workspace from '../Workspace';\nimport {\n  getVendoringAvailablePlatforms,\n  listAvailableVendoredModulesAsync,\n  vendorPlatformAsync,\n} from '../vendoring';\nimport vendoredModulesConfig from '../vendoring/config';\nimport { legacyVendorModuleAsync } from '../vendoring/legacy';\nimport { VendoringTargetConfig } from '../vendoring/types';\n\ntype ActionOptions = {\n  list: boolean;\n  listOutdated: boolean;\n  target: string;\n  module: string;\n  platform: string;\n  commit: string;\n  semverPrefix: string;\n  updateDependencies?: boolean;\n};\n\nconst EXPO_GO_TARGET = 'expo-go';\n\nexport default (program: Command) => {\n  program\n    .command('update-vendored-module')\n    .alias('update-module', 'uvm')\n    .description('Updates 3rd party modules.')\n    .option('-l, --list', 'Shows a list of available 3rd party modules.', false)\n    .option('-o, --list-outdated', 'Shows a list of outdated 3rd party modules.', false)\n    .option(\n      '-t, --target <string>',\n      'The target to update, e.g. Expo Go or development client.',\n      EXPO_GO_TARGET\n    )\n    .option('-m, --module <string>', 'Name of the module to update.')\n    .option(\n      '-p, --platform <string>',\n      'A platform on which the vendored module will be updated.',\n      'all'\n    )\n    .option(\n      '-c, --commit <string>',\n      'Git reference on which to checkout when copying 3rd party module.',\n      'master'\n    )\n    .option(\n      '-s, --semver-prefix <string>',\n      'Setting this flag forces to use given semver prefix. Some modules may specify them by the config, but in case we want to update to alpha/beta versions we should use an empty prefix to be more strict.',\n      null\n    )\n    .option(\n      '-u, --update-dependencies',\n      'Whether to update workspace dependencies and bundled native modules.',\n      true\n    )\n    .asyncAction(action);\n};\n\nasync function action(options: ActionOptions) {\n  const target = await resolveTargetNameAsync(options.target);\n  const targetConfig = vendoredModulesConfig[target];\n\n  if (options.list || options.listOutdated) {\n    if (target !== EXPO_GO_TARGET) {\n      throw new Error(`Listing vendored modules for target \"${target}\" is not supported.`);\n    }\n    await listAvailableVendoredModulesAsync(targetConfig.modules, options.listOutdated);\n    return;\n  }\n\n  const moduleName = await resolveModuleNameAsync(options.module, targetConfig);\n  const sourceDirectory = path.join(os.tmpdir(), 'ExpoVendoredModules', moduleName);\n  const moduleConfig = targetConfig.modules[moduleName];\n\n  logger.log(\n    'üì• Cloning %s#%s from %s',\n    chalk.green(moduleName),\n    chalk.cyan(options.commit),\n    chalk.magenta(moduleConfig.source)\n  );\n\n  try {\n    // Clone repository from the source\n    await GitDirectory.shallowCloneAsync(\n      sourceDirectory,\n      moduleConfig.source,\n      options.commit ?? 'master'\n    );\n\n    const platforms = resolvePlatforms(options.platform);\n\n    for (const platform of platforms) {\n      if (!targetConfig.platforms[platform]) {\n        continue;\n      }\n\n      // TODO(@tsapeta): Remove this once all vendored modules are migrated to the new system.\n      if (!targetConfig.modules[moduleName][platform]) {\n        // If the target doesn't support this platform, maybe legacy vendoring does.\n        logger.info('‚ÄºÔ∏è  Using legacy vendoring for platform %s', chalk.yellow(platform));\n        await legacyVendorModuleAsync(moduleName, platform, sourceDirectory);\n        continue;\n      }\n\n      const relativeTargetDirectory = path.join(\n        targetConfig.platforms[platform].targetDirectory,\n        moduleName\n      );\n      const targetDirectory = path.join(EXPO_DIR, relativeTargetDirectory);\n\n      logger.log(\n        'üéØ Vendoring for %s to %s',\n        chalk.yellow(platform),\n        chalk.magenta(relativeTargetDirectory)\n      );\n\n      // Clean up previous version\n      await fs.remove(targetDirectory);\n\n      // Delegate further steps to platform's provider\n      await vendorPlatformAsync(platform, sourceDirectory, targetDirectory, moduleConfig[platform]);\n    }\n\n    // Update dependency versions only for Expo Go target.\n    if (options.updateDependencies !== false && target === EXPO_GO_TARGET) {\n      const packageJson = require(path.join(sourceDirectory, 'package.json')) as PackageJson;\n      const semverPrefix =\n        (options.semverPrefix != null ? options.semverPrefix : moduleConfig.semverPrefix) || '';\n      const newVersionRange = `${semverPrefix}${packageJson.version}`;\n\n      await updateDependenciesAsync(moduleName, newVersionRange);\n    }\n  } finally {\n    // Clean cloned repo\n    await fs.remove(sourceDirectory);\n  }\n  logger.success('üí™ Successfully updated %s\\n', chalk.bold(moduleName));\n}\n\n/**\n * Updates versions in bundled native modules and workspace projects.\n */\nasync function updateDependenciesAsync(moduleName: string, versionRange: string) {\n  logger.log('‚úçÔ∏è  Updating bundled native modules');\n\n  await updateBundledVersionsAsync({\n    [moduleName]: versionRange,\n  });\n\n  logger.log('‚úçÔ∏è  Updating workspace dependencies');\n\n  await Workspace.updateDependencyAsync(moduleName, versionRange);\n}\n\n/**\n * Validates provided target name or prompts for the valid one.\n */\nasync function resolveTargetNameAsync(providedTargetName: string): Promise<string> {\n  const targets = Object.keys(vendoredModulesConfig);\n\n  if (providedTargetName) {\n    if (targets.includes(providedTargetName)) {\n      return providedTargetName;\n    }\n    throw new Error(`Couldn't find config for ${providedTargetName} target.`);\n  }\n  const { targetName } = await inquirer.prompt([\n    {\n      type: 'list',\n      name: 'targetName',\n      prefix: '‚ùî',\n      message: 'In which target do you want to update vendored module?',\n      choices: targets.map((target) => ({\n        name: vendoredModulesConfig[target].name,\n        value: target,\n      })),\n    },\n  ]);\n  return targetName;\n}\n\n/**\n * Validates provided module name or prompts for the valid one.\n */\nasync function resolveModuleNameAsync(\n  providedModuleName: string,\n  targetConfig: VendoringTargetConfig\n): Promise<string> {\n  const moduleNames = Object.keys(targetConfig.modules);\n\n  if (providedModuleName) {\n    if (moduleNames.includes(providedModuleName)) {\n      return providedModuleName;\n    }\n    throw new Error(`Couldn't find config for ${providedModuleName} module.`);\n  }\n  const { moduleName } = await inquirer.prompt([\n    {\n      type: 'list',\n      name: 'moduleName',\n      prefix: '‚ùî',\n      message: 'Which vendored module do you want to update?',\n      choices: moduleNames,\n    },\n  ]);\n  return moduleName;\n}\n\nfunction resolvePlatforms(platform: string): string[] {\n  const all = getVendoringAvailablePlatforms();\n  return all.includes(platform) ? [platform] : all;\n}\n"]}