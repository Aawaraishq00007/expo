{"version":3,"file":"AddSDKVersion.js","sourceRoot":"","sources":["../../src/commands/AddSDKVersion.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport semver from 'semver';\nimport inquirer from 'inquirer';\nimport { Command } from '@expo/commander';\n\nimport * as AndroidVersioning from '../versioning/android';\nimport * as IosVersioning from '../versioning/ios';\nimport { Platform, getNextSDKVersionAsync } from '../ProjectVersions';\n\ntype ActionOptions = {\n  platform: Platform;\n  sdkVersion?: string;\n  filenames?: string;\n  vendored: string[];\n  reinstall?: boolean;\n};\n\nasync function getNextOrAskForSDKVersionAsync(platform: Platform): Promise<string | undefined> {\n  const defaultSdkVersion = await getNextSDKVersionAsync(platform);\n\n  if (defaultSdkVersion && process.env.CI) {\n    console.log(\n      `${chalk.red('`--sdkVersion`')} not provided - defaulting to ${chalk.cyan(defaultSdkVersion)}`\n    );\n    return defaultSdkVersion;\n  }\n\n  const { sdkVersion } = await inquirer.prompt<{ sdkVersion: string }>([\n    {\n      type: 'input',\n      name: 'sdkVersion',\n      message: 'What is the SDK version that you want to add?',\n      default: defaultSdkVersion,\n      validate(value) {\n        if (!semver.valid(value)) {\n          return `Invalid version: ${chalk.cyan(value)}`;\n        }\n        return true;\n      },\n    },\n  ]);\n  return sdkVersion;\n}\n\nasync function action(options: ActionOptions) {\n  if (!options.platform) {\n    throw new Error('Run with `--platform <ios | android>`.');\n  }\n\n  const sdkVersion = options.sdkVersion || (await getNextOrAskForSDKVersionAsync(options.platform));\n\n  if (!sdkVersion) {\n    throw new Error('Next SDK version not found. Try to run with `--sdkVersion <SDK version>`.');\n  }\n  const sdkNumber = semver.major(sdkVersion);\n\n  switch (options.platform) {\n    case 'ios':\n      if (options.vendored.length > 0) {\n        await IosVersioning.versionVendoredModulesAsync(sdkNumber, options.vendored);\n      } else if (options.filenames) {\n        await IosVersioning.versionReactNativeIOSFilesAsync(options.filenames, sdkVersion);\n      } else {\n        await IosVersioning.versionVendoredModulesAsync(sdkNumber, null);\n        await IosVersioning.addVersionAsync(sdkVersion);\n      }\n      await IosVersioning.reinstallPodsAsync(options.reinstall);\n      return;\n    case 'android':\n      return AndroidVersioning.addVersionAsync(sdkVersion);\n    default:\n      throw new Error(`Platform '${options.platform}' is not supported.`);\n  }\n}\n\nexport default (program: Command) => {\n  program\n    .command('add-sdk-version')\n    .alias('add-sdk')\n    .description('Versions code for the new SDK version.')\n    .usage(\n      `\n\nTo version code for the new SDK on iOS, run:\n${chalk.gray('>')} ${chalk.italic.cyan('et add-sdk-version --platform ios')}\n\nTo backport changes made in unversioned code into already versioned SDK, run:\n${chalk.gray('>')} ${chalk.italic.cyan(\n        'et add-sdk-version --platform ios --sdkVersion XX.0.0 --filenames */some/glob/expression/**'\n      )}`\n    )\n    .option(\n      '-p, --platform <string>',\n      `Specifies a platform for which the SDK code should be generated. Supported platforms: ${chalk.cyan(\n        'ios'\n      )}.`\n    )\n    .option(\n      '-s, --sdkVersion [string]',\n      'SDK version to add. Defaults to the newest SDK version increased by a major update.'\n    )\n    .option(\n      '-f, --filenames [string]',\n      'Glob pattern of file paths to version. Useful when you want to backport unversioned code into already versioned SDK. Optional. When provided, option `--sdkVersion` is required.'\n    )\n    .option(\n      '-v, --vendored <string>',\n      'Name of the vendored module to (re)version. iOS only.',\n      (value, previous) => (previous ?? []).concat(value),\n      []\n    )\n    .option(\n      '-r, --reinstall',\n      'Whether to force reinstalling pods after generating a new version. iOS only.'\n    )\n    .asyncAction(action);\n};\n"]}