{"version":3,"file":"ClientBuild.js","sourceRoot":"","sources":["../../src/commands/ClientBuild.ts"],"names":[],"mappings":"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","sourcesContent":["import { Command } from '@expo/commander';\nimport aws from 'aws-sdk';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport inquirer from 'inquirer';\nimport path from 'path';\n\nimport { EXPO_DIR } from '../Constants';\nimport askForPlatformAsync from '../utils/askForPlatformAsync';\nimport askForSdkVersionAsync from '../utils/askForSDKVersionAsync';\nimport { link } from '../Formatter';\nimport Git from '../Git';\nimport logger from '../Logger';\nimport { modifySdkVersionsAsync, getSdkVersionsAsync } from '../Versions';\nimport { ClientBuilder, Platform } from '../client-build/types';\nimport IosClientBuilder from '../client-build/IosClientBuilder';\nimport AndroidClientBuilder from '../client-build/AndroidClientBuilder';\nimport { getNewestSDKVersionAsync } from '../ProjectVersions';\n\nconst s3Client = new aws.S3({ region: 'us-east-1' });\nconst { yellow, blue, magenta } = chalk;\n\ntype ActionOptions = {\n  platform?: Platform;\n  release: boolean;\n};\n\nexport default (program: Command) => {\n  program\n    .command('client-build')\n    .alias('cb')\n    .description(\n      'Builds Expo client for iOS simulator or APK for Android, uploads the archive to S3 and saves its url to versions endpoint.'\n    )\n    .option('-p, --platform [string]', 'Platform for which the client will be built.')\n    .option(\n      '-r, --release',\n      'Whether to upload and release the client build to staging versions endpoint.',\n      false\n    )\n    .asyncAction(main);\n};\n\nasync function main(options: ActionOptions) {\n  const platform = options.platform || (await askForPlatformAsync());\n  const sdkBranchVersion = await Git.getSDKVersionFromBranchNameAsync();\n\n  if (options.release && !sdkBranchVersion) {\n    throw new Error(`Client builds can be released only from the release branch!`);\n  }\n\n  const builder = getBuilderForPlatform(platform);\n  const sdkVersion =\n    sdkBranchVersion ||\n    (await askForSdkVersionAsync(platform, await getNewestSDKVersionAsync(platform)));\n  const appVersion = await builder.getAppVersionAsync();\n\n  await buildOrUseCacheAsync(builder);\n\n  if (sdkVersion && options.release) {\n    await uploadAsync(builder, sdkVersion, appVersion);\n    await releaseAsync(builder, sdkVersion, appVersion);\n  }\n}\n\nfunction getBuilderForPlatform(platform: Platform): ClientBuilder {\n  switch (platform) {\n    case 'ios':\n      return new IosClientBuilder();\n    case 'android':\n      return new AndroidClientBuilder();\n    default: {\n      throw new Error(`Platform \"${platform}\" is not supported yet!`);\n    }\n  }\n}\n\nasync function askToRecreateSimulatorBuildAsync(): Promise<boolean> {\n  if (process.env.CI) {\n    return false;\n  }\n  const { createNew } = await inquirer.prompt<{ createNew: boolean }>([\n    {\n      type: 'confirm',\n      name: 'createNew',\n      message: 'Do you want to create a fresh one?',\n      default: true,\n    },\n  ]);\n  return createNew;\n}\n\nasync function askToOverrideBuildAsync(): Promise<boolean> {\n  if (process.env.CI) {\n    // we should never override anything in CI, too easy to accidentally mess something up in prod\n    return false;\n  }\n  const { override } = await inquirer.prompt<{ override: boolean }>([\n    {\n      type: 'confirm',\n      name: 'override',\n      message: 'Do you want to override it?',\n      default: true,\n    },\n  ]);\n  return override;\n}\n\nasync function buildOrUseCacheAsync(builder: ClientBuilder): Promise<void> {\n  const appPath = builder.getAppPath();\n\n  // Build directory already exists, we could reuse that one â€” especially useful on the CI.\n  if (await fs.pathExists(appPath)) {\n    const relativeAppPath = path.relative(EXPO_DIR, appPath);\n    logger.info(`Client build already exists at ${magenta.bold(relativeAppPath)}`);\n\n    if (!(await askToRecreateSimulatorBuildAsync())) {\n      logger.info('Skipped building the app, using cached build instead...');\n      return;\n    }\n  }\n  await builder.buildAsync();\n}\n\nasync function uploadAsync(\n  builder: ClientBuilder,\n  sdkVersion: string,\n  appVersion: string\n): Promise<void> {\n  const sdkVersions = await getSdkVersionsAsync(sdkVersion);\n\n  // Target app url already defined in versions endpoint.\n  // We make this check to reduce the risk of unintentional overrides.\n  if (sdkVersions?.[`${builder.platform}ClientUrl`] === builder.getClientUrl(appVersion)) {\n    logger.info(`Build ${yellow.bold(appVersion)} is already defined in versions endpoint.`);\n    logger.info('The new build would be uploaded onto the same URL.');\n\n    if (!(await askToOverrideBuildAsync())) {\n      logger.warn('Refused overriding the build, exiting the proces...');\n      process.exit(0);\n      return;\n    }\n  }\n  logger.info(`Uploading ${yellow.bold(appVersion)} build`);\n\n  await builder.uploadBuildAsync(s3Client, appVersion);\n}\n\nasync function releaseAsync(\n  builder: ClientBuilder,\n  sdkVersion: string,\n  appVersion: string\n): Promise<void> {\n  const clientUrl = builder.getClientUrl(appVersion);\n\n  logger.info(\n    `Updating versions endpoint with client url ${blue.bold(link(clientUrl, clientUrl))}`\n  );\n\n  await updateClientUrlAndVersionAsync(builder, sdkVersion, appVersion);\n}\n\nasync function updateClientUrlAndVersionAsync(\n  builder: ClientBuilder,\n  sdkVersion: string,\n  appVersion: string\n) {\n  await modifySdkVersionsAsync(sdkVersion, (sdkVersions) => {\n    sdkVersions[`${builder.platform}ClientUrl`] = builder.getClientUrl(appVersion);\n    sdkVersions[`${builder.platform}ClientVersion`] = appVersion;\n    return sdkVersions;\n  });\n}\n"]}