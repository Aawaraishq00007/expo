{"version":3,"file":"PublishDevExpoHomeCommand.js","sourceRoot":"","sources":["../../src/commands/PublishDevExpoHomeCommand.ts"],"names":[],"mappings":"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","sourcesContent":["import { Command } from '@expo/commander';\nimport JsonFile from '@expo/json-file';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport os from 'os';\nimport path from 'path';\nimport process from 'process';\nimport semver from 'semver';\n\nimport * as ExpoCLI from '../ExpoCLI';\nimport { deepCloneObject } from '../Utils';\nimport AppConfig from '../typings/AppConfig';\nimport { getNewestSDKVersionAsync } from '../ProjectVersions';\nimport { Directories, HashDirectory, XDL } from '../expotools';\n\ntype ActionOptions = {\n  dry: boolean;\n};\n\ntype ExpoCliStateObject = {\n  auth?: {\n    username?: string;\n  };\n};\n\nconst EXPO_HOME_PATH = Directories.getExpoHomeJSDir();\nconst { EXPO_HOME_DEV_ACCOUNT_USERNAME, EXPO_HOME_DEV_ACCOUNT_PASSWORD } = process.env;\n\n/**\n * Finds target SDK version for home app based on the newest SDK versions of all supported platforms.\n * If multiple different versions have been found then the highest one is used.\n */\nasync function findTargetSdkVersionAsync(): Promise<string> {\n  const iosSdkVersion = await getNewestSDKVersionAsync('ios');\n  const androidSdkVersion = await getNewestSDKVersionAsync('android');\n\n  if (!iosSdkVersion || !androidSdkVersion) {\n    throw new Error('Unable to find target SDK version.');\n  }\n\n  const sdkVersions: string[] = [iosSdkVersion, androidSdkVersion];\n  return sdkVersions.sort(semver.rcompare)[0];\n}\n\n/**\n * Sets `sdkVersion` and `version` fields in app configuration if needed.\n */\nasync function maybeUpdateHomeSdkVersionAsync(appJson: AppConfig): Promise<void> {\n  const targetSdkVersion = await findTargetSdkVersionAsync();\n\n  if (appJson.expo.sdkVersion !== targetSdkVersion) {\n    console.log(`Updating home's sdkVersion to ${chalk.cyan(targetSdkVersion)}...`);\n\n    // When publishing the sdkVersion needs to be set to the target sdkVersion. The Expo client will\n    // load it as UNVERSIONED, but the server uses this field to know which clients to serve the\n    // bundle to.\n    appJson.expo.version = targetSdkVersion;\n    appJson.expo.sdkVersion = targetSdkVersion;\n  }\n}\n\n/**\n * Returns path to production's expo-cli state file.\n */\nfunction getExpoCliStatePath(): string {\n  return path.join(os.homedir(), '.expo/state.json');\n}\n\n/**\n * Reads expo-cli state file which contains, among other things, session credentials to the account that you're logged in.\n */\nasync function getExpoCliStateAsync(): Promise<ExpoCliStateObject> {\n  return JsonFile.readAsync<ExpoCliStateObject>(getExpoCliStatePath());\n}\n\n/**\n * Sets expo-cli state file which contains, among other things, session credentials to the account that you're logged in.\n */\nasync function setExpoCliStateAsync(newState: object): Promise<void> {\n  await JsonFile.writeAsync<ExpoCliStateObject>(getExpoCliStatePath(), newState);\n}\n\n/**\n * Deletes kernel fields that needs to be removed from published manifest.\n */\nfunction deleteKernelFields(appJson: AppConfig): void {\n  console.log(`Deleting kernel-related fields...`);\n\n  // @tsapeta: Using `delete` keyword here would change the order of keys in app.json.\n  appJson.expo.kernel = undefined;\n  appJson.expo.isKernel = undefined;\n  appJson.expo.ios.publishBundlePath = undefined;\n  appJson.expo.android.publishBundlePath = undefined;\n}\n\n/**\n * Restores kernel fields that have been removed in previous steps - we don't want them to be present in published manifest.\n */\nfunction restoreKernelFields(appJson: AppConfig, appJsonBackup: AppConfig): void {\n  console.log('Restoring kernel-related fields...');\n\n  appJson.expo.kernel = appJsonBackup.expo.kernel;\n  appJson.expo.isKernel = appJsonBackup.expo.isKernel;\n  appJson.expo.ios.publishBundlePath = appJsonBackup.expo.ios.publishBundlePath;\n  appJson.expo.android.publishBundlePath = appJsonBackup.expo.android.publishBundlePath;\n}\n\n/**\n * Publishes dev home app.\n */\nasync function publishAppAsync(slug: string, url: string): Promise<void> {\n  console.log(`Publishing ${chalk.green(slug)}...`);\n\n  await XDL.publishProjectWithExpoCliAsync(EXPO_HOME_PATH, {\n    userpass: {\n      username: EXPO_HOME_DEV_ACCOUNT_USERNAME!,\n      password: EXPO_HOME_DEV_ACCOUNT_PASSWORD!,\n    },\n  });\n\n  console.log(`Done publishing ${chalk.green(slug)}. New home's app url is: ${chalk.blue(url)}`);\n}\n\n/**\n * Updates `dev-home-config.json` file with the new app url. It's then used by the client to load published home app.\n */\nasync function updateDevHomeConfigAsync(url: string): Promise<void> {\n  const devHomeConfigFilename = 'dev-home-config.json';\n  const devHomeConfigPath = path.join(\n    Directories.getExpoRepositoryRootDir(),\n    devHomeConfigFilename\n  );\n  const devManifestsFile = new JsonFile(devHomeConfigPath);\n\n  console.log(`Updating dev home config at ${chalk.magenta(devHomeConfigFilename)}...`);\n  await devManifestsFile.writeAsync({ url });\n}\n\n/**\n * Main action that runs once the command is invoked.\n */\nasync function action(options: ActionOptions): Promise<void> {\n  if (!EXPO_HOME_DEV_ACCOUNT_USERNAME) {\n    throw new Error('EXPO_HOME_DEV_ACCOUNT_USERNAME must be set in your environment.');\n  }\n  if (!EXPO_HOME_DEV_ACCOUNT_PASSWORD) {\n    throw new Error('EXPO_HOME_DEV_ACCOUNT_PASSWORD must be set in your environment.');\n  }\n\n  const expoHomeHash = await HashDirectory.hashDirectoryWithVersionsAsync(EXPO_HOME_PATH);\n  const appJsonFilePath = path.join(EXPO_HOME_PATH, 'app.json');\n  const slug = `expo-home-dev-${expoHomeHash}`;\n  const url = `exp://expo.io/@${EXPO_HOME_DEV_ACCOUNT_USERNAME!}/${slug}`;\n  const appJsonFile = new JsonFile<AppConfig>(appJsonFilePath);\n  const appJson = await appJsonFile.readAsync();\n\n  console.log(`Creating backup of ${chalk.magenta('app.json')} file...`);\n  const appJsonBackup = deepCloneObject<AppConfig>(appJson);\n\n  console.log('Getting expo-cli state of the current session...');\n  const cliStateBackup = await getExpoCliStateAsync();\n\n  await maybeUpdateHomeSdkVersionAsync(appJson);\n\n  console.log(`Modifying home's slug to ${chalk.green(slug)}...`);\n  appJson.expo.slug = slug;\n\n  deleteKernelFields(appJson);\n\n  // Save the modified `appJson` to the file so it'll be used as a manifest.\n  await appJsonFile.writeAsync(appJson);\n\n  const cliUsername = cliStateBackup?.auth?.username;\n\n  if (cliUsername) {\n    console.log(`Logging out from ${chalk.green(cliUsername)} account...`);\n    await ExpoCLI.runExpoCliAsync('logout', [], {\n      stdio: 'ignore',\n    });\n  }\n\n  if (!options.dry) {\n    await publishAppAsync(slug, url);\n  } else {\n    console.log(`Skipped publishing because of ${chalk.gray('--dry')} flag.`);\n  }\n\n  restoreKernelFields(appJson, appJsonBackup);\n\n  console.log(`Restoring home's slug to ${chalk.green(appJsonBackup.expo.slug)}...`);\n  appJson.expo.slug = appJsonBackup.expo.slug;\n\n  if (cliUsername) {\n    console.log(`Restoring ${chalk.green(cliUsername)} session in expo-cli...`);\n    await setExpoCliStateAsync(cliStateBackup);\n  } else {\n    console.log(`Logging out from ${chalk.green(EXPO_HOME_DEV_ACCOUNT_USERNAME)} account...`);\n    await fs.remove(getExpoCliStatePath());\n  }\n\n  console.log(`Updating ${chalk.magenta('app.json')} file...`);\n  await appJsonFile.writeAsync(appJson);\n\n  await updateDevHomeConfigAsync(url);\n\n  console.log(\n    chalk.yellow(\n      `Finished publishing. Remember to commit changes of ${chalk.magenta(\n        'home/app.json'\n      )} and ${chalk.magenta('dev-home-config.json')}.`\n    )\n  );\n}\n\nexport default (program: Command) => {\n  program\n    .command('publish-dev-home')\n    .alias('pdh')\n    .description(\n      `Automatically logs in your expo-cli to ${chalk.magenta(\n        EXPO_HOME_DEV_ACCOUNT_USERNAME!\n      )} account, publishes home app for development and logs back to your account.`\n    )\n    .option(\n      '-d, --dry',\n      'Whether to skip `expo publish` command. Despite this, some files might be changed after running this script.',\n      false\n    )\n    .asyncAction(action);\n};\n"]}