{"version":3,"file":"PublishApp.js","sourceRoot":"","sources":["../../src/commands/PublishApp.ts"],"names":[],"mappings":";;;;;AAAA,gDAAwB;AACxB,kDAA0B;AAC1B,wDAA0B;AAC1B,oDAA4B;AAE5B,oEAA2C;AAC3C,mCAAsD;AAEtD,gDAA4C;AAC5C,wDAA8D;AAC9D,wDAAgC;AAChC,gEAAuC;AAQvC,MAAM,QAAQ,GAAG,wBAAU,EAAE,CAAC;AAE9B,KAAK,UAAU,yBAAyB;IACtC,MAAM,oBAAoB,GAAG,MAAM,0CAAwB,CAAC,KAAK,CAAC,CAAC;IACnE,MAAM,wBAAwB,GAAG,MAAM,0CAAwB,CAAC,SAAS,CAAC,CAAC;IAE3E,IAAI,CAAC,oBAAoB,IAAI,CAAC,wBAAwB,EAAE;QACtD,MAAM,IAAI,KAAK,CACb,mDAAmD,eAAK,CAAC,GAAG,CAAC,cAAc,CAAC,UAAU,CACvF,CAAC;KACH;IACD,OAAO,gBAAM,CAAC,EAAE,CAAC,oBAAoB,EAAE,wBAAwB,CAAC;QAC9D,CAAC,CAAC,oBAAoB;QACtB,CAAC,CAAC,wBAAwB,CAAC;AAC/B,CAAC;AAED,SAAS,iBAAiB;IACxB,MAAM,YAAY,GAAG,kBAAY,CAAC,gBAAgB,EAAE,CAAC;IACrD,MAAM,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,cAAI,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,mBAAmB,CAAC,CAAC;IAC9E,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,CAAC;AACtC,CAAC;AAED,KAAK,UAAU,oBAAoB;IACjC,MAAM,EAAE,YAAY,EAAE,UAAU,EAAE,GAAG,iBAAiB,EAAE,CAAC;IACzD,MAAM,kBAAE,CAAC,IAAI,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;AAC1C,CAAC;AAED,KAAK,UAAU,qBAAqB;IAClC,MAAM,EAAE,YAAY,EAAE,UAAU,EAAE,GAAG,iBAAiB,EAAE,CAAC;IACzD,MAAM,kBAAE,CAAC,IAAI,CAAC,UAAU,EAAE,YAAY,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;AAC/D,CAAC;AAED,KAAK,UAAU,mBAAmB,CAAC,IAAY;IAC7C,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,kBAAQ,CAAC,MAAM,CAAuB;QAC/D;YACE,IAAI,EAAE,OAAO;YACb,IAAI,EAAE,UAAU;YAChB,OAAO,EAAE,yBAAyB,eAAK,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG;SACvD;KACF,CAAC,CAAC;IACH,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,KAAK,UAAU,oBAAoB,CAAC,OAAsB;IACxD,MAAM,WAAW,GAAG,cAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;IACrD,MAAM,QAAQ,GAAG,MAAM,mBAAmB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAEzD,OAAO,CAAC,GAAG,CAAC,iBAAiB,eAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7D,MAAM,iBAAW,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,QAAQ,EAAE,OAAO,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;IAEhF,MAAM,OAAO,GAAG,IAAI,mBAAQ,CAAC,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;IACjE,MAAM,aAAa,GAAG,CAAC,MAAM,OAAO,CAAC,QAAQ,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAW,CAAC;IAElF,IAAI,aAAa,KAAK,OAAO,CAAC,UAAU,EAAE;QACxC,OAAO,CAAC,GAAG,CACT,SAAS,eAAK,CAAC,MAAM,CAAC,iBAAiB,CAAC,eAAe,eAAK,CAAC,IAAI,CAC/D,aAAa,CACd,iBAAiB,eAAK,CAAC,IAAI,CAAC,OAAO,CAAC,UAAW,CAAC,KAAK,CACvD,CAAC;QACF,MAAM,OAAO,CAAC,QAAQ,CAAC,iBAAiB,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;KAC/D;IAED,OAAO,CAAC,GAAG,CAAC,cAAc,eAAK,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,eAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAEhG,IAAI;QACF,MAAM,qBAAU,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,EAAE;YACpC,GAAG,EAAE,WAAW;YAChB,KAAK,EAAE,SAAS;YAChB,GAAG,EAAE;gBACH,GAAG,OAAO,CAAC,GAAG;gBACd,cAAc,EAAE,GAAG;aACpB;SACF,CAAC,CAAC;KACJ;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,KAAK,CAAC;KACb;YAAS;QACR,IAAI,aAAa,KAAK,OAAO,CAAC,UAAU,EAAE;YACxC,OAAO,CAAC,GAAG,CACT,aAAa,eAAK,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,eAAK,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAClF,CAAC;YACF,MAAM,OAAO,CAAC,QAAQ,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC;SAC1D;KACF;AACH,CAAC;AAED,KAAK,UAAU,MAAM,CAAC,OAAsB;IAC1C,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;KAC/C;IAED,MAAM,WAAW,GAAG,CAAC,MAAM,kBAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAC/D,kBAAE,CAAC,SAAS,CAAC,cAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,WAAW,EAAE,CACtD,CAAC;IAEF,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACtC,MAAM,IAAI,KAAK,CACb,oBAAoB,eAAK,CAAC,IAAI,CAC5B,OAAO,CAAC,GAAG,CACZ,kCAAkC,WAAW;aAC3C,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,eAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;aAC5C,IAAI,CAAC,IAAI,CAAC,EAAE,CAChB,CAAC;KACH;IAED,MAAM,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,CAAC,MAAM,yBAAyB,EAAE,CAAC,CAAC;IAE7E,IAAI,CAAC,UAAU,EAAE;QACf,MAAM,IAAI,KAAK,CAAC,2EAA2E,CAAC,CAAC;KAC9F;IACD,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;QACvB,OAAO,CAAC,GAAG,CAAC,4CAA4C,eAAK,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;KACnF;IAED,MAAM,WAAW,GAAG,MAAM,iBAAW,CAAC,mBAAmB,EAAE,CAAC;IAE5D,IAAI,WAAW,EAAE;QACf,OAAO,CAAC,GAAG,CACT,iCAAiC,eAAK,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,eAAK,CAAC,IAAI,CACjF,UAAU,CACX,sCAAsC,CACxC,CAAC;QACF,MAAM,oBAAoB,EAAE,CAAC;KAC9B;IAED,IAAI;QACF,MAAM,oBAAoB,CAAC,EAAE,GAAG,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;KACxD;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,KAAK,CAAC;KACb;YAAS;QACR,IAAI,WAAW,EAAE;YACf,OAAO,CAAC,GAAG,CACT,aAAa,eAAK,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,eAAe,eAAK,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CACzF,CAAC;YACF,MAAM,qBAAqB,EAAE,CAAC;SAC/B;aAAM;YACL,OAAO,CAAC,GAAG,CAAC,oBAAoB,eAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACxE,MAAM,iBAAW,CAAC,WAAW,EAAE,CAAC;SACjC;KACF;AACH,CAAC;AAED,kBAAe,CAAC,OAAgB,EAAE,EAAE;IAClC,OAAO;SACJ,OAAO,CAAC,aAAa,CAAC;SACtB,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC;SACtB,WAAW,CAAC,yBAAyB,eAAK,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC;SACrE,MAAM,CAAC,oBAAoB,EAAE,yCAAyC,CAAC;SACvE,MAAM,CACL,qBAAqB,EACrB,mEAAmE,CACpE;SACA,MAAM,CACL,2BAA2B,EAC3B,yFAAyF,CAC1F;SACA,WAAW,CAAC,MAAM,CAAC,CAAC;AACzB,CAAC,CAAC","sourcesContent":["import path from 'path';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport semver from 'semver';\nimport { Command } from '@expo/commander';\nimport spawnAsync from '@expo/spawn-async';\nimport { UserManager, UserSettings } from '@expo/xdl';\n\nimport { getAppsDir } from '../Directories';\nimport { getNewestSDKVersionAsync } from '../ProjectVersions';\nimport inquirer from 'inquirer';\nimport JsonFile from '@expo/json-file';\n\ntype ActionOptions = {\n  app: string;\n  user: string;\n  sdkVersion?: string;\n};\n\nconst APPS_DIR = getAppsDir();\n\nasync function getDefaultSDKVersionAsync(): Promise<string | undefined> {\n  const defaultIosSdkVersion = await getNewestSDKVersionAsync('ios');\n  const defaultAndroidSdkVersion = await getNewestSDKVersionAsync('android');\n\n  if (!defaultIosSdkVersion || !defaultAndroidSdkVersion) {\n    throw new Error(\n      `Unable to find newest SDK version. You must use ${chalk.red('--sdkVersion')} option.`\n    );\n  }\n  return semver.gt(defaultIosSdkVersion, defaultAndroidSdkVersion)\n    ? defaultIosSdkVersion\n    : defaultAndroidSdkVersion;\n}\n\nfunction getExpoStatePaths(): { originalPath: string; backupPath: string } {\n  const originalPath = UserSettings.userSettingsFile();\n  const backupPath = path.join(path.dirname(originalPath), 'state-backup.json');\n  return { originalPath, backupPath };\n}\n\nasync function backupExpoStateAsync() {\n  const { originalPath, backupPath } = getExpoStatePaths();\n  await fs.copy(originalPath, backupPath);\n}\n\nasync function restoreExpoStateAsync() {\n  const { originalPath, backupPath } = getExpoStatePaths();\n  await fs.move(backupPath, originalPath, { overwrite: true });\n}\n\nasync function askForPasswordAsync(user: string): Promise<string> {\n  const { password } = await inquirer.prompt<{ password: string }>([\n    {\n      type: 'input',\n      name: 'password',\n      message: `Provide a password to ${chalk.green(user)}:`,\n    },\n  ]);\n  return password;\n}\n\nasync function loginAndPublishAsync(options: ActionOptions) {\n  const appRootPath = path.join(APPS_DIR, options.app);\n  const password = await askForPasswordAsync(options.user);\n\n  console.log(`Logging in as ${chalk.green(options.user)}...`);\n  await UserManager.loginAsync('user-pass', { username: options.user, password });\n\n  const appJson = new JsonFile(path.join(appRootPath, 'app.json'));\n  const appSdkVersion = (await appJson.getAsync('expo.sdkVersion', null)) as string;\n\n  if (appSdkVersion !== options.sdkVersion) {\n    console.log(\n      `App's ${chalk.yellow('expo.sdkVersion')} was set to ${chalk.blue(\n        appSdkVersion\n      )}, changing to ${chalk.blue(options.sdkVersion!)}...`\n    );\n    await appJson.setAsync('expo.sdkVersion', options.sdkVersion);\n  }\n\n  console.log(`Publishing ${chalk.cyan(options.app)} to ${chalk.green(options.user)} account...`);\n\n  try {\n    await spawnAsync('expo', ['publish'], {\n      cwd: appRootPath,\n      stdio: 'inherit',\n      env: {\n        ...process.env,\n        EXPO_NO_DOCTOR: '1', // Needed when new SDK schema is not yet on production.\n      },\n    });\n  } catch (error) {\n    throw error;\n  } finally {\n    if (appSdkVersion !== options.sdkVersion) {\n      console.log(\n        `Reverting ${chalk.yellow('expo.sdkVersion')} to ${chalk.blue(appSdkVersion)}...`\n      );\n      await appJson.setAsync('expo.sdkVersion', appSdkVersion);\n    }\n  }\n}\n\nasync function action(options: ActionOptions) {\n  if (!options.app) {\n    throw new Error('Run with `--app <string>`.');\n  }\n\n  const allowedApps = (await fs.readdir(APPS_DIR)).filter((item) =>\n    fs.lstatSync(path.join(APPS_DIR, item)).isDirectory()\n  );\n\n  if (!allowedApps.includes(options.app)) {\n    throw new Error(\n      `App not found at ${chalk.cyan(\n        options.app\n      )} directory. Allowed app names: ${allowedApps\n        .map((appDirname) => chalk.green(appDirname))\n        .join(', ')}`\n    );\n  }\n\n  const sdkVersion = options.sdkVersion || (await getDefaultSDKVersionAsync());\n\n  if (!sdkVersion) {\n    throw new Error('Next SDK version not found. Try to run with `--sdkVersion <SDK version>`.');\n  }\n  if (!options.sdkVersion) {\n    console.log(`SDK version not provided - defaulting to ${chalk.cyan(sdkVersion)}`);\n  }\n\n  const initialUser = await UserManager.getCurrentUserAsync();\n\n  if (initialUser) {\n    console.log(\n      `You're currently logged in as ${chalk.green(initialUser.username)} in ${chalk.cyan(\n        'expo-cli'\n      )} - backing up your user's session...`\n    );\n    await backupExpoStateAsync();\n  }\n\n  try {\n    await loginAndPublishAsync({ ...options, sdkVersion });\n  } catch (error) {\n    throw error;\n  } finally {\n    if (initialUser) {\n      console.log(\n        `Restoring ${chalk.green(initialUser.username)} session in ${chalk.cyan('expo-cli')}...`\n      );\n      await restoreExpoStateAsync();\n    } else {\n      console.log(`Logging out from ${chalk.green(options.user)} account...`);\n      await UserManager.logoutAsync();\n    }\n  }\n}\n\nexport default (program: Command) => {\n  program\n    .command('publish-app')\n    .alias('pub-app', 'pa')\n    .description(`Publishes an app from ${chalk.magenta('apps')} folder.`)\n    .option('-a, --app <string>', 'Specifies a name of the app to publish.')\n    .option(\n      '-u, --user <string>',\n      'Specifies a username of Expo account on which to publish the app.'\n    )\n    .option(\n      '-s, --sdkVersion [string]',\n      'SDK version the published app should use. Defaults to the newest available SDK version.'\n    )\n    .asyncAction(action);\n};\n"]}