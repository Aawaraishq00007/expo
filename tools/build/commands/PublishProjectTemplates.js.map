{"version":3,"file":"PublishProjectTemplates.js","sourceRoot":"","sources":["../../src/commands/PublishProjectTemplates.ts"],"names":[],"mappings":"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","sourcesContent":["import JsonFile from '@expo/json-file';\nimport spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport inquirer from 'inquirer';\nimport path from 'path';\nimport semver from 'semver';\n\nimport { getAvailableProjectTemplatesAsync } from '../ProjectTemplates';\nimport { Directories } from '../expotools';\n\nconst EXPO_DIR = Directories.getExpoRepositoryRootDir();\n\nasync function shouldAssignLatestTagAsync(\n  templateName: string,\n  templateVersion: string\n): Promise<boolean> {\n  const { assignLatestTag } = await inquirer.prompt<{ assignLatestTag: boolean }>([\n    {\n      type: 'confirm',\n      name: 'assignLatestTag',\n      message: `Do you want to assign ${chalk.blue('latest')} tag to ${chalk.green(\n        templateName\n      )}@${chalk.red(templateVersion)}?`,\n      default: true,\n    },\n  ]);\n  return assignLatestTag;\n}\n\nasync function action(options) {\n  if (!options.sdkVersion) {\n    const { version: expoSdkVersion } = await JsonFile.readAsync<{ version: string }>(\n      path.join(EXPO_DIR, 'packages/expo/package.json')\n    );\n    const { sdkVersion } = await inquirer.prompt<{ sdkVersion: string }>([\n      {\n        type: 'input',\n        name: 'sdkVersion',\n        message:\n          \"What is the Expo SDK version the project templates you're going to publish are compatible with?\",\n        default: `${semver.major(expoSdkVersion)}.0.0`,\n        validate(value) {\n          if (!semver.valid(value)) {\n            return `${value} is not a valid version.`;\n          }\n          return true;\n        },\n      },\n    ]);\n    options.sdkVersion = sdkVersion;\n  }\n\n  const availableProjectTemplates = await getAvailableProjectTemplatesAsync();\n  const projectTemplatesToPublish = options.project\n    ? availableProjectTemplates.filter(({ name }) => name.includes(options.project))\n    : availableProjectTemplates;\n\n  if (projectTemplatesToPublish.length === 0) {\n    console.log(\n      chalk.yellow('No project templates to publish. Make sure --project flag is correct.')\n    );\n    return;\n  }\n\n  console.log('\\nFollowing project templates will be published:');\n  console.log(\n    projectTemplatesToPublish.map(({ name }) => chalk.green(name)).join(chalk.grey(', ')),\n    '\\n'\n  );\n\n  for (const template of projectTemplatesToPublish) {\n    const { newVersion } = await inquirer.prompt<{ newVersion: string }>([\n      {\n        type: 'input',\n        name: 'newVersion',\n        message: `What is the new version for ${chalk.green(template.name)} package?`,\n        default: semver.lt(template.version, options.sdkVersion)\n          ? options.sdkVersion\n          : semver.inc(template.version, 'patch'),\n        validate(value) {\n          if (!semver.valid(value)) {\n            return `${value} is not a valid version.`;\n          }\n          if (semver.lt(value, template.version)) {\n            return `${value} shouldn't be lower than the current version (${template.version})`;\n          }\n          return true;\n        },\n      },\n    ]);\n\n    // Obtain the tag for the template.\n    const { tag } = await inquirer.prompt<{ tag: string }>([\n      {\n        type: 'input',\n        name: 'tag',\n        message: `How to tag ${chalk.green(template.name)}@${chalk.red(newVersion)}?`,\n        default: semver.prerelease(newVersion) ? 'next' : `sdk-${semver.major(options.sdkVersion)}`,\n      },\n    ]);\n\n    // Update package version in `package.json`\n    await JsonFile.setAsync(path.join(template.path, 'package.json'), 'version', newVersion);\n\n    const appJsonPath = path.join(template.path, 'app.json');\n    if (\n      (await fs.pathExists(appJsonPath)) &&\n      (await JsonFile.getAsync(appJsonPath, 'expo.sdkVersion', null))\n    ) {\n      // Make sure SDK version in `app.json` is correct\n      console.log(\n        `Setting ${chalk.magenta('expo.sdkVersion')} to ${chalk.green(\n          options.sdkVersion\n        )} in template's app.json...`\n      );\n\n      await JsonFile.setAsync(\n        path.join(template.path, 'app.json'),\n        'expo.sdkVersion',\n        options.sdkVersion\n      );\n    }\n\n    console.log(`Publishing ${chalk.green(template.name)}@${chalk.red(newVersion)}...`);\n\n    const moreArgs: string[] = [];\n\n    if (tag) {\n      // Assign custom tag in the publish command, so we don't accidentally publish as latest.\n      moreArgs.push('--tag', tag);\n    }\n\n    // Publish to NPM registry\n    options.dry ||\n      (await spawnAsync('npm', ['publish', '--access', 'public', ...moreArgs], {\n        stdio: 'inherit',\n        cwd: template.path,\n      }));\n\n    if (tag && (await shouldAssignLatestTagAsync(template.name, newVersion))) {\n      console.log(\n        `Assigning ${chalk.blue('latest')} tag to ${chalk.green(template.name)}@${chalk.red(\n          newVersion\n        )}...`\n      );\n\n      // Add the latest tag to the new version\n      options.dry ||\n        (await spawnAsync('npm', ['dist-tag', 'add', `${template.name}@${newVersion}`, 'latest'], {\n          stdio: 'inherit',\n          cwd: template.path,\n        }));\n    }\n    console.log();\n  }\n}\n\nexport default (program) => {\n  program\n    .command('publish-project-templates')\n    .alias('publish-templates', 'ppt')\n    .option(\n      '-s, --sdkVersion [string]',\n      'Expo SDK version that the templates are compatible with. (optional)'\n    )\n    .option('-p, --project [string]', 'Name of the template project to publish. (optional)')\n    .option('-d, --dry', 'Run the script in the dry mode, that is without publishing.')\n    .description('Publishes project templates under `templates` directory.')\n    .asyncAction(action);\n};\n"]}