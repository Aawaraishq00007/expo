{"version":3,"file":"AndroidNativeUnitTests.js","sourceRoot":"","sources":["../../src/commands/AndroidNativeUnitTests.ts"],"names":[],"mappings":"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","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\n\nimport { filterAsync } from '../Utils';\nimport * as Directories from '../Directories';\nimport * as Packages from '../Packages';\n\nconst ANDROID_DIR = Directories.getAndroidDir();\n\nconst excludedInTests = [\n  'expo-module-template',\n  'expo-notifications',\n  'expo-in-app-purchases',\n  'expo-splash-screen',\n  'unimodules-test-core',\n];\n\ntype TestType = 'local' | 'instrumented';\n\nexport async function androidNativeUnitTests({ type }: { type: TestType }) {\n  if (!type) {\n    throw new Error(\n      'Must specify which type of unit test to run with `--type local` or `--type instrumented`.'\n    );\n  }\n  if (type !== 'local' && type !== 'instrumented') {\n    throw new Error('Invalid type specified. Must use `--type local` or `--type instrumented`.');\n  }\n\n  const packages = await Packages.getListOfPackagesAsync();\n\n  function consoleErrorOutput(\n    output: string,\n    label: string,\n    colorifyLine: (string) => string\n  ): void {\n    const lines = output.trim().split(/\\r\\n?|\\n/g);\n    console.error(lines.map((line) => `${chalk.gray(label)} ${colorifyLine(line)}`).join('\\n'));\n  }\n\n  const androidPackages = await filterAsync(packages, async (pkg) => {\n    const pkgSlug = pkg.packageSlug;\n\n    if (type === 'instrumented') {\n      return (\n        pkg.isSupportedOnPlatform('android') &&\n        (await pkg.hasNativeInstrumentationTestsAsync('android')) &&\n        !excludedInTests.includes(pkgSlug)\n      );\n    } else {\n      return (\n        pkg.isSupportedOnPlatform('android') &&\n        (await pkg.hasNativeTestsAsync('android')) &&\n        !excludedInTests.includes(pkgSlug)\n      );\n    }\n  });\n\n  console.log(chalk.green('Packages to test: '));\n  androidPackages.forEach((pkg) => {\n    console.log(chalk.yellow(pkg.packageSlug));\n  });\n\n  const testCommand = type === 'instrumented' ? 'connectedAndroidTest' : 'test';\n  try {\n    await spawnAsync(\n      './gradlew',\n      androidPackages.map((pkg) => `:${pkg.packageSlug}:${testCommand}`),\n      {\n        cwd: ANDROID_DIR,\n        stdio: 'inherit',\n        env: { ...process.env },\n      }\n    );\n  } catch (error) {\n    console.error('Failed while executing android unit tests');\n    consoleErrorOutput(error.stdout, 'stdout >', chalk.reset);\n    consoleErrorOutput(error.stderr, 'stderr >', chalk.red);\n    throw error;\n  }\n  console.log(chalk.green('Finished android unit tests successfully.'));\n  return;\n}\n\nexport default (program: any) => {\n  program\n    .command('android-native-unit-tests')\n    .option('-t, --type <string>', 'Type of unit test to run: local or instrumented')\n    .description('Runs Android native unit tests for each package that provides them.')\n    .asyncAction(androidNativeUnitTests);\n};\n"]}