{"version":3,"file":"ProjectVersions.js","sourceRoot":"","sources":["../src/ProjectVersions.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs-extra';\nimport plist from 'plist';\nimport semver from 'semver';\nimport JsonFile from '@expo/json-file';\n\nimport { EXPO_DIR, ANDROID_DIR, PACKAGES_DIR } from './Constants';\n\nexport type Platform = 'ios' | 'android';\n\nexport type SDKVersionsObject = {\n  sdkVersions: string[];\n};\n\nconst BUNDLED_NATIVE_MODULES_PATH = path.join(PACKAGES_DIR, 'expo', 'bundledNativeModules.json');\n\nexport async function sdkVersionAsync(): Promise<string> {\n  const packageJson = await JsonFile.readAsync(path.join(EXPO_DIR, 'packages/expo/package.json'));\n  return packageJson.version as string;\n}\n\nexport async function iosAppVersionAsync(): Promise<string> {\n  const infoPlistPath = path.join(EXPO_DIR, 'ios', 'Exponent', 'Supporting', 'Info.plist');\n  const infoPlist = plist.parse(fs.readFileSync(infoPlistPath, 'utf8'));\n  const bundleVersion = infoPlist.CFBundleShortVersionString;\n\n  if (!bundleVersion) {\n    throw new Error(`\"CFBundleShortVersionString\" not found in plist: ${infoPlistPath}`);\n  }\n  return bundleVersion;\n}\n\nexport async function androidAppVersionAsync(): Promise<string> {\n  const buildGradlePath = path.join(ANDROID_DIR, 'app', 'build.gradle');\n  const buildGradleContent = await fs.readFile(buildGradlePath, 'utf8');\n  const match = buildGradleContent.match(/versionName ['\"]([^'\"]+?)['\"]/);\n\n  if (!match) {\n    throw new Error(\"Can't obtain `versionName` from app's build.gradle\");\n  }\n  return match[1];\n}\n\nexport async function getHomeSDKVersionAsync(): Promise<string> {\n  const homeAppJsonPath = path.join(EXPO_DIR, 'home', 'app.json');\n  const appJson = (await JsonFile.readAsync(homeAppJsonPath, { json5: true })) as any;\n\n  if (appJson?.expo?.sdkVersion) {\n    return appJson.expo.sdkVersion as string;\n  }\n  throw new Error(`Home's SDK version not found!`);\n}\n\nexport async function getSDKVersionsAsync(platform: Platform): Promise<string[]> {\n  const sdkVersionsPath = path.join(\n    EXPO_DIR,\n    platform === 'ios' ? 'ios/Exponent/Supporting' : 'android',\n    'sdkVersions.json'\n  );\n\n  if (!(await fs.pathExists(sdkVersionsPath))) {\n    throw new Error(`File at path \"${sdkVersionsPath}\" not found.`);\n  }\n  const { sdkVersions } = (await JsonFile.readAsync(sdkVersionsPath)) as SDKVersionsObject;\n  return sdkVersions;\n}\n\nexport async function getOldestSDKVersionAsync(platform: Platform): Promise<string | undefined> {\n  const sdkVersions = await getSDKVersionsAsync(platform);\n  return sdkVersions.sort(semver.compare)[0];\n}\n\nexport async function getNewestSDKVersionAsync(platform: Platform): Promise<string | undefined> {\n  const sdkVersions = await getSDKVersionsAsync(platform);\n  return sdkVersions.sort(semver.rcompare)[0];\n}\n\nexport async function getNextSDKVersionAsync(platform: Platform): Promise<string | undefined> {\n  const newestVersion = await getNewestSDKVersionAsync(platform);\n\n  if (!newestVersion) {\n    return;\n  }\n  return `${semver.major(semver.inc(newestVersion, 'major')!)}.0.0`;\n}\n\n/**\n * Returns an object with versions of bundled native modules.\n */\nexport async function getBundledVersionsAsync(): Promise<Record<string, string>> {\n  return require(BUNDLED_NATIVE_MODULES_PATH) as Record<string, string>;\n}\n\n/**\n * Updates bundled native modules versions.\n */\nexport async function updateBundledVersionsAsync(patch: Record<string, string>): Promise<void> {\n  await JsonFile.mergeAsync(BUNDLED_NATIVE_MODULES_PATH, patch);\n}\n"]}