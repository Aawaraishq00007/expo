{"version":3,"file":"Packages.js","sourceRoot":"","sources":["../src/Packages.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs-extra';\nimport glob from 'glob-promise';\n\nimport IosUnversionablePackages from './versioning/ios/unversionablePackages.json';\nimport AndroidUnversionablePackages from './versioning/android/unversionablePackages.json';\nimport * as Directories from './Directories';\nimport * as Npm from './Npm';\nimport { Podspec, readPodspecAsync } from './CocoaPods';\n\nconst ANDROID_DIR = Directories.getAndroidDir();\nconst IOS_DIR = Directories.getIosDir();\nconst PACKAGES_DIR = Directories.getPackagesDir();\n\n/**\n * Cached list of packages or `null` if they haven't been loaded yet. See `getListOfPackagesAsync`.\n */\nlet cachedPackages: Package[] | null = null;\n\n/**\n * An object representing `package.json` structure.\n */\nexport type PackageJson = {\n  name: string;\n  version: string;\n  scripts: Record<string, string>;\n  gitHead?: string;\n  [key: string]: unknown;\n};\n\n/**\n * Type of package's dependency returned by `getDependencies`.\n */\nexport type PackageDependency = {\n  name: string;\n  group: string;\n  versionRange: string;\n};\n\n/**\n * Union with possible platform names.\n */\ntype Platform = 'ios' | 'android' | 'web';\n\n/**\n * Type representing `unimodule.json` structure.\n */\nexport type UnimoduleJson = {\n  name: string;\n  platforms: Platform[];\n  ios?: {\n    subdirectory?: string;\n    podName?: string;\n  };\n  android?: {\n    subdirectory?: string;\n  };\n};\n\n/**\n * Represents a package in the monorepo.\n */\nexport class Package {\n  path: string;\n  packageJson: PackageJson;\n  unimoduleJson: UnimoduleJson;\n  packageView?: Npm.PackageViewType | null;\n\n  constructor(rootPath: string, packageJson?: PackageJson) {\n    this.path = rootPath;\n    this.packageJson = packageJson || require(path.join(rootPath, 'package.json'));\n    this.unimoduleJson = readUnimoduleJsonAtDirectory(rootPath);\n  }\n\n  get hasPlugin(): boolean {\n    return fs.pathExistsSync(path.join(this.path, 'plugin'));\n  }\n\n  get packageName(): string {\n    return this.packageJson.name;\n  }\n\n  get packageVersion(): string {\n    return this.packageJson.version;\n  }\n\n  get packageSlug(): string {\n    return (this.unimoduleJson && this.unimoduleJson.name) || this.packageName;\n  }\n\n  get scripts(): { [key: string]: string } {\n    return this.packageJson.scripts || {};\n  }\n\n  get podspecName(): string | null {\n    const iosConfig = {\n      subdirectory: 'ios',\n      ...(this.unimoduleJson?.ios ?? {}),\n    };\n\n    // 'ios.podName' is actually not used anywhere in our unimodules, but let's have the same logic as react-native-unimodules script.\n    if ('podName' in iosConfig) {\n      return iosConfig.podName as string;\n    }\n\n    // Obtain podspecName by looking for podspecs\n    const podspecPaths = glob.sync('*.podspec', {\n      cwd: path.join(this.path, iosConfig.subdirectory),\n    });\n\n    if (!podspecPaths || podspecPaths.length === 0) {\n      return null;\n    }\n    return path.basename(podspecPaths[0], '.podspec');\n  }\n\n  get iosSubdirectory(): string {\n    return this.unimoduleJson?.ios?.subdirectory ?? 'ios';\n  }\n\n  get androidSubdirectory(): string {\n    return this.unimoduleJson?.android?.subdirectory ?? 'android';\n  }\n\n  get androidPackageName(): string | null {\n    if (!this.isSupportedOnPlatform('android')) {\n      return null;\n    }\n    const buildGradle = fs.readFileSync(\n      path.join(this.path, this.androidSubdirectory, 'build.gradle'),\n      'utf8'\n    );\n    const match = buildGradle.match(/^group ?= ?'([\\w.]+)'\\n/m);\n    return match?.[1] ?? null;\n  }\n\n  get changelogPath(): string {\n    return path.join(this.path, 'CHANGELOG.md');\n  }\n\n  isUnimodule() {\n    return !!this.unimoduleJson;\n  }\n\n  isSupportedOnPlatform(platform: 'ios' | 'android'): boolean {\n    if (this.unimoduleJson) {\n      return this.unimoduleJson.platforms?.includes(platform) ?? false;\n    } else if (platform === 'android') {\n      return fs.existsSync(path.join(this.path, this.androidSubdirectory, 'build.gradle'));\n    } else if (platform === 'ios') {\n      return fs\n        .readdirSync(path.join(this.path, this.iosSubdirectory))\n        .some((path) => path.endsWith('.podspec'));\n    }\n    return false;\n  }\n\n  isIncludedInExpoClientOnPlatform(platform: 'ios' | 'android'): boolean {\n    if (platform === 'ios') {\n      // On iOS we can easily check whether the package is included in Expo client by checking if it is installed by Cocoapods.\n      const { podspecName } = this;\n      return (\n        podspecName != null &&\n        fs.pathExistsSync(path.join(IOS_DIR, 'Pods', 'Headers', 'Public', podspecName))\n      );\n    } else if (platform === 'android') {\n      // On Android we need to read expoview's build.gradle file\n      const buildGradle = fs.readFileSync(path.join(ANDROID_DIR, 'expoview/build.gradle'), 'utf8');\n      const match = buildGradle.search(\n        new RegExp(\n          `addUnimodulesDependencies\\\\([^\\\\)]+configuration\\\\s*:\\\\s*'api'[^\\\\)]+exclude\\\\s*:\\\\s*\\\\[[^\\\\]]*'${this.packageName}'[^\\\\]]*\\\\][^\\\\)]+\\\\)`\n        )\n      );\n      // this is somewhat brittle so we do a quick-and-dirty sanity check:\n      // 'expo-in-app-purchases' should never be included so if we don't find a match\n      // for that package, something is wrong.\n      if (this.packageName === 'expo-in-app-purchases' && match === -1) {\n        throw new Error(\n          \"'isIncludedInExpoClientOnPlatform' is not behaving correctly, please check expoview/build.gradle format\"\n        );\n      }\n      return match === -1;\n    }\n    throw new Error(\n      `'isIncludedInExpoClientOnPlatform' is not supported on '${platform}' platform yet.`\n    );\n  }\n\n  isVersionableOnPlatform(platform: 'ios' | 'android'): boolean {\n    if (platform === 'ios') {\n      return this.podspecName != null && !IosUnversionablePackages.includes(this.packageName);\n    } else if (platform === 'android') {\n      return !AndroidUnversionablePackages.includes(this.packageName);\n    }\n    throw new Error(`'isVersionableOnPlatform' is not supported on '${platform}' platform yet.`);\n  }\n\n  async getPackageViewAsync(): Promise<Npm.PackageViewType | null> {\n    if (this.packageView !== undefined) {\n      return this.packageView;\n    }\n    return await Npm.getPackageViewAsync(this.packageName, this.packageVersion);\n  }\n\n  getDependencies(includeAll: boolean = false): PackageDependency[] {\n    const depsGroups = includeAll\n      ? ['dependencies', 'devDependencies', 'peerDependencies', 'unimodulePeerDependencies']\n      : ['dependencies'];\n\n    const dependencies = depsGroups.map((group) => {\n      const deps = this.packageJson[group] as Record<string, string>;\n\n      return !deps\n        ? []\n        : Object.entries(deps).map(([name, versionRange]) => {\n            return {\n              name,\n              group,\n              versionRange: versionRange as string,\n            };\n          });\n    });\n    return ([] as PackageDependency[]).concat(...dependencies);\n  }\n\n  dependsOn(packageName: string): boolean {\n    return this.getDependencies().some((dep) => dep.name === packageName);\n  }\n\n  /**\n   * Iterates through dist tags returned by npm to determine an array of tags to which given version is bound.\n   */\n  async getDistTagsAsync(version: string = this.packageVersion): Promise<string[]> {\n    const pkgView = await this.getPackageViewAsync();\n    const distTags = pkgView?.['dist-tags'] ?? {};\n    return Object.keys(distTags).filter((tag) => distTags[tag] === version);\n  }\n\n  /**\n   * Checks whether the package depends on a local pod with given name.\n   */\n  async hasLocalPodDependencyAsync(podName?: string | null): Promise<boolean> {\n    if (!podName) {\n      return false;\n    }\n    const podspecPath = path.join(this.path, 'ios/Pods/Local Podspecs', `${podName}.podspec.json`);\n    return await fs.pathExists(podspecPath);\n  }\n\n  /**\n   * Checks whether package has its own changelog file.\n   */\n  async hasChangelogAsync(): Promise<boolean> {\n    return fs.pathExists(this.changelogPath);\n  }\n\n  /**\n   * Checks whether package has any native code (iOS, Android, C++).\n   */\n  async isNativeModuleAsync(): Promise<boolean> {\n    const dirs = ['ios', 'android', 'cpp'].map((dir) => path.join(this.path, dir));\n    for (const dir of dirs) {\n      if (await fs.pathExists(dir)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks whether package contains some native tests for Android.\n   */\n  async hasNativeTestsAsync(platform: Platform): Promise<boolean> {\n    if (platform === 'android') {\n      return fs.pathExists(path.join(this.path, this.androidSubdirectory, 'src/test'));\n    }\n    // TODO(tsapeta): Support ios and web.\n    throw new Error(`\"hasNativeTestsAsync\" for platform \"${platform}\" is not implemented yet.`);\n  }\n\n  /**\n   * Checks whether package contains native instrumentation tests for Android.\n   */\n  async hasNativeInstrumentationTestsAsync(platform: Platform): Promise<boolean> {\n    if (platform === 'android') {\n      return fs.pathExists(path.join(this.path, this.androidSubdirectory, 'src/androidTest'));\n    }\n    return false;\n  }\n\n  /**\n   * Reads the podspec and returns it in JSON format\n   * or `null` if the package doesn't have a podspec.\n   */\n  async getPodspecAsync(): Promise<Podspec | null> {\n    const podspecName = this.podspecName;\n    const podspecPath = path.join(this.path, this.iosSubdirectory, `${podspecName}.podspec`);\n\n    if (!podspecName) {\n      return null;\n    }\n    return await readPodspecAsync(podspecPath);\n  }\n}\n\n/**\n * Resolves to a Package instance if the package with given name exists in the repository.\n */\nexport function getPackageByName(packageName: string): Package | null {\n  const packageJsonPath = pathToLocalPackageJson(packageName);\n  try {\n    const packageJson = require(packageJsonPath);\n    return new Package(path.dirname(packageJsonPath), packageJson);\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Resolves to an array of Package instances that represent Expo packages inside given directory.\n */\nexport async function getListOfPackagesAsync(): Promise<Package[]> {\n  if (!cachedPackages) {\n    const paths = await glob('**/package.json', {\n      cwd: PACKAGES_DIR,\n      ignore: ['**/example/**', '**/expo-development-client/bundle/**', '**/node_modules/**'],\n    });\n    cachedPackages = paths.map((packageJsonPath) => {\n      const fullPackageJsonPath = path.join(PACKAGES_DIR, packageJsonPath);\n      const packagePath = path.dirname(fullPackageJsonPath);\n      const packageJson = require(fullPackageJsonPath);\n\n      return new Package(packagePath, packageJson);\n    });\n  }\n  return cachedPackages;\n}\n\nfunction readUnimoduleJsonAtDirectory(dir: string) {\n  const unimoduleJsonPath = path.join(dir, 'unimodule.json');\n  try {\n    return require(unimoduleJsonPath);\n  } catch (error) {\n    return null;\n  }\n}\n\nfunction pathToLocalPackageJson(packageName: string): string {\n  return path.join(PACKAGES_DIR, packageName, 'package.json');\n}\n"]}