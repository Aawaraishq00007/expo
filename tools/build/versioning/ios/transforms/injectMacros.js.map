{"version":3,"file":"injectMacros.js","sourceRoot":"","sources":["../../../../src/versioning/ios/transforms/injectMacros.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAI1B,SAAgB,YAAY,CAAC,WAAmB;IAC9C,OAAO;QACL,SAAS,CAAC,QAAgB;YACxB,OAAO,CAAC,GAAG,CAAC,uBAAuB,eAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACjE,CAAC;QACD,UAAU,EAAE;YACV;gBACE,4DAA4D;gBAC5D,KAAK,EAAE,cAAc;gBACrB,OAAO,EAAE,SAAS;gBAClB,IAAI,EAAE,eAAe,WAAW,mDAAmD,WAAW,kEAAkE,WAAW,uCAAuC;aACnN;YACD;gBACE,qEAAqE;gBACrE,gDAAgD;gBAChD,KAAK,EAAE,aAAa;gBACpB,OAAO,EAAE,oEAAoE;gBAC7E,IAAI,EAAE,MAAM,WAAW,0BAA0B;aAClD;YACD;gBACE,4DAA4D;gBAC5D,gDAAgD;gBAChD,KAAK,EAAE,oBAAoB;gBAC3B,OAAO,EAAE,yCAAyC;gBAClD,IAAI,EAAE,UAAU,WAAW,gCAAgC;aAC5D;YACD;gBACE,oFAAoF;gBACpF,KAAK,EAAE,iBAAiB;gBACxB,OAAO,EAAE,kDAAkD;gBAC3D,IAAI,EAAE,oBAAoB,WAAW,wCAAwC;aAC9E;YACD;gBACE,iFAAiF;gBACjF,KAAK,EAAE,iBAAiB;gBACxB,OAAO,EAAE,wCAAwC;gBACjD,IAAI,EAAE,IAAI;aACX;SACF;KACF,CAAC;AACJ,CAAC;AAxCD,oCAwCC","sourcesContent":["import chalk from 'chalk';\n\nimport { TransformPipeline } from '.';\n\nexport function injectMacros(versionName: string): TransformPipeline {\n  return {\n    logHeader(filePath: string) {\n      console.log(`Injecting macros at ${chalk.magenta(filePath)}:`);\n    },\n    transforms: [\n      {\n        // add a macro ABIXX_0_0EX_REMOVE_VERSION(str) to RCTDefines\n        paths: 'RCTDefines.h',\n        replace: /(.|\\s)$/,\n        with: `$1\\n#define ${versionName}EX_REMOVE_VERSION(string) (([string hasPrefix:@\"${versionName}\"]) ? [string stringByReplacingCharactersInRange:(NSRange){0,@\"${versionName}\".length} withString:@\"\"] : string)\\n`,\n      },\n      {\n        // use the macro on the return value of `RCTBridgeModuleNameForClass`\n        // to pass unversioned native module names to JS\n        paths: 'RCTBridge.m',\n        replace: /(return ABI\\d+_\\d+_\\d+RCTDropABI\\d+_\\d+_\\d+ReactPrefixes)\\(name\\)/g,\n        with: `$1(${versionName}EX_REMOVE_VERSION(name))`,\n      },\n      {\n        // use the macro on the return value of `moduleNameForClass`\n        // to pass unversioned native module names to JS\n        paths: 'RCTComponentData.m',\n        replace: /(if \\(\\[name hasPrefix:@\"RK\"\\]\\) \\{\\n)/g,\n        with: `name = ${versionName}EX_REMOVE_VERSION(name);\\n  $1`,\n      },\n      {\n        // injects macro into `enqueueJSCall:method:args:completion:` method of RCTCxxBridge\n        paths: 'RCTCxxBridge.mm',\n        replace: /callJSFunction(\\s*?\\(\\s*?)\\[module UTF8String\\],/,\n        with: `callJSFunction$1[${versionName}EX_REMOVE_VERSION(module) UTF8String],`,\n      },\n      {\n        // now that this code is versioned, remove meaningless EX_UNVERSIONED declaration\n        paths: 'EXUnversioned.h',\n        replace: /(#define symbol[.\\S\\s]+?(?=\\n\\n)\\n\\n)/g,\n        with: '\\n',\n      },\n    ],\n  };\n}\n"]}