{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/versioning/ios/transforms/index.ts"],"names":[],"mappings":";;;;;;AAAA,gDAAwB;AACxB,kDAA0B;AAE1B,kDAA0D;AAmBnD,KAAK,UAAU,yBAAyB,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,KAAK,EAAmB;IAC9F,IAAI,MAAM,GAAG,KAAK,CAAC;IACnB,MAAM,OAAO,GAA4D,EAAE,CAAC;IAE5E,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;QACvC,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;KAC5F;IAED,QAAQ,CAAC,UAAU;SAChB,MAAM,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,yBAAyB,CAAC,UAAU,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;SAC7E,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;QACrB,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,GAAG,IAAI,EAAE,EAAE;YAC5D,MAAM,EAAE,WAAW,EAAE,GAAI,MAA6C,CAAC;YACvE,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAEvF,OAAO,CAAC,IAAI,CAAC;gBACX,KAAK,EAAE,KAAK;gBACZ,IAAI,EAAE,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM;gBACrC,YAAY,EAAE,MAAM;aACrB,CAAC,CAAC;YAEH,OAAO,MAAM,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEL,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;QACtB,IAAI,QAAQ,CAAC,SAAS,EAAE;YACtB,QAAQ,CAAC,SAAS,CAAC,cAAI,CAAC,QAAQ,CAAC,gCAAoB,EAAE,UAAU,CAAC,CAAC,CAAC;SACrE;QAED,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE;YAC3B,OAAO,CAAC,GAAG,CACT,GAAG,eAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,EACpC,eAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EACd,eAAK,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CACnC,CAAC;YACF,OAAO,CAAC,GAAG,CACT,GAAG,eAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,EACpC,eAAK,CAAC,KAAK,CAAC,GAAG,CAAC,EAChB,eAAK,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,CAC5C,CAAC;SACH;QACD,OAAO,CAAC,GAAG,EAAE,CAAC;KACf;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AA9CD,8DA8CC;AAED,SAAS,yBAAyB,CAAC,QAAgB,EAAE,cAAkC;IACrF,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;QACtC,OAAO,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;KAC1C;IACD,IAAI,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;QACjC,OAAO,cAAc,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;KACjF;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import path from 'path';\nimport chalk from 'chalk';\n\nimport { VERSIONED_RN_IOS_DIR } from '../../../Constants';\n\nexport type TransformConfig = {\n  pipeline: TransformPipeline;\n  targetPath: string;\n  input: string;\n};\n\nexport type TransformPattern = {\n  paths?: string | string[];\n  replace: RegExp | string;\n  with: string;\n};\n\nexport type TransformPipeline = {\n  logHeader?: (filePath: string) => void;\n  transforms: TransformPattern[];\n};\n\nexport async function runTransformPipelineAsync({ pipeline, targetPath, input }: TransformConfig) {\n  let output = input;\n  const matches: { value: string; line: number; replacedWith: string }[] = [];\n\n  if (!Array.isArray(pipeline.transforms)) {\n    throw new Error(\"Pipeline's transformations must be an array of transformation patterns.\");\n  }\n\n  pipeline.transforms\n    .filter((transform) => pathMatchesTransformPaths(targetPath, transform.paths))\n    .forEach((transform) => {\n      output = output.replace(transform.replace, (match, ...args) => {\n        const { leftContext } = (RegExp as unknown) as { leftContext: string };\n        const result = transform.with.replace(/\\$[1-9]/g, (m) => args[parseInt(m[1], 10) - 1]);\n\n        matches.push({\n          value: match,\n          line: leftContext.split(/\\n/g).length,\n          replacedWith: result,\n        });\n\n        return result;\n      });\n    });\n\n  if (matches.length > 0) {\n    if (pipeline.logHeader) {\n      pipeline.logHeader(path.relative(VERSIONED_RN_IOS_DIR, targetPath));\n    }\n\n    for (const match of matches) {\n      console.log(\n        `${chalk.gray(String(match.line))}:`,\n        chalk.red('-'),\n        chalk.red(match.value.trimRight())\n      );\n      console.log(\n        `${chalk.gray(String(match.line))}:`,\n        chalk.green('+'),\n        chalk.green(match.replacedWith.trimRight())\n      );\n    }\n    console.log();\n  }\n\n  return output;\n}\n\nfunction pathMatchesTransformPaths(filePath: string, transformPaths?: string | string[]): boolean {\n  if (typeof transformPaths === 'string') {\n    return filePath.includes(transformPaths);\n  }\n  if (Array.isArray(transformPaths)) {\n    return transformPaths.some((transformPath) => filePath.includes(transformPath));\n  }\n  return true;\n}\n"]}