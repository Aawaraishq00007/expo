{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/versioning/ios/index.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs-extra';\nimport chalk from 'chalk';\nimport glob from 'glob-promise';\nimport inquirer from 'inquirer';\nimport { TaskQueue } from 'cwait';\nimport spawnAsync from '@expo/spawn-async';\nimport semver from 'semver';\n\nimport { runTransformPipelineAsync } from './transforms';\nimport { injectMacros } from './transforms/injectMacros';\nimport { postTransforms } from './transforms/postTransforms';\nimport { kernelFilesTransforms } from './transforms/kernelFilesTransforms';\nimport { podspecTransforms } from './transforms/podspecTransforms';\n\nimport { getListOfPackagesAsync } from '../../Packages';\nimport { EXPO_DIR, IOS_DIR, VERSIONED_RN_IOS_DIR } from '../../Constants';\n\nexport { versionVendoredModulesAsync } from './versionVendoredModules';\n\nconst UNVERSIONED_PLACEHOLDER = '__UNVERSIONED__';\nconst RELATIVE_RN_PATH = './react-native-lab/react-native';\n\nconst RELATIVE_UNIVERSAL_MODULES_PATH = './packages';\nconst EXTERNAL_REACT_ABI_DEPENDENCIES = [\n  'Amplitude',\n  'Analytics',\n  'AppAuth',\n  'FBAudienceNetwork',\n  'FBSDKCoreKit',\n  'FBSDKLoginKit',\n  'GoogleSignIn',\n  'GoogleMaps',\n  'Google-Maps-iOS-Utils',\n  'lottie-ios',\n  'JKBigInteger2',\n  'Branch',\n  'Google-Mobile-Ads-SDK',\n  'Folly',\n];\n\n/**\n *  Transform and rename the given react native source code files.\n *  @param filenames list of files to transform\n *  @param versionPrefix A version-specific prefix to apply to all symbols in the code, e.g.\n *    RCTSomeClass becomes {versionPrefix}RCTSomeClass\n *  @param versionedPodNames mapping from unversioned cocoapods names to versioned cocoapods names,\n *    e.g. React -> ReactABI99_0_0\n */\nasync function namespaceReactNativeFilesAsync(filenames, versionPrefix, versionedPodNames) {\n  const reactPodName = versionedPodNames.React;\n  const transformRules = _getReactNativeTransformRules(versionPrefix, reactPodName);\n  const taskQueue = new TaskQueue(Promise, 4); // Transform up to 4 files simultaneously.\n  const transformRulesCache = {};\n\n  const transformSingleFile = taskQueue.wrap(async (filename) => {\n    if (_isDirectory(filename)) {\n      return;\n    }\n    // protect contents of EX_UNVERSIONED macro\n    let unversionedCaptures: string[] = [];\n    await _transformFileContentsAsync(filename, (fileString) => {\n      let pattern = /EX_UNVERSIONED\\((.*?)\\)/g;\n      let match = pattern.exec(fileString);\n      while (match != null) {\n        unversionedCaptures.push(match[1]);\n        match = pattern.exec(fileString);\n      }\n      if (unversionedCaptures.length) {\n        return fileString.replace(pattern, UNVERSIONED_PLACEHOLDER);\n      }\n      return null;\n    });\n\n    // rename file\n    const dirname = path.dirname(filename);\n    const basename = path.basename(filename);\n    const targetPath = path.join(dirname, `${versionPrefix}${basename}`);\n\n    // filter transformRules to patterns which apply to this dirname\n    const filteredTransformRules =\n      transformRulesCache[dirname] || _getTransformRulesForDirname(transformRules, dirname);\n    transformRulesCache[dirname] = transformRules;\n\n    // Perform sed find & replace.\n    for (const rule of filteredTransformRules) {\n      await spawnAsync('sed', [rule.flags || '-i', '--', rule.pattern, filename]);\n    }\n\n    // Rename file to be prefixed.\n    await fs.move(filename, targetPath);\n\n    // perform transforms that sed can't express\n    await _transformFileContentsAsync(targetPath, async (fileString) => {\n      // rename misc imports, e.g. Layout.h\n      fileString = fileString.replace(\n        /#(include|import)\\s+\"((?:[^\"\\/]+\\/)?)([^\"]+\\.h)\"/g,\n        (match, p1, p2, p3) => {\n          return p3.startsWith(versionPrefix) ? match : `#${p1} \"${p2}${versionPrefix}${p3}\"`;\n        }\n      );\n\n      // restore EX_UNVERSIONED contents\n      if (unversionedCaptures) {\n        let index = 0;\n        do {\n          fileString = fileString.replace(UNVERSIONED_PLACEHOLDER, unversionedCaptures[index]);\n          index++;\n        } while (fileString.indexOf(UNVERSIONED_PLACEHOLDER) !== -1);\n      }\n\n      const injectedMacrosOutput = await runTransformPipelineAsync({\n        pipeline: injectMacros(versionPrefix),\n        input: fileString,\n        targetPath,\n      });\n\n      return await runTransformPipelineAsync({\n        pipeline: postTransforms(versionPrefix),\n        input: injectedMacrosOutput,\n        targetPath,\n      });\n    });\n    return; // process `filename`\n  });\n\n  await Promise.all(filenames.map(transformSingleFile));\n\n  return;\n}\n\n/**\n *  Transform and rename all code files we care about under `rnPath`\n */\nasync function transformReactNativeAsync(rnPath, versionName, versionedPodNames) {\n  let filenameQueries = [`${rnPath}/**/*.[hmSc]`, `${rnPath}/**/*.mm`, `${rnPath}/**/*.cpp`];\n  let filenames: string[] = [];\n  await Promise.all(\n    filenameQueries.map(async (query) => {\n      let queryFilenames = (await glob(query)) as string[];\n      if (queryFilenames) {\n        filenames = filenames.concat(queryFilenames);\n      }\n    })\n  );\n\n  return namespaceReactNativeFilesAsync(filenames, versionName, versionedPodNames);\n}\n\n/**\n * For all files matching the given glob query, namespace and rename them\n * with the given version number. This utility is mainly useful for backporting\n * small changes into an existing SDK. To create a new SDK version, use `addVersionAsync`\n * instead.\n * @param globQuery a string to pass to glob which matches some file paths\n * @param versionNumber Exponent SDK version, e.g. 42.0.0\n */\nexport async function versionReactNativeIOSFilesAsync(globQuery, versionNumber) {\n  let filenames = await glob(globQuery);\n  if (!filenames || !filenames.length) {\n    throw new Error(`No files matched the given pattern: ${globQuery}`);\n  }\n  let { versionName, versionedPodNames } = await getConfigsFromArguments(versionNumber);\n  console.log(`Versioning ${filenames.length} files with SDK version ${versionNumber}...`);\n  return namespaceReactNativeFilesAsync(filenames, versionName, versionedPodNames);\n}\n\nasync function generateVersionedReactNativeAsync(versionName: string): Promise<void> {\n  const versionedReactNativePath = getVersionedReactNativePath(versionName);\n\n  await fs.mkdirs(versionedReactNativePath);\n\n  // Clone react native latest version\n  console.log(`Copying files from ${chalk.magenta(RELATIVE_RN_PATH)} ...`);\n\n  await fs.copy(\n    path.join(EXPO_DIR, RELATIVE_RN_PATH, 'React'),\n    path.join(versionedReactNativePath, 'React')\n  );\n  await fs.copy(\n    path.join(EXPO_DIR, RELATIVE_RN_PATH, 'Libraries'),\n    path.join(versionedReactNativePath, 'Libraries')\n  );\n  await fs.copy(\n    path.join(EXPO_DIR, RELATIVE_RN_PATH, 'React.podspec'),\n    path.join(versionedReactNativePath, 'React.podspec')\n  );\n  await fs.copy(\n    path.join(EXPO_DIR, RELATIVE_RN_PATH, 'React-Core.podspec'),\n    path.join(versionedReactNativePath, 'React-Core.podspec')\n  );\n  await fs.copy(\n    path.join(EXPO_DIR, RELATIVE_RN_PATH, 'ReactCommon', 'ReactCommon.podspec'),\n    path.join(versionedReactNativePath, 'ReactCommon', 'ReactCommon.podspec')\n  );\n  await fs.copy(\n    path.join(EXPO_DIR, RELATIVE_RN_PATH, 'ReactCommon', 'React-Fabric.podspec'),\n    path.join(versionedReactNativePath, 'ReactCommon', 'React-Fabric.podspec')\n  );\n  await fs.copy(\n    path.join(EXPO_DIR, RELATIVE_RN_PATH, 'package.json'),\n    path.join(versionedReactNativePath, 'package.json')\n  );\n\n  console.log(`Removing unnecessary ${chalk.magenta('*.js')} files ...`);\n\n  const jsFiles = (await glob(path.join(versionedReactNativePath, '**', '*.js'))) as string[];\n\n  for (const jsFile of jsFiles) {\n    await fs.remove(jsFile);\n  }\n\n  console.log(\n    `Copying cpp libraries from ${chalk.magenta(path.join(RELATIVE_RN_PATH, 'ReactCommon'))} ...`\n  );\n  const cppLibraries = getCppLibrariesToVersion();\n\n  await fs.mkdirs(path.join(versionedReactNativePath, 'ReactCommon'));\n\n  for (const library of cppLibraries) {\n    await fs.copy(\n      path.join(EXPO_DIR, RELATIVE_RN_PATH, 'ReactCommon', library.libName),\n      path.join(versionedReactNativePath, 'ReactCommon', library.libName)\n    );\n  }\n\n  await generateAutolinkingScriptAsync(versionedReactNativePath, versionName);\n  await generateReactNativePodspecsAsync(versionedReactNativePath, versionName);\n}\n\n/**\n * There are some kernel files that unfortunately have to call versioned code directly.\n * This function applies the specified changes in the kernel codebase.\n * The nature of kernel modifications is that they are temporary and at one point these have to be rollbacked.\n * @param versionName SDK version, e.g. 21.0.0, 37.0.0, etc.\n * @param rollback flag indicating whether to invoke rollbacking modification.\n */\nasync function modifyKernelFilesAsync(\n  versionName: string,\n  rollback: boolean = false\n): Promise<void> {\n  const kernelFilesPath = path.join(IOS_DIR, 'Exponent/kernel');\n  const filenameQueries = [`${kernelFilesPath}/**/EXAppViewController.m`];\n  let filenames: string[] = [];\n  await Promise.all(\n    filenameQueries.map(async (query) => {\n      let queryFilenames = (await glob(query)) as string[];\n      if (queryFilenames) {\n        filenames = filenames.concat(queryFilenames);\n      }\n    })\n  );\n  await Promise.all(\n    filenames.map(async (filename) => {\n      console.log(`Modifying ${chalk.magenta(path.relative(EXPO_DIR, filename))}:`);\n      await _transformFileContentsAsync(filename, (fileContents) =>\n        runTransformPipelineAsync({\n          pipeline: kernelFilesTransforms(versionName, rollback),\n          targetPath: filename,\n          input: fileContents,\n        })\n      );\n    })\n  );\n}\n/**\n * - Copies `scripts/react_native_pods.rb` script into versioned ReactNative directory.\n * - Removes pods installed from third-party-podspecs (we don't version them).\n * - Versions `use_react_native` method and all pods it declares.\n */\nasync function generateAutolinkingScriptAsync(\n  versionedReactNativePath: string,\n  versionName: string\n): Promise<void> {\n  const targetAutolinkPath = path.join(versionedReactNativePath, 'react_native_pods.rb');\n\n  await fs.copy(\n    path.join(EXPO_DIR, RELATIVE_RN_PATH, 'scripts', 'react_native_pods.rb'),\n    targetAutolinkPath\n  );\n\n  const targetSource = (await fs.readFile(targetAutolinkPath, 'utf8'))\n    .replace('def use_react_native!', `def use_react_native_${versionName}!`)\n    .replace(/(\\bpod\\s+([^\\n]+)\\/third-party-podspecs\\/([^\\n]+))/g, '# $1')\n    .replace(/\\bpod\\s+'([^\\']+)'/g, `pod '${versionName}$1'`)\n    .replace(/(:path => \"[^\"]+\")/g, `$1, :project_name => '${versionName}'`);\n\n  await fs.writeFile(targetAutolinkPath, targetSource);\n}\n\nasync function generateReactNativePodspecsAsync(\n  versionedReactNativePath: string,\n  versionName: string\n): Promise<void> {\n  const podspecFiles = await glob(path.join(versionedReactNativePath, '**', '*.podspec'));\n\n  for (const podspecFile of podspecFiles) {\n    const basename = path.basename(podspecFile, '.podspec');\n\n    if (/^react$/i.test(basename)) {\n      continue;\n    }\n\n    console.log(\n      `Generating podspec for ${chalk.green(basename)} at ${chalk.magenta(\n        path.relative(versionedReactNativePath, podspecFile)\n      )} ...`\n    );\n\n    const podspecSource = await fs.readFile(podspecFile, 'utf8');\n\n    const podspecOutput = await runTransformPipelineAsync({\n      pipeline: podspecTransforms(versionName),\n      input: podspecSource,\n      targetPath: podspecFile,\n    });\n\n    // Write transformed podspec output to the prefixed file.\n    await fs.writeFile(\n      path.join(path.dirname(podspecFile), `${versionName}${basename}.podspec`),\n      podspecOutput\n    );\n\n    // Remove original and unprefixed podspec.\n    await fs.remove(podspecFile);\n  }\n\n  await generateReactPodspecAsync(versionedReactNativePath, versionName);\n}\n\n/**\n * @param versionName\n * @param versionNumber format \"XX.X.X\"\n */\nasync function generateVersionedExpoAsync(\n  versionName: string,\n  versionNumber: string\n): Promise<void> {\n  const versionedExpoPath = getVersionedExpoPath(versionName);\n  const versionedExpoKitPath = getVersionedExpoKitPath(versionName);\n  const versionedUnimodulePods = await getVersionedUnimodulePodsAsync(versionName);\n  const originalUnimodulePodNames = Object.keys(versionedUnimodulePods);\n  const depsToReplace = originalUnimodulePodNames.join('|');\n  const versionedReactPodName = getVersionedReactPodName(versionName);\n\n  await fs.mkdirs(versionedExpoKitPath);\n\n  // Copy versioned exponent modules into the clone\n  console.log(`Copying versioned native modules into the new Pod...`);\n\n  await fs.copy(path.join(IOS_DIR, 'Exponent', 'Versioned'), versionedExpoKitPath);\n\n  await fs.copy(\n    path.join(EXPO_DIR, 'ios', 'ExpoKit.podspec'),\n    path.join(versionedExpoKitPath, 'ExpoKit.podspec')\n  );\n\n  // Copy universal modules into the clone\n  console.log(`Copying unimodules into versioned Expo directory...`);\n\n  // some pods are optional, so those specs should be omitted from versioned code\n  const excludedPodNames = getExcludedPodNames();\n  const packages = await getListOfPackagesAsync();\n\n  for (const pkg of packages) {\n    const modulePath = path.join(EXPO_DIR, RELATIVE_UNIVERSAL_MODULES_PATH, pkg.packageName);\n    const podName = pkg.podspecName;\n\n    if (podName && pkg.isVersionableOnPlatform('ios') && !excludedPodNames.includes(podName)) {\n      await fs.copy(path.join(modulePath, 'ios'), path.join(versionedExpoPath, podName));\n      await fs.move(\n        path.join(versionedExpoPath, podName, podName),\n        path.join(versionedExpoPath, podName, versionedUnimodulePods[podName])\n      );\n      await fs.copy(\n        path.join(modulePath, 'package.json'),\n        path.join(versionedExpoPath, podName, 'package.json')\n      );\n    }\n  }\n\n  for (const originalUnimodulePodName of originalUnimodulePodNames) {\n    const versionedUnimodulePodName = versionedUnimodulePods[originalUnimodulePodName];\n\n    const originalPodSpecPath = path.join(\n      versionedExpoPath,\n      originalUnimodulePodName,\n      `${originalUnimodulePodName}.podspec`\n    );\n    const prefixedPodSpecPath = path.join(\n      versionedExpoPath,\n      originalUnimodulePodName,\n      `${versionedUnimodulePodName}.podspec`\n    );\n\n    if (!(await fs.pathExists(originalPodSpecPath))) {\n      continue;\n    }\n\n    console.log(`Generating podspec for ${chalk.green(originalUnimodulePodName)} ...`);\n\n    await fs.move(originalPodSpecPath, prefixedPodSpecPath);\n\n    // Replaces versioned modules in the podspec eg. 'EXCore' => 'ABI28_0_0EXCore'\n    // `E` flag is required for extended syntax which allows to use `(a|b)`\n    await spawnAsync('sed', [\n      '-Ei',\n      '--',\n      `s/'(${depsToReplace})('|\\\\/)/'${versionName}\\\\1\\\\2/g`,\n      prefixedPodSpecPath,\n    ]);\n    await spawnAsync('sed', [\n      '-i',\n      '--',\n      `s/React/${versionedReactPodName}/g`,\n      prefixedPodSpecPath,\n    ]);\n    await spawnAsync('sed', [\n      '-i',\n      '--',\n      `s/${versionName}UM${versionedReactPodName}/${versionName}UMReact/g`,\n      prefixedPodSpecPath,\n    ]);\n    await spawnAsync('sed', [\n      '-i',\n      '--',\n      \"s/'..', 'package.json'/'package.json'/g\",\n      prefixedPodSpecPath,\n    ]);\n  }\n\n  console.log(`Generating podspec for ${chalk.green('ExpoKit')} ...`);\n\n  await generateExpoKitPodspecAsync(\n    versionedExpoKitPath,\n    versionedUnimodulePods,\n    versionName,\n    versionNumber\n  );\n}\n\n/**\n * Transforms ExpoKit.podspec, versioning Expo namespace, React pod name, replacing original ExpoKit podspecs\n * with Expo and ExpoOptional.\n * @param specfilePath location of ExpoKit.podspec to modify, e.g. /versioned-react-native/someversion/\n * @param versionedReactPodName name of the new pod (and podfile)\n * @param universalModulesPodNames versioned names of universal modules\n * @param versionNumber \"XX.X.X\"\n */\nasync function generateExpoKitPodspecAsync(\n  specfilePath: string,\n  universalModulesPodNames: { [key: string]: string },\n  versionName: string,\n  versionNumber: string\n): Promise<void> {\n  const versionedReactPodName = getVersionedReactPodName(versionName);\n  const versionedExpoKitPodName = getVersionedExpoKitPodName(versionName);\n  const specFilename = path.join(specfilePath, 'ExpoKit.podspec');\n  const excludedPodNames = getExcludedPodNames();\n\n  // rename spec to newPodName\n  const sedPattern = `s/\\\\(s\\\\.name[[:space:]]*=[[:space:]]\\\\)\"ExpoKit\"/\\\\1\"${versionedExpoKitPodName}\"/g`;\n\n  await spawnAsync('sed', ['-i', '--', sedPattern, specFilename]);\n\n  // further processing that sed can't do very well\n  await _transformFileContentsAsync(specFilename, async (fileString) => {\n    // `universalModulesPodNames` contains only versioned unimodules,\n    // so we fall back to the original name if the module is not there\n    const universalModulesDependencies = (await getListOfPackagesAsync())\n      .filter(\n        (pkg) =>\n          pkg.isIncludedInExpoClientOnPlatform('ios') &&\n          pkg.podspecName &&\n          !excludedPodNames.includes(pkg.podspecName)\n      )\n      .map(\n        ({ podspecName }) =>\n          `ss.dependency         \"${universalModulesPodNames[podspecName!] || podspecName}\"`\n      ).join(`\n    `);\n    const externalDependencies = EXTERNAL_REACT_ABI_DEPENDENCIES.map(\n      (podName) => `ss.dependency         \"${podName}\"`\n    ).join(`\n    `);\n    let subspec = `s.subspec \"Expo\" do |ss|\n    ss.source_files     = \"Core/**/*.{h,m,mm,cpp}\"\n\n    ss.dependency         \"${versionedReactPodName}-Core\"\n    ss.dependency         \"${versionedReactPodName}-Core/DevSupport\"\n    ss.dependency         \"${versionedReactPodName}Common\"\n    ${universalModulesDependencies}\n    ${externalDependencies}\n  end\n\n  s.subspec \"ExpoOptional\" do |ss|\n    ss.dependency         \"${versionedExpoKitPodName}/Expo\"\n    ss.source_files     = \"Optional/**/*.{h,m,mm}\"\n  end`;\n    fileString = fileString.replace(\n      /(s\\.subspec \".+?\"[\\S\\s]+?(?=end\\b)end\\b[\\s]+)+/g,\n      `${subspec}\\n`\n    );\n\n    // correct version number\n    fileString = fileString.replace(/(?<=s.version = \").*?(?=\")/g, versionNumber);\n\n    // add Reanimated V2 Folly dependency\n    fileString = fileString\n      .replace(\n        /(?=Pod::Spec.new do \\|s\\|)/,\n        `\nfolly_flags = '-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1'\nfolly_compiler_flags = folly_flags + ' ' + '-Wno-comma -Wno-shorten-64-to-32'\nfolly_version = '2020.01.13.00'\nboost_compiler_flags = '-Wno-documentation'\\n\\n`\n      )\n      .replace(\n        /(?=  s.subspec \"Expo\" do \\|ss\\|)/g,\n        `\n  s.pod_target_xcconfig    = {\n    \"USE_HEADERMAP\"       => \"YES\",\n    \"HEADER_SEARCH_PATHS\" => \"\\\\\"$(PODS_TARGET_SRCROOT)/ReactCommon\\\\\" \\\\\"$(PODS_TARGET_SRCROOT)\\\\\" \\\\\"$(PODS_ROOT)/Folly\\\\\" \\\\\"$(PODS_ROOT)/boost-for-react-native\\\\\" \\\\\"$(PODS_ROOT)/DoubleConversion\\\\\" \\\\\"$(PODS_ROOT)/Headers/Private/React-Core\\\\\" \"\n  }\n  s.compiler_flags = folly_compiler_flags + ' ' + boost_compiler_flags\n  s.xcconfig               = { \n    \"HEADER_SEARCH_PATHS\" => \"\\\\\"$(PODS_ROOT)/boost-for-react-native\\\\\" \\\\\"$(PODS_ROOT)/glog\\\\\" \\\\\"$(PODS_ROOT)/Folly\\\\\" \\\\\"$(PODS_ROOT)/Headers/Private/${versionName}React-Core\\\\\"\",\n    \"OTHER_CFLAGS\"        => \"$(inherited)\" + \" \" + folly_flags\n  }\\n\\n`\n      );\n\n    return fileString;\n  });\n\n  // move podspec to ${versionedExpoKitPodName}.podspec\n  await fs.move(specFilename, path.join(specfilePath, `${versionedExpoKitPodName}.podspec`));\n\n  return;\n}\n\n/**\n *  @param specfilePath location of React.podspec to modify, e.g. /versioned-react-native/someversion/\n *  @param versionedReactPodName name of the new pod (and podfile)\n */\nasync function generateReactPodspecAsync(versionedReactNativePath, versionName) {\n  const versionedReactPodName = getVersionedReactPodName(versionName);\n  const versionedYogaPodName = getVersionedYogaPodName(versionName);\n  const versionedJSIPodName = getVersionedJSIPodName(versionName);\n  const specFilename = path.join(versionedReactNativePath, 'React.podspec');\n\n  // rename spec to newPodName\n  const sedPattern = `s/\\\\(s\\\\.name[[:space:]]*=[[:space:]]\\\\)\"React\"/\\\\1\"${versionedReactPodName}\"/g`;\n  await spawnAsync('sed', ['-i', '--', sedPattern, specFilename]);\n\n  // rename header_dir\n  await spawnAsync('sed', [\n    '-i',\n    '--',\n    `s/^\\\\(.*header_dir.*\\\\)React\\\\(.*\\\\)$/\\\\1${versionedReactPodName}\\\\2/`,\n    specFilename,\n  ]);\n  await spawnAsync('sed', [\n    '-i',\n    '--',\n    `s/^\\\\(.*header_dir.*\\\\)jsireact\\\\(.*\\\\)$/\\\\1${versionedJSIPodName}\\\\2/`,\n    specFilename,\n  ]);\n\n  // point source at .\n  const newPodSource = `{ :path => \".\" }`;\n  await spawnAsync('sed', [\n    '-i',\n    '--',\n    `s/\\\\(s\\\\.source[[:space:]]*=[[:space:]]\\\\).*/\\\\1${newPodSource}/g`,\n    specFilename,\n  ]);\n\n  // further processing that sed can't do very well\n  await _transformFileContentsAsync(specFilename, (fileString) => {\n    // replace React/* dependency with ${versionedReactPodName}/*\n    fileString = fileString.replace(\n      /(\\.dependency\\s+)\"React([^\"]+)\"/g,\n      `$1\"${versionedReactPodName}$2\"`\n    );\n\n    fileString = fileString.replace('/RCTTV', `/${versionName}RCTTV`);\n\n    // namespace cpp libraries\n    const cppLibraries = getCppLibrariesToVersion();\n    cppLibraries.forEach(({ libName }) => {\n      fileString = fileString.replace(\n        new RegExp(`([^A-Za-z0-9_])${libName}([^A-Za-z0-9_])`, 'g'),\n        `$1${getVersionedLibraryName(libName, versionName)}$2`\n      );\n    });\n\n    // fix wrong Yoga pod name\n    fileString = fileString.replace(\n      /^(.*dependency.*[\"']).*yoga.*?([\"'].*)$/m,\n      `$1${versionedYogaPodName}$2`\n    );\n\n    return fileString;\n  });\n\n  // move podspec to ${versionedReactPodName}.podspec\n  await fs.move(\n    specFilename,\n    path.join(versionedReactNativePath, `${versionedReactPodName}.podspec`)\n  );\n\n  return;\n}\n\nfunction getCFlagsToPrefixGlobals(prefix, globals) {\n  return globals.map((val) => `-D${val}=${prefix}${val}`);\n}\n\n/**\n * Generates `dependencies.rb` and `postinstalls.rb` files for versioned code.\n * @param versionNumber Semver-compliant version of the SDK/ABI\n * @param versionName Version prefix used for versioned files, e.g. ABI99_0_0\n * @param versionedPodNames mapping from pod names to versioned pod names, e.g. React -> ReactABI99_0_0\n * @param versionedReactPodPath path of the new react pod\n */\nasync function generatePodfileSubscriptsAsync(\n  versionNumber: string,\n  versionName: string,\n  versionedPodNames: Record<string, string>,\n  versionedReactPodPath: string\n) {\n  if (!versionedPodNames.React) {\n    throw new Error(\n      'Tried to add generate pod dependencies, but missing a name for the versioned library.'\n    );\n  }\n\n  const relativeReactNativePath = path.relative(IOS_DIR, getVersionedReactNativePath(versionName));\n  const relativeExpoKitPath = path.relative(IOS_DIR, getVersionedExpoKitPath(versionName));\n  const relativeExpoPath = path.relative(IOS_DIR, getVersionedExpoPath(versionName));\n\n  const versionableUnimodulesPods = Object.entries(\n    await getVersionedUnimodulePodsAsync(versionName)\n  )\n    .map(([originalUnimodulePodName, versionedUnimodulePodName]) => {\n      return `pod '${versionedUnimodulePodName}',\n  :path => './${relativeExpoPath}/${originalUnimodulePodName}',\n  :project_name => '${versionName}'`;\n    })\n    .join('\\n');\n\n  // Add a dependency on newPodName\n  let dep = `# @generated by expotools\n\nrequire './${relativeReactNativePath}/react_native_pods.rb'\n\nuse_react_native_${versionName}! path: './${relativeReactNativePath}'\n\npod '${getVersionedExpoKitPodName(versionName)}',\n  :path => './${relativeExpoKitPath}',\n  :project_name => '${versionName}',\n  :subspecs => ['Expo', 'ExpoOptional']\n\nuse_pods! 'vendored/sdk${semver.major(versionNumber)}/*/*.podspec.json', '${versionName}'\n\n${versionableUnimodulesPods}\n`;\n  await fs.writeFile(path.join(versionedReactPodPath, 'dependencies.rb'), dep);\n\n  // Add postinstall.\n  // In particular, resolve conflicting globals from React by redefining them.\n  let globals = {\n    React: [\n      // RCTNavigator\n      'kNeverRequested',\n      'kNeverProgressed',\n      // react-native-maps\n      'kSMCalloutViewRepositionDelayForUIScrollView',\n      'regionAsJSON',\n      'unionRect',\n      // jschelpers\n      'JSNoBytecodeFileFormatVersion',\n      'JSSamplingProfilerEnabled',\n      // RCTInspectorPackagerConnection\n      'RECONNECT_DELAY_MS',\n      // RCTSpringAnimation\n      'MAX_DELTA_TIME',\n    ],\n    yoga: [\n      'gCurrentGenerationCount',\n      'gPrintSkips',\n      'gPrintChanges',\n      'layoutNodeInternal',\n      'gDepth',\n      'gPrintTree',\n      'isUndefined',\n      'gNodeInstanceCount',\n    ],\n  };\n  let configValues = getCFlagsToPrefixGlobals(\n    versionedPodNames.React,\n    globals.React.concat(globals.yoga)\n  );\n  const indent = '  '.repeat(3);\n  const config = `# @generated by expotools\n      \nif pod_name.start_with?('${versionedPodNames.React}') || pod_name == '${versionedPodNames.ExpoKit}'\n  target_installation_result.native_target.build_configurations.each do |config|\n    config.build_settings['OTHER_CFLAGS'] = %w[\n      ${configValues.join(`\\n${indent}`)}\n    ]\n    config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n    config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << '${versionName}RCT_DEV=1'\n    config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << '${versionName}RCT_ENABLE_INSPECTOR=0'\n    config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << '${versionName}ENABLE_PACKAGER_CONNECTION=0'\n    # Enable Google Maps support\n    config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << '${versionName}HAVE_GOOGLE_MAPS=1'\n    config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << '${versionName}HAVE_GOOGLE_MAPS_UTILS=1'\n  end\nend\n`;\n  await fs.writeFile(path.join(versionedReactPodPath, 'postinstalls.rb'), config);\n}\n\n/**\n * @param transformConfig function that takes a config dict and returns a new config dict.\n */\nasync function modifyVersionConfigAsync(configPath, transformConfig) {\n  let jsConfigFilename = `${configPath}/sdkVersions.json`;\n  await _transformFileContentsAsync(jsConfigFilename, (jsConfigContents) => {\n    let jsConfig;\n\n    // read the existing json config and add the new version to the sdkVersions array\n    try {\n      jsConfig = JSON.parse(jsConfigContents);\n    } catch (e) {\n      console.log('Error parsing existing sdkVersions.json file, writing a new one...', e);\n      console.log('The erroneous file contents was:', jsConfigContents);\n      jsConfig = {\n        sdkVersions: [],\n      };\n    }\n    // apply changes\n    jsConfig = transformConfig(jsConfig);\n    return JSON.stringify(jsConfig);\n  });\n\n  // convert json config to plist for iOS\n  await spawnAsync('plutil', [\n    '-convert',\n    'xml1',\n    jsConfigFilename,\n    '-o',\n    path.join(configPath, 'EXSDKVersions.plist'),\n  ]);\n\n  return;\n}\n\nfunction validateAddVersionDirectories(rootPath, newVersionPath) {\n  // Make sure the paths we want to read are available\n  let relativePathsToCheck = [\n    RELATIVE_RN_PATH,\n    'ios/versioned-react-native',\n    'ios/Exponent',\n    'ios/Exponent/Versioned',\n  ];\n  let isValid = true;\n  relativePathsToCheck.forEach((path) => {\n    try {\n      fs.accessSync(`${rootPath}/${path}`, fs.constants.F_OK);\n    } catch (e) {\n      console.log(`${rootPath}/${path} does not exist or is otherwise inaccessible`);\n      isValid = false;\n    }\n  });\n  // Also, make sure the version we're about to write doesn't already exist\n  try {\n    // we want this to fail\n    fs.accessSync(newVersionPath, fs.constants.F_OK);\n    console.log(`${newVersionPath} already exists, will not overwrite`);\n    isValid = false;\n  } catch (e) {}\n\n  return isValid;\n}\n\nfunction validateRemoveVersionDirectories(rootPath, newVersionPath) {\n  let pathsToCheck = [\n    `${rootPath}/ios/versioned-react-native`,\n    `${rootPath}/ios/Exponent`,\n    newVersionPath,\n  ];\n  let isValid = true;\n  pathsToCheck.forEach((path) => {\n    try {\n      fs.accessSync(path, fs.constants.F_OK);\n    } catch (e) {\n      console.log(`${path} does not exist or is otherwise inaccessible`);\n      isValid = false;\n    }\n  });\n  return isValid;\n}\n\nasync function getConfigsFromArguments(versionNumber) {\n  let versionComponents = versionNumber.split('.');\n  versionComponents = versionComponents.map((number) => parseInt(number, 10));\n  let versionName = 'ABI' + versionNumber.replace(/\\./g, '_');\n  let rootPathComponents = EXPO_DIR.split('/');\n  let versionPathComponents = path.join('ios', 'versioned-react-native', versionName).split('/');\n  let newVersionPath = rootPathComponents.concat(versionPathComponents).join('/');\n\n  let versionedPodNames = {\n    React: getVersionedReactPodName(versionName),\n    yoga: getVersionedYogaPodName(versionName),\n    ExpoKit: getVersionedExpoKitPodName(versionName),\n    jsireact: getVersionedJSIPodName(versionName),\n  };\n\n  return {\n    versionName,\n    newVersionPath,\n    versionedPodNames,\n    versionComponents,\n  };\n}\n\nasync function getVersionedUnimodulePodsAsync(\n  versionName: string\n): Promise<{ [key: string]: string }> {\n  const versionedUnimodulePods = {};\n  const packages = await getListOfPackagesAsync();\n  const excludedPodNames = getExcludedPodNames();\n\n  packages.forEach((pkg) => {\n    const podName = pkg.podspecName;\n    if (podName && pkg.isVersionableOnPlatform('ios') && !excludedPodNames.includes(podName)) {\n      versionedUnimodulePods[podName] = `${versionName}${podName}`;\n    }\n  });\n\n  return versionedUnimodulePods;\n}\n\nfunction getVersionedReactPodName(versionName: string): string {\n  return getVersionedLibraryName('React', versionName);\n}\n\nfunction getVersionedYogaPodName(versionName: string): string {\n  return getVersionedLibraryName('Yoga', versionName);\n}\n\nfunction getVersionedJSIPodName(versionName: string): string {\n  return getVersionedLibraryName('jsiReact', versionName);\n}\n\nfunction getVersionedExpoKitPodName(versionName: string): string {\n  return getVersionedLibraryName('ExpoKit', versionName);\n}\n\nfunction getVersionedLibraryName(libraryName: string, versionName: string): string {\n  return `${versionName}${libraryName}`;\n}\n\nfunction getVersionedReactNativePath(versionName: string): string {\n  return path.join(VERSIONED_RN_IOS_DIR, versionName, 'ReactNative');\n}\n\nfunction getVersionedExpoPath(versionName: string): string {\n  return path.join(VERSIONED_RN_IOS_DIR, versionName, 'Expo');\n}\n\nfunction getVersionedExpoKitPath(versionName: string): string {\n  return path.join(getVersionedExpoPath(versionName), 'ExpoKit');\n}\n\nfunction getCppLibrariesToVersion() {\n  return [\n    {\n      libName: 'cxxreact',\n    },\n    {\n      libName: 'jsi',\n    },\n    {\n      libName: 'jsiexecutor',\n      customHeaderDir: 'jsireact',\n    },\n    {\n      libName: 'jsinspector',\n    },\n    {\n      libName: 'yoga',\n    },\n    {\n      libName: 'fabric',\n    },\n    {\n      libName: 'turbomodule',\n      customHeaderDir: 'ReactCommon',\n    },\n    {\n      libName: 'callinvoker',\n      customHeaderDir: 'ReactCommon',\n    },\n  ];\n}\n\nfunction getExcludedPodNames() {\n  // we don't want Payments in Expo Client versions for now\n  return ['EXPaymentsStripe'];\n}\n\nexport async function addVersionAsync(versionNumber: string) {\n  let { versionName, newVersionPath, versionedPodNames } = await getConfigsFromArguments(\n    versionNumber\n  );\n\n  // Validate the directories we need before doing anything\n  console.log(`Validating root directory ${chalk.magenta(EXPO_DIR)} ...`);\n  let isFilesystemReady = validateAddVersionDirectories(EXPO_DIR, newVersionPath);\n  if (!isFilesystemReady) {\n    throw new Error('Aborting: At least one directory we need is not available');\n  }\n\n  if (!versionedPodNames.React) {\n    throw new Error('Missing name for versioned pod dependency.');\n  }\n\n  // Create ABIXX_0_0 directory.\n  console.log(\n    `Creating new ABI version ${chalk.cyan(versionNumber)} at ${chalk.magenta(\n      path.relative(EXPO_DIR, newVersionPath)\n    )}`\n  );\n  await fs.mkdirs(newVersionPath);\n\n  // Generate new Podspec from the existing React.podspec\n  console.log('Generating versioned ReactNative directory...');\n  await generateVersionedReactNativeAsync(versionName);\n\n  console.log(\n    `Generating ${chalk.magenta(\n      path.relative(EXPO_DIR, getVersionedExpoPath(versionName))\n    )} directory...`\n  );\n  await generateVersionedExpoAsync(versionName, versionNumber);\n\n  // Namespace the new React clone\n  console.log('Namespacing/transforming files...');\n  await transformReactNativeAsync(newVersionPath, versionName, versionedPodNames);\n\n  // Generate Ruby scripts with versioned dependencies and postinstall actions that will be evaluated in the Expo client's Podfile.\n  console.log('Adding dependency to root Podfile...');\n  await generatePodfileSubscriptsAsync(\n    versionNumber,\n    versionName,\n    versionedPodNames,\n    newVersionPath\n  );\n\n  // Add the new version to the iOS config list of available versions\n  console.log('Registering new version under sdkVersions config...');\n  const addVersionToConfig = (config, versionNumber) => {\n    config.sdkVersions.push(versionNumber);\n    return config;\n  };\n  await modifyVersionConfigAsync(path.join(IOS_DIR, 'Exponent', 'Supporting'), (config) =>\n    addVersionToConfig(config, versionNumber)\n  );\n  await modifyVersionConfigAsync(\n    path.join(EXPO_DIR, 'exponent-view-template', 'ios', 'exponent-view-template', 'Supporting'),\n    (config) => addVersionToConfig(config, versionNumber)\n  );\n\n  // Modifying kernel files\n  console.log(`Modifying ${chalk.bold('kernel files')} to incorporate new SDK version...`);\n  await modifyKernelFilesAsync(versionName);\n\n  console.log('Removing any `filename--` files from the new pod ...');\n\n  try {\n    const minusMinusFiles = await glob(path.join(newVersionPath, '**', '*--'));\n    for (const minusMinusFile of minusMinusFiles) {\n      await fs.remove(minusMinusFile);\n    }\n  } catch (error) {\n    console.warn(\n      \"The script wasn't able to remove any possible `filename--` files created by sed. Please ensure there are no such files manually.\"\n    );\n  }\n\n  console.log('Finished creating new version.');\n}\n\nasync function askToReinstallPodsAsync(): Promise<boolean> {\n  if (process.env.CI) {\n    // If we're on the CI, let's regenerate Pods by default.\n    return true;\n  }\n  const { result } = await inquirer.prompt<{ result: boolean }>([\n    {\n      type: 'confirm',\n      name: 'result',\n      message: 'Do you want to reinstall pods?',\n      default: true,\n    },\n  ]);\n  return result;\n}\n\nexport async function reinstallPodsAsync(force?: boolean) {\n  if (force || (force !== false && (await askToReinstallPodsAsync()))) {\n    await spawnAsync('pod', ['install'], { stdio: 'inherit', cwd: IOS_DIR });\n    console.log(\n      'Regenerated Podfile and installed new pods. You can now try to build the project in Xcode.'\n    );\n  } else {\n    console.log(\n      'Skipped pods regeneration. You might want to run `et ios-generate-dynamic-macros`, then `pod install` in `ios` to configure Xcode project.'\n    );\n  }\n}\n\nexport async function removeVersionAsync(versionNumber: string) {\n  let { newVersionPath, versionedPodNames, versionName } = await getConfigsFromArguments(\n    versionNumber\n  );\n  console.log(\n    `Removing SDK version ${chalk.cyan(versionNumber)} from ${chalk.magenta(\n      path.relative(EXPO_DIR, newVersionPath)\n    )} with Pod name ${chalk.green(versionedPodNames.React)}`\n  );\n\n  // Validate the directories we need before doing anything\n  console.log(`Validating root directory ${chalk.magenta(EXPO_DIR)} ...`);\n  let isFilesystemReady = validateRemoveVersionDirectories(EXPO_DIR, newVersionPath);\n  if (!isFilesystemReady) {\n    console.log('Aborting: At least one directory we expect is not available');\n    return;\n  }\n\n  // remove directory\n  console.log(\n    `Removing versioned files under ${chalk.magenta(path.relative(EXPO_DIR, newVersionPath))}...`\n  );\n  await fs.remove(newVersionPath);\n\n  // remove dep from main podfile\n  console.log(`Removing ${chalk.green(versionedPodNames.React)} dependency from root Podfile...`);\n\n  // remove from sdkVersions.json\n  console.log('Unregistering version from sdkVersions config...');\n  const removeVersionFromConfig = (config, versionNumber) => {\n    let index = config.sdkVersions.indexOf(versionNumber);\n    if (index > -1) {\n      // modify in place\n      config.sdkVersions.splice(index, 1);\n    }\n    return config;\n  };\n  await modifyVersionConfigAsync(path.join(IOS_DIR, 'Exponent', 'Supporting'), (config) =>\n    removeVersionFromConfig(config, versionNumber)\n  );\n  await modifyVersionConfigAsync(\n    path.join(EXPO_DIR, 'exponent-view-template', 'ios', 'exponent-view-template', 'Supporting'),\n    (config) => removeVersionFromConfig(config, versionNumber)\n  );\n\n  // modify kernel files\n  console.log('Rollbacking SDK modifications from kernel files...');\n  await modifyKernelFilesAsync(versionName, true);\n\n  await reinstallPodsAsync();\n\n  return;\n}\n\n/**\n *  @return an array of objects representing react native transform rules.\n *    objects must contain 'pattern' and may optionally contain 'paths' to limit\n *    the transform to certain file paths.\n *\n *  the rules are applied in order!\n */\nfunction _getReactNativeTransformRules(versionPrefix, reactPodName) {\n  const cppLibraries = getCppLibrariesToVersion().map((lib) => lib.customHeaderDir || lib.libName);\n  const versionedLibs = [...cppLibraries, 'React', 'FBLazyVector', 'FBReactNativeSpec'];\n\n  return [\n    {\n      // Change Obj-C symbols prefix\n      pattern: `s/RCT/${versionPrefix}RCT/g`,\n    },\n    {\n      pattern: `s/^EX/${versionPrefix}EX/g`,\n      // paths: 'EX',\n    },\n    {\n      pattern: `s/^UM/${versionPrefix}UM/g`,\n      // paths: 'EX',\n    },\n    {\n      pattern: `s/\\\\([^\\\\<\\\\/\"]\\\\)YG/\\\\1${versionPrefix}YG/g`,\n    },\n    {\n      pattern: `s/\\\\([\\\\<,]\\\\)YG/\\\\1${versionPrefix}YG/g`,\n    },\n    {\n      pattern: `s/^YG/${versionPrefix}YG/g`,\n    },\n    {\n      paths: 'Components',\n      pattern: `s/\\\\([^+]\\\\)AIR/\\\\1${versionPrefix}AIR/g`,\n    },\n    {\n      pattern: `s/\\\\([^A-Za-z0-9_]\\\\)EX/\\\\1${versionPrefix}EX/g`,\n    },\n    {\n      pattern: `s/\\\\([^A-Za-z0-9_]\\\\)UM/\\\\1${versionPrefix}UM/g`,\n    },\n    {\n      pattern: `s/\\\\([^A-Za-z0-9_+]\\\\)ART/\\\\1${versionPrefix}ART/g`,\n    },\n    {\n      pattern: `s/ENABLE_PACKAGER_CONNECTION/${versionPrefix}ENABLE_PACKAGER_CONNECTION/g`,\n    },\n    {\n      paths: 'Components',\n      pattern: `s/\\\\([^A-Za-z0-9_+]\\\\)SM/\\\\1${versionPrefix}SM/g`,\n    },\n    {\n      paths: 'Core/Api',\n      pattern: `s/\\\\([^A-Za-z0-9_+]\\\\)RN/\\\\1${versionPrefix}RN/g`,\n    },\n    {\n      paths: 'Core/Api',\n      pattern: `s/^RN/${versionPrefix}RN/g`,\n    },\n    {\n      paths: 'Core/Api',\n      pattern: `s/HAVE_GOOGLE_MAPS/${versionPrefix}HAVE_GOOGLE_MAPS/g`,\n    },\n    {\n      paths: 'Core/Api',\n      pattern: `s/#import \"Branch/#import \"${versionPrefix}Branch/g`,\n    },\n    {\n      paths: 'Core/Api',\n      pattern: `s/#import \"NSObject+RNBranch/#import \"${versionPrefix}NSObject+RNBranch/g`,\n    },\n    {\n      // React will be prefixed in a moment\n      pattern: `s/#import <${versionPrefix}RCTAnimation/#import <React/g`,\n    },\n    {\n      paths: 'Core/Api/Reanimated',\n      pattern: `s/\\\\([^A-Za-z0-9_+]\\\\)REA/\\\\1${versionPrefix}REA/g`,\n    },\n    {\n      pattern: `s/^REA/${versionPrefix}REA/g`,\n      paths: 'Core/Api/Reanimated',\n    },\n    {\n      // Prefixes all direct references to objects under `reanimated` namespace.\n      // It must be applied before versioning `namespace reanimated` so\n      // `using namespace reanimated::` don't get versioned twice.\n      pattern: `s/reanimated::/${versionPrefix}reanimated::/g`,\n    },\n    {\n      // Prefixes reanimated namespace.\n      pattern: `s/namespace reanimated/namespace ${versionPrefix}reanimated/g`,\n    },\n    {\n      // Fix imports in C++ libs in ReactCommon.\n      // Extended syntax (-E) is required to use (a|b).\n      flags: '-Ei',\n      pattern: `s/([<\"])(${versionedLibs.join(\n        '|'\n      )})\\\\//\\\\1${versionPrefix}\\\\2\\\\/${versionPrefix}/g`,\n    },\n    {\n      // Change React -> new pod name\n      // e.g. threads and queues namespaced to com.facebook.react,\n      // file paths beginning with the lib name,\n      // the cpp facebook::react namespace,\n      // iOS categories ending in +React\n      flags: '-Ei',\n      pattern: `s/[Rr]eact/${reactPodName}/g`,\n    },\n    {\n      // Imports from cxxreact and jsireact got prefixed twice.\n      flags: '-Ei',\n      pattern: `s/([<\"])(${versionPrefix})(cxx|jsi)${versionPrefix}React/\\\\1\\\\2\\\\3react/g`,\n    },\n    {\n      // Fix imports from files like `UIView+React.*`.\n      flags: '-Ei',\n      pattern: `s/\\\\+${versionPrefix}React/\\\\+React/g`,\n    },\n    {\n      // Prefixes all direct references to objects under `facebook` namespace.\n      // It must be applied before versioning `namespace facebook` so\n      // `using namespace facebook::` don't get versioned twice.\n      pattern: `s/facebook::/${versionPrefix}facebook::/g`,\n    },\n    {\n      // Prefixes facebook namespace.\n      pattern: `s/namespace facebook/namespace ${versionPrefix}facebook/g`,\n    },\n    {\n      // For UMReactNativeAdapter\n      // Fix names with 'React' substring occurring twice - only first one should be prefixed\n      flags: '-Ei',\n      pattern: `s/${versionPrefix}UM([[:alpha:]]*)${reactPodName}/${versionPrefix}UM\\\\1React/g`,\n    },\n    {\n      // For EXReactNativeAdapter\n      pattern: `s/${versionPrefix}EX${reactPodName}/${versionPrefix}EXReact/g`,\n    },\n    {\n      // For EXConstants and EXNotifications so that when their migrators\n      // try to access legacy storage for UUID migration, they access the proper value.\n      pattern: `s/${versionPrefix}EXDeviceInstallUUIDKey/EXDeviceInstallUUIDKey/g`,\n      paths: 'Expo',\n    },\n    {\n      // For EXConstants and EXNotifications so that the installation ID\n      // stays the same between different SDK versions. (https://github.com/expo/expo/issues/11008#issuecomment-726370187)\n      pattern: `s/${versionPrefix}EXDeviceInstallationUUIDKey/EXDeviceInstallationUUIDKey/g`,\n      paths: 'Expo',\n    },\n    {\n      // RCTPlatform exports version of React Native\n      pattern: `s/${reactPodName}NativeVersion/reactNativeVersion/g`,\n    },\n    {\n      pattern: `s/@\"${versionPrefix}RCT\"/@\"RCT\"/g`,\n    },\n    {\n      // Unversion EXGL_CPP imports: `<ABI37_0_0EXGL_CPP/` => `<EXGL_CPP/`\n      pattern: `s/<${versionPrefix}EXGL_CPP\\\\//<EXGL_CPP\\\\//g`,\n    },\n    {\n      // Unprefix everything that got prefixed twice or more times.\n      flags: '-Ei',\n      pattern: `s/(${versionPrefix}){2,}/\\\\1/g`,\n    },\n  ];\n}\n\nfunction _getTransformRulesForDirname(transformRules, dirname) {\n  return transformRules.filter((rule) => {\n    return (\n      // no paths specified, so apply rule to everything\n      !rule.paths ||\n      // otherwise, limit this rule to paths specified\n      dirname.indexOf(rule.paths) !== -1\n    );\n  });\n}\n\n// TODO: use the one in XDL\nfunction _isDirectory(dir) {\n  try {\n    if (fs.statSync(dir).isDirectory()) {\n      return true;\n    }\n\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\n// TODO: use the one in XDL\nasync function _transformFileContentsAsync(\n  filename: string,\n  transform: (fileString: string) => Promise<string> | string | null\n) {\n  let fileString = await fs.readFile(filename, 'utf8');\n  let newFileString = await transform(fileString);\n  if (newFileString !== null) {\n    await fs.writeFile(filename, newFileString);\n  }\n  return;\n}\n"]}