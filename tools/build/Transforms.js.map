{"version":3,"file":"Transforms.js","sourceRoot":"","sources":["../src/Transforms.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,wDAA0B;AAC1B,0DAAkC;AAClC,gDAAwB;AAGxB,mCAAmC;AAEnC,qDAAmC;AAEnC;;GAEG;AACH,SAAgB,eAAe,CAC7B,KAAa,EACb,UAAgD;IAEhD,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,KAAK,CAAC;KACd;IACD,OAAO,UAAU,CAAC,MAAM;IACtB,wEAAwE;IACxE,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,WAAW,CAAC,EAC9D,KAAK,CACN,CAAC;AACJ,CAAC;AAZD,0CAYC;AAED;;GAEG;AACI,KAAK,UAAU,kBAAkB,CACtC,QAAgB,EAChB,UAAgD;IAEhD,MAAM,OAAO,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IACpD,MAAM,kBAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,eAAe,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC;AACtE,CAAC;AAND,gDAMC;AAED;;GAEG;AACI,KAAK,UAAU,2BAA2B,CAC/C,OAAwB;;IAExB,MAAM,EAAE,UAAU,EAAE,eAAe,EAAE,eAAe,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;IAC7E,MAAM,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;IAE1D,uDAAuD;IACvD,MAAM,UAAU,GAAG,eAAe,CAAC,UAAU,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;IAChE,MAAM,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;IAE1D,yDAAyD;IACzD,MAAM,yBAAyB,eAC7B,UAAU,CAAC,OAAO,0CAAE,MAAM,CACxB,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CACZ,CAAC,KAAK;QACN,gBAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,mBAAS,CAAC,UAAU,EAAE,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,oCACrF,EAAE,CAAC;IAEV,4BAA4B;IAC5B,MAAM,OAAO,GAAG,eAAe,CAAC,MAAM,kBAAE,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,EAAE,yBAAyB,CAAC,CAAC;IAElG,uDAAuD;IACvD,MAAM,kBAAE,CAAC,UAAU,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAEzC,OAAO;QACL,OAAO;QACP,UAAU;KACX,CAAC;AACJ,CAAC;AA5BD,kEA4BC","sourcesContent":["import fs from 'fs-extra';\nimport minimatch from 'minimatch';\nimport path from 'path';\n\nimport { CopyFileOptions, CopyFileResult, StringTransform } from './Transforms.types';\nimport { arrayize } from './Utils';\n\nexport * from './Transforms.types';\n\n/**\n * Transforms input string according to the given transform rules.\n */\nexport function transformString(\n  input: string,\n  transforms: StringTransform[] | null | undefined\n): string {\n  if (!transforms) {\n    return input;\n  }\n  return transforms.reduce(\n    // @ts-ignore @tsapeta: TS gets crazy on `replaceWith` being a function.\n    (acc, { find, replaceWith }) => acc.replace(find, replaceWith),\n    input\n  );\n}\n\n/**\n * Transforms file's content in-place.\n */\nexport async function transformFileAsync(\n  filePath: string,\n  transforms: StringTransform[] | null | undefined\n): Promise<void> {\n  const content = await fs.readFile(filePath, 'utf8');\n  await fs.outputFile(filePath, transformString(content, transforms));\n}\n\n/**\n * Copies a file from source directory to target directory with transformed relative path and content.\n */\nexport async function copyFileWithTransformsAsync(\n  options: CopyFileOptions\n): Promise<CopyFileResult> {\n  const { sourceFile, sourceDirectory, targetDirectory, transforms } = options;\n  const sourcePath = path.join(sourceDirectory, sourceFile);\n\n  // Transform the target path according to rename rules.\n  const targetFile = transformString(sourceFile, transforms.path);\n  const targetPath = path.join(targetDirectory, targetFile);\n\n  // Filter out transforms that don't match paths patterns.\n  const filteredContentTransforms =\n    transforms.content?.filter(\n      ({ paths }) =>\n        !paths ||\n        arrayize(paths).some((pattern) => minimatch(sourceFile, pattern, { matchBase: true }))\n    ) ?? [];\n\n  // Transform source content.\n  const content = transformString(await fs.readFile(sourcePath, 'utf8'), filteredContentTransforms);\n\n  // Save transformed source file at renamed target path.\n  await fs.outputFile(targetPath, content);\n\n  return {\n    content,\n    targetFile,\n  };\n}\n"]}