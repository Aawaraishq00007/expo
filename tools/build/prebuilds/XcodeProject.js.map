{"version":3,"file":"XcodeProject.js","sourceRoot":"","sources":["../../src/prebuilds/XcodeProject.ts"],"names":[],"mappings":"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","sourcesContent":["import os from 'os';\nimport path from 'path';\nimport fs from 'fs-extra';\n\nimport { spawnAsync } from '../Utils';\nimport { generateXcodeProjectAsync } from './XcodeGen';\nimport { Flavor, Framework, XcodebuildSettings } from './XcodeProject.types';\nimport { formatXcodeBuildOutput } from '../Formatter';\nimport { ProjectSpec } from './XcodeGen.types';\n\n/**\n * Path to the shared derived data directory.\n */\nconst SHARED_DERIVED_DATA_DIR = path.join(os.tmpdir(), 'Expo/DerivedData');\n\n/**\n * Path to the products in derived data directory. We pick `.framework` files from there.\n */\nconst PRODUCTS_DIR = path.join(SHARED_DERIVED_DATA_DIR, 'Build/Products');\n\n/**\n * A class representing single Xcode project and operating on its `.xcodeproj` file.\n */\nexport default class XcodeProject {\n  /**\n   * Creates `XcodeProject` instance from given path to `.xcodeproj` file.\n   */\n  static async fromXcodeprojPathAsync(xcodeprojPath: string): Promise<XcodeProject> {\n    if (!(await fs.pathExists(xcodeprojPath))) {\n      throw new Error(`Xcodeproj not found at path: ${xcodeprojPath}`);\n    }\n    return new XcodeProject(xcodeprojPath);\n  }\n\n  /**\n   * Generates `.xcodeproj` file based on given spec and returns it.\n   */\n  static async generateProjectFromSpec(dir: string, spec: ProjectSpec): Promise<XcodeProject> {\n    const xcodeprojPath = await generateXcodeProjectAsync(dir, spec);\n    return new XcodeProject(xcodeprojPath);\n  }\n\n  /**\n   * Name of the project. It should stay in sync with its filename.\n   */\n  name: string;\n\n  /**\n   * Root directory of the project and at which the `.xcodeproj` file is placed.\n   */\n  rootDir: string;\n\n  constructor(xcodeprojPath: string) {\n    this.name = path.basename(xcodeprojPath, '.xcodeproj');\n    this.rootDir = path.dirname(xcodeprojPath);\n  }\n\n  /**\n   * Returns output path to where the `.xcframework` file will be stored after running `buildXcframeworkAsync`.\n   */\n  getXcframeworkPath(): string {\n    return path.join(this.rootDir, `${this.name}.xcframework`);\n  }\n\n  /**\n   * Builds `.framework` for given target name and flavor specifying,\n   * configuration, the SDK and a list of architectures to compile against.\n   */\n  async buildFrameworkAsync(\n    target: string,\n    flavor: Flavor,\n    options?: XcodebuildSettings\n  ): Promise<Framework> {\n    await this.xcodebuildAsync(\n      [\n        'build',\n        '-project',\n        `${this.name}.xcodeproj`,\n        '-scheme',\n        `${target}_iOS`,\n        '-configuration',\n        flavor.configuration,\n        '-sdk',\n        flavor.sdk,\n        ...spreadArgs('-arch', flavor.archs),\n        '-derivedDataPath',\n        SHARED_DERIVED_DATA_DIR,\n      ],\n      options\n    );\n\n    const frameworkPath = flavorToFrameworkPath(target, flavor);\n    const stat = await fs.lstat(path.join(frameworkPath, target));\n\n    // Remove `Headers` as each our module contains headers as part of the provided source code\n    // and CocoaPods exposes them through HEADER_SEARCH_PATHS either way.\n    await fs.remove(path.join(frameworkPath, 'Headers'));\n\n    // `_CodeSignature` is apparently generated only for simulator, afaik we don't need it.\n    await fs.remove(path.join(frameworkPath, '_CodeSignature'));\n\n    return {\n      target,\n      flavor,\n      frameworkPath,\n      binarySize: stat.size,\n    };\n  }\n\n  /**\n   * Builds universal `.xcframework` from given frameworks.\n   */\n  async buildXcframeworkAsync(\n    frameworks: Framework[],\n    options?: XcodebuildSettings\n  ): Promise<string> {\n    const frameworkPaths = frameworks.map((framework) => framework.frameworkPath);\n    const outputPath = this.getXcframeworkPath();\n\n    await fs.remove(outputPath);\n\n    await this.xcodebuildAsync(\n      ['-create-xcframework', ...spreadArgs('-framework', frameworkPaths), '-output', outputPath],\n      options\n    );\n    return outputPath;\n  }\n\n  /**\n   * Removes `.xcframework` artifact produced by `buildXcframeworkAsync`.\n   */\n  async cleanXcframeworkAsync(): Promise<void> {\n    await fs.remove(this.getXcframeworkPath());\n  }\n\n  /**\n   * Generic function spawning `xcodebuild` process.\n   */\n  async xcodebuildAsync(args: string[], settings?: XcodebuildSettings) {\n    // `xcodebuild` writes error details to stdout but we don't want to pollute our output if nothing wrong happens.\n    // Spawn it quietly, pipe stderr to stdout and pass it to the current process stdout only when it fails.\n    const finalArgs = ['-quiet', ...args, '2>&1'];\n\n    if (settings) {\n      finalArgs.unshift(\n        ...Object.entries(settings).map(([key, value]) => {\n          return `${key}=${parseXcodeSettingsValue(value)}`;\n        })\n      );\n    }\n    try {\n      await spawnAsync('xcodebuild', finalArgs, {\n        cwd: this.rootDir,\n        shell: true,\n        stdio: ['ignore', 'pipe', 'inherit'],\n      });\n    } catch (e) {\n      // Print formatted Xcode logs (merged from stdout and stderr).\n      process.stdout.write(formatXcodeBuildOutput(e.stdout));\n      throw e;\n    }\n  }\n\n  /**\n   * Cleans shared derived data directory.\n   */\n  static async cleanBuildFolderAsync(): Promise<void> {\n    await fs.remove(SHARED_DERIVED_DATA_DIR);\n  }\n}\n\n/**\n * Returns a path to the prebuilt framework for given flavor.\n */\nfunction flavorToFrameworkPath(target: string, flavor: Flavor): string {\n  return path.join(PRODUCTS_DIR, `${flavor.configuration}-${flavor.sdk}`, `${target}.framework`);\n}\n\n/**\n * Spreads given args under specific flag.\n * Example: `spreadArgs('-arch', ['arm64', 'x86_64'])` returns `['-arch', 'arm64', '-arch', 'x86_64']`\n */\nfunction spreadArgs(argName: string, args: string[]): string[] {\n  return ([] as string[]).concat(...args.map((arg) => [argName, arg]));\n}\n\n/**\n * Converts boolean values to its Xcode build settings format. Value of other type just passes through.\n */\nfunction parseXcodeSettingsValue(value: string | boolean): string {\n  if (typeof value === 'boolean') {\n    return value ? 'YES' : 'NO';\n  }\n  return value;\n}\n"]}