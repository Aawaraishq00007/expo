{"version":3,"file":"Prebuilder.js","sourceRoot":"","sources":["../../src/prebuilds/Prebuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs-extra';\nimport chalk from 'chalk';\nimport glob from 'glob-promise';\n\nimport logger from '../Logger';\nimport XcodeProject from './XcodeProject';\nimport {\n  createSpecFromPodspecAsync,\n  generateXcodeProjectAsync,\n  INFO_PLIST_FILENAME,\n} from './XcodeGen';\nimport { Flavor, Framework, XcodebuildSettings } from './XcodeProject.types';\nimport { Package } from '../Packages';\nimport { IOS_DIR } from '../Constants';\n\nconst PODS_DIR = path.join(IOS_DIR, 'Pods');\n\n// We will be increasing this list slowly. Once all are enabled,\n// find a better way to ignore some packages that shouldn't be prebuilt (like interfaces).\nexport const PACKAGES_TO_PREBUILD = [\n  '@unimodules/core',\n  '@unimodules/react-native-adapter',\n  // 'expo-ads-admob',\n  // 'expo-ads-facebook',\n  // 'expo-analytics-amplitude',\n  // 'expo-analytics-segment',\n  // 'expo-app-auth',\n  // 'expo-apple-authentication',\n  // 'expo-application',\n  'expo-av',\n  // 'expo-background-fetch',\n  'expo-barcode-scanner',\n  // 'expo-battery',\n  // 'expo-blur',\n  'expo-branch',\n  // 'expo-brightness',\n  // 'expo-calendar',\n  'expo-camera',\n  // 'expo-cellular',\n  // 'expo-constants',\n  'expo-contacts',\n  // 'expo-crypto',\n  // 'expo-device',\n  // 'expo-document-picker',\n  // 'expo-error-recovery',\n  'expo-face-detector',\n  'expo-facebook',\n  'expo-file-system',\n  // 'expo-firebase-analytics',\n  // 'expo-firebase-core',\n  // 'expo-font',\n  'expo-gl-cpp',\n  'expo-gl',\n  'expo-google-sign-in',\n  // 'expo-haptics',\n  // 'expo-image-loader',\n  // 'expo-image-manipulator',\n  // 'expo-image-picker',\n  // 'expo-keep-awake',\n  // 'expo-linear-gradient',\n  // 'expo-local-authentication',\n  // 'expo-localization',\n  'expo-location',\n  // 'expo-mail-composer',\n  'expo-media-library',\n  // 'expo-network',\n  'expo-notifications',\n  // 'expo-permissions',\n  'expo-print',\n  // 'expo-screen-capture',\n  // 'expo-screen-orientation',\n  // 'expo-secure-store',\n  'expo-sensors',\n  // 'expo-sharing',\n  // 'expo-sms',\n  // 'expo-speech',\n  'expo-splash-screen',\n  // 'expo-sqlite',\n  // 'expo-store-review',\n  'expo-structured-headers',\n  // 'expo-task-manager',\n  'expo-updates',\n  // 'expo-video-thumbnails',\n  // 'expo-web-browser',\n  // 'unimodules-app-loader',\n];\n\nexport function canPrebuildPackage(pkg: Package): boolean {\n  return PACKAGES_TO_PREBUILD.includes(pkg.packageName);\n}\n\n/**\n * Automatically generates `.xcodeproj` from podspec and build frameworks.\n */\nexport async function prebuildPackageAsync(\n  pkg: Package,\n  settings?: XcodebuildSettings\n): Promise<void> {\n  if (canPrebuildPackage(pkg)) {\n    const xcodeProject = await generateXcodeProjectSpecAsync(pkg);\n    await buildFrameworksForProjectAsync(xcodeProject, settings);\n    await cleanTemporaryFilesAsync(xcodeProject);\n  }\n}\n\nexport async function buildFrameworksForProjectAsync(\n  xcodeProject: XcodeProject,\n  settings?: XcodebuildSettings\n) {\n  const flavors: Flavor[] = [\n    {\n      configuration: 'Release',\n      sdk: 'iphoneos',\n      archs: ['arm64'],\n    },\n    {\n      configuration: 'Release',\n      sdk: 'iphonesimulator',\n      archs: ['x86_64', 'arm64'],\n    },\n  ];\n\n  // Builds frameworks from flavors.\n  const frameworks: Framework[] = [];\n  for (const flavor of flavors) {\n    logger.log('   Building framework for %s', chalk.yellow(flavor.sdk));\n\n    frameworks.push(\n      await xcodeProject.buildFrameworkAsync(xcodeProject.name, flavor, {\n        ONLY_ACTIVE_ARCH: false,\n        BITCODE_GENERATION_MODE: 'bitcode',\n        BUILD_LIBRARY_FOR_DISTRIBUTION: true,\n        DEAD_CODE_STRIPPING: true,\n        DEPLOYMENT_POSTPROCESSING: true,\n        STRIP_INSTALLED_PRODUCT: true,\n        STRIP_STYLE: 'non-global',\n        COPY_PHASE_STRIP: true,\n        GCC_GENERATE_DEBUGGING_SYMBOLS: false,\n        ...settings,\n      })\n    );\n  }\n\n  // Print binary sizes\n  const binarySizes = frameworks.map((framework) =>\n    chalk.magenta((framework.binarySize / 1024 / 1024).toFixed(2) + 'MB')\n  );\n  logger.log('   Binary sizes:', binarySizes.join(', '));\n\n  logger.log('   Merging frameworks to', chalk.magenta(`${xcodeProject.name}.xcframework`));\n\n  // Merge frameworks into universal xcframework\n  await xcodeProject.buildXcframeworkAsync(frameworks, settings);\n}\n\n/**\n * Removes all temporary files that we generated in order to create `.xcframework` file.\n */\nexport async function cleanTemporaryFilesAsync(xcodeProject: XcodeProject) {\n  logger.log('   Cleaning up temporary files');\n\n  const pathsToRemove = [`${xcodeProject.name}.xcodeproj`, INFO_PLIST_FILENAME];\n\n  await Promise.all(\n    pathsToRemove.map((pathToRemove) => fs.remove(path.join(xcodeProject.rootDir, pathToRemove)))\n  );\n}\n\n/**\n * Generates Xcode project based on the podspec of given package.\n */\nexport async function generateXcodeProjectSpecAsync(pkg: Package): Promise<XcodeProject> {\n  const podspec = await pkg.getPodspecAsync();\n\n  if (!podspec) {\n    throw new Error('Given package is not an iOS project.');\n  }\n\n  logger.log('   Generating Xcode project spec');\n\n  const spec = await createSpecFromPodspecAsync(podspec, async (dependencyName) => {\n    const frameworkPath = await findFrameworkForProjectAsync(dependencyName);\n\n    if (frameworkPath) {\n      return {\n        framework: frameworkPath,\n        link: false,\n        embed: false,\n      };\n    }\n    return null;\n  });\n\n  const xcodeprojPath = await generateXcodeProjectAsync(\n    path.join(pkg.path, pkg.iosSubdirectory),\n    spec\n  );\n  return await XcodeProject.fromXcodeprojPathAsync(xcodeprojPath);\n}\n\n/**\n * Removes prebuilt `.xcframework` files for given packages.\n */\nexport async function cleanFrameworksAsync(packages: Package[]) {\n  for (const pkg of packages) {\n    const xcFrameworkFilename = `${pkg.podspecName}.xcframework`;\n    const xcFrameworkPath = path.join(pkg.path, pkg.iosSubdirectory, xcFrameworkFilename);\n\n    if (await fs.pathExists(xcFrameworkPath)) {\n      await fs.remove(xcFrameworkPath);\n    }\n  }\n}\n\n/**\n * Checks whether given project name has a framework (GoogleSignIn, FBAudience) and returns its path.\n */\nasync function findFrameworkForProjectAsync(projectName: string): Promise<string | null> {\n  const searchNames = new Set([\n    projectName,\n    projectName.replace(/\\/+/, ''), // Firebase/MLVision -> FirebaseMLVision\n    projectName.replace(/\\/+.*$/, ''), // FacebookSDK/* -> FacebookSDK\n  ]);\n\n  for (const name of searchNames) {\n    const cwd = path.join(PODS_DIR, name);\n\n    if (await fs.pathExists(cwd)) {\n      const paths = await glob(`**/*.framework`, {\n        cwd,\n      });\n\n      if (paths.length > 0) {\n        return path.join(cwd, paths[0]);\n      }\n    }\n  }\n  return null;\n}\n"]}