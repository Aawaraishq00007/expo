{"version":3,"file":"XcodeGen.js","sourceRoot":"","sources":["../../src/prebuilds/XcodeGen.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs-extra';\nimport semver from 'semver';\n\nimport { arrayize, spawnAsync } from '../Utils';\nimport { EXPOTOOLS_DIR, IOS_DIR } from '../Constants';\nimport { Podspec } from '../CocoaPods';\nimport {\n  ProjectSpec,\n  ProjectSpecDependency,\n  ProjectSpecPlatform,\n  XcodeConfig,\n} from './XcodeGen.types';\n\nconst PODS_DIR = path.join(IOS_DIR, 'Pods');\nconst PODS_PUBLIC_HEADERS_DIR = path.join(PODS_DIR, 'Headers', 'Public');\nconst PLATFORMS_MAPPING: Record<string, ProjectSpecPlatform> = {\n  ios: 'iOS',\n  osx: 'macOS',\n  macos: 'macOS',\n  tvos: 'tvOS',\n  watchos: 'watchOS',\n};\n\nexport const INFO_PLIST_FILENAME = 'Info-generated.plist';\n\n/**\n * Generates `.xcodeproj` from given project spec and saves it at given dir.\n */\nexport async function generateXcodeProjectAsync(dir: string, spec: ProjectSpec): Promise<string> {\n  const specPath = path.join(dir, `${spec.name}.spec.json`);\n\n  // Save the spec to the file so `xcodegen` can use it.\n  await fs.outputJSON(specPath, spec, {\n    spaces: 2,\n  });\n\n  // Generate `.xcodeproj` from given spec. The binary is provided by `@expo/xcodegen` package.\n  await spawnAsync('yarn', ['--silent', 'run', 'xcodegen', '--quiet', '--spec', specPath], {\n    cwd: EXPOTOOLS_DIR,\n    stdio: 'inherit',\n  });\n\n  // Remove temporary spec file.\n  await fs.remove(specPath);\n\n  return path.join(dir, `${spec.name}.xcodeproj`);\n}\n\n/**\n * Creates `xcodegen` spec from the podspec. It's very naive, but covers all our cases so far.\n */\nexport async function createSpecFromPodspecAsync(\n  podspec: Podspec,\n  dependencyResolver: (dependencyName: string) => Promise<ProjectSpecDependency | null>\n): Promise<ProjectSpec> {\n  const platforms = Object.keys(podspec.platforms);\n  const deploymentTarget = platforms.reduce((acc, platform) => {\n    acc[PLATFORMS_MAPPING[platform]] = podspec.platforms[platform];\n    return acc;\n  }, {} as Record<ProjectSpecPlatform, string>);\n\n  const dependenciesNames = podspec.dependencies ? Object.keys(podspec.dependencies) : [];\n\n  const dependencies = (\n    await Promise.all(dependenciesNames.map((dependencyName) => dependencyResolver(dependencyName)))\n  ).filter(Boolean) as ProjectSpecDependency[];\n\n  const bundleId = podNameToBundleId(podspec.name);\n\n  return {\n    name: podspec.name,\n    targets: {\n      [podspec.name]: {\n        type: 'framework',\n        platform: platforms.map((platform) => PLATFORMS_MAPPING[platform]),\n        sources: [\n          {\n            path: '',\n            name: podspec.name,\n            createIntermediateGroups: true,\n            includes: arrayize(podspec.source_files),\n            excludes: [\n              INFO_PLIST_FILENAME,\n              `${podspec.name}.spec.json`,\n              '*.xcodeproj',\n              '*.xcframework',\n              '*.podspec',\n              ...arrayize(podspec.exclude_files),\n            ],\n            compilerFlags: podspec.compiler_flags,\n          },\n        ],\n        dependencies: [\n          ...arrayize(podspec.frameworks).map((framework) => ({\n            sdk: `${framework}.framework`,\n          })),\n          ...dependencies,\n        ],\n        settings: {\n          base: mergeXcodeConfigs(podspec.pod_target_xcconfig ?? {}, {\n            MACH_O_TYPE: 'staticlib',\n          }),\n        },\n        info: {\n          path: INFO_PLIST_FILENAME,\n          properties: mergeXcodeConfigs(\n            {\n              CFBundleIdentifier: bundleId,\n              CFBundleName: podspec.name,\n              CFBundleShortVersionString: podspec.version,\n              CFBundleVersion: semver.major(podspec.version),\n            },\n            podspec.info_plist ?? {}\n          ),\n        },\n      },\n    },\n    options: {\n      minimumXcodeGenVersion: '2.18.0',\n      deploymentTarget,\n    },\n    settings: {\n      base: {\n        PRODUCT_BUNDLE_IDENTIFIER: bundleId,\n        IPHONEOS_DEPLOYMENT_TARGET: podspec.platforms.ios,\n        FRAMEWORK_SEARCH_PATHS: constructFrameworkSearchPaths(dependencies),\n        HEADER_SEARCH_PATHS: constructHeaderSearchPaths(dependenciesNames),\n\n        // Suppresses deprecation warnings coming from frameworks like OpenGLES.\n        VALIDATE_WORKSPACE_SKIPPED_SDK_FRAMEWORKS: arrayize(podspec.frameworks).join(' '),\n      },\n    },\n  };\n}\n\nfunction constructFrameworkSearchPaths(dependencies: ProjectSpecDependency[]): string {\n  const frameworks = dependencies.filter((dependency) => !!dependency.framework) as {\n    framework: string;\n  }[];\n\n  return (\n    '$(inherited) ' + frameworks.map((dependency) => path.dirname(dependency.framework)).join(' ')\n  ).trim();\n}\n\nfunction constructHeaderSearchPaths(dependencies: string[]): string {\n  // A set of pod names to include in header search paths.\n  // For simplicity, we add some more (usually transitive) than direct dependencies.\n  const podsToSearchForHeaders = new Set([\n    // Some pods' have headers at its root level (ZXingObjC and all our modules).\n    // Without this we would have to use `#import <ZXingObjC*.h>` instead of `#import <ZXingObjC/ZXingObjC*.h>`\n    '',\n\n    ...dependencies,\n\n    'DoubleConversion',\n    'React-callinvoker',\n    'React-Core',\n    'React-cxxreact',\n    'React-jsi',\n    'React-jsiexecutor',\n    'React-jsinspector',\n    'Yoga',\n    'glog',\n  ]);\n\n  // Should we add private headers too?\n  return (\n    '$(inherited) ' +\n    [...podsToSearchForHeaders]\n      .map((podName) => '\"' + path.join(PODS_PUBLIC_HEADERS_DIR, podName) + '\"')\n      .join(' ')\n  ).trim();\n}\n\n/**\n * Merges Xcode config from left to right.\n * Values containing `$(inherited)` are properly taken into account.\n */\nfunction mergeXcodeConfigs(...configs: XcodeConfig[]): XcodeConfig {\n  const result: XcodeConfig = {};\n\n  for (const config of configs) {\n    for (const key in config) {\n      const value = config[key];\n      result[key] = mergeXcodeConfigValue(result[key], value);\n    }\n  }\n  return result;\n}\n\nfunction mergeXcodeConfigValue(prevValue: string | undefined, nextValue: string): string {\n  if (prevValue && typeof prevValue === 'string' && prevValue.includes('$(inherited)')) {\n    return '$(inherited) ' + (prevValue + ' ' + nextValue).replace(/\\\\s*$\\(inherited\\)\\s*/g, ' ');\n  }\n  return nextValue;\n}\n\n/**\n * Simple conversion from pod name to framework's bundle identifier.\n */\nfunction podNameToBundleId(podName: string): string {\n  return podName\n    .replace(/^UM/, 'unimodules')\n    .replace(/^EX/, 'expo')\n    .replace(/(\\_|[^\\w\\d\\.])+/g, '.')\n    .replace(/\\.*([A-Z]+)/g, (_, p1) => `.${p1.toLowerCase()}`);\n}\n"]}