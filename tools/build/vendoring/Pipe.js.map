{"version":3,"file":"Pipe.js","sourceRoot":"","sources":["../../src/vendoring/Pipe.ts"],"names":[],"mappings":";;;;;;AACA,kDAA0B;AAE1B,uDAA+B;AAS/B;;;GAGG;AACH,MAAa,IAAI;IAIf;QACE,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;IAClC,CAAC;IAEM,mBAAmB,CAAC,gBAAwB;QACjD,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;OAsBG;IACI,QAAQ,CAAC,GAAG,KAAiC;QAClD,IAAI,eAAe,GAAa,KAAK,CAAC;QACtC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACrB,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;gBAC5B,eAAe,GAAG,IAAgB,CAAC;gBACnC,OAAO;aACR;YAED,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACvB,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAC7B,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAC7D,CAAC;gBACF,OAAO;aACR;YAED,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,KAAK,CAAC,QAAkB;QACnC,gBAAM,CAAC,KAAK,CAAC,+BAA+B,eAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACrE,gBAAM,CAAC,KAAK,CACV,GAAG,eAAK,CAAC,KAAK,CAAC,oBAAoB,CAAC,MAAM,eAAK,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,IAAI,EAAE,CAAC,EAAE,CACtF,CAAC;QACF,gBAAM,CAAC,KAAK,EAAE,CAAC;QAEf,MAAM,KAAK,GAAG,IAAI,CAAC,qBAAqB;aACrC,MAAM,CAAC,CAAC,oBAAoB,EAAE,EAAE;YAC/B,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,oBAAoB,CAAC;YACxD,IAAI,QAAQ,KAAK,KAAK,IAAI,YAAY,KAAK,KAAK,EAAE;gBAChD,OAAO,IAAI,CAAC;aACb;YAED,IAAI,QAAQ,KAAK,YAAY,EAAE;gBAC7B,OAAO,IAAI,CAAC;aACb;YAED,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;aACD,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;QAE3B,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBACzB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;aACjD;YACD,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;SACpB;IACH,CAAC;CACF;AAtFD,oBAsFC","sourcesContent":["import { Task } from './steps/Task';\nimport chalk from 'chalk';\n\nimport logger from '../Logger';\n\nexport type Platform = 'ios' | 'android' | 'all';\n\nexport type PlatformSpecificTask = {\n  task: Task;\n  platform: Platform;\n};\n\n/**\n * A simple task executor, which sets the working directory for all task and runs them one by one.\n * Moreover it can start only tasks for the selected platform.\n */\nexport class Pipe {\n  private readonly platformSpecificTasks: PlatformSpecificTask[];\n  protected workingDirectory: string | undefined;\n\n  constructor() {\n    this.platformSpecificTasks = [];\n  }\n\n  public setWorkingDirectory(workingDirectory: string): this {\n    this.workingDirectory = workingDirectory;\n    return this;\n  }\n\n  /**\n   * This method accepts two types of arguments:\n   * - string - indicates the platform on which the following tasks will be registered\n   * - task\n   *\n   * ```\n   * Pipe().addSteps(\n   *    T1,\n   *    T2,\n   *  'android',\n   *    T3A,\n   *  'ios',\n   *    T3I,\n   *  'all',\n   *    T4\n   * );\n   *\n   * will resolve to:\n   * - if platform = 'all' -> [T1, T2, T3A, T3I, T4]\n   * - if platform = 'ios' -> [T1, T2, T3I, T4]\n   * - if platform = 'android' -> [T1, T2, T3A, T4]\n   * ```\n   */\n  public addSteps(...tasks: (Task | string | Task[])[]): this {\n    let currentPlatform: Platform = 'all';\n    tasks.forEach((task) => {\n      if (typeof task === 'string') {\n        currentPlatform = task as Platform;\n        return;\n      }\n\n      if (Array.isArray(task)) {\n        this.platformSpecificTasks.push(\n          ...task.map((t) => ({ platform: currentPlatform, task: t }))\n        );\n        return;\n      }\n\n      this.platformSpecificTasks.push({ platform: currentPlatform, task });\n    });\n\n    return this;\n  }\n\n  public async start(platform: Platform) {\n    logger.debug(`Staring pipe for platform = ${chalk.green(platform)}`);\n    logger.debug(\n      `${chalk.green('<workingDirectory>')} = ${chalk.yellow(this.workingDirectory || '')}`\n    );\n    logger.debug();\n\n    const tasks = this.platformSpecificTasks\n      .filter((platformSpecificStep) => {\n        const { platform: stepPlatform } = platformSpecificStep;\n        if (platform === 'all' || stepPlatform === 'all') {\n          return true;\n        }\n\n        if (platform === stepPlatform) {\n          return true;\n        }\n\n        return false;\n      })\n      .map(({ task }) => task);\n\n    for (const task of tasks) {\n      if (this.workingDirectory) {\n        task.setWorkingDirectory(this.workingDirectory);\n      }\n      await task.start();\n    }\n  }\n}\n"]}