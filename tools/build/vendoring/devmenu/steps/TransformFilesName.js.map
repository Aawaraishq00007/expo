{"version":3,"file":"TransformFilesName.js","sourceRoot":"","sources":["../../../../src/vendoring/devmenu/steps/TransformFilesName.ts"],"names":[],"mappings":";;;;;;AAAA,mEAAkG;AAClG,kDAA0B;AAC1B,gDAAwB;AACxB,wDAA0B;AAC1B,oCAAqC;AAErC,MAAa,kBAAmB,SAAQ,6CAAqB;IAC3D,YAAY,QAA0C;QACpD,KAAK,CAAC,QAAQ,CAAC,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,OAAO;QACX,MAAM,aAAa,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAEjD,IAAI,CAAC,UAAU,CACb,WAAW,eAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,2BAA2B,eAAK,CAAC,KAAK,CACjF,IAAI,CAAC,wBAAwB,EAAE,IAAI,oBAAoB,CACxD,IAAI,eAAK,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAqB,eAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CACtF,CAAC;QAEF,MAAM,KAAK,GAAG,MAAM,iBAAS,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/D,MAAM,OAAO,CAAC,GAAG,CACf,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACjB,MAAM,QAAQ,GAAG,cAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YACtE,MAAM,MAAM,GAAG,cAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAElC,OAAO,kBAAE,CAAC,MAAM,CAAC,IAAI,EAAE,cAAI,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;QACtD,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;CACF;AAxBD,gDAwBC;AAED,SAAgB,cAAc,CAAC,EAC7B,IAAI,EACJ,OAAO,GAIR;IACC,OAAO,IAAI,kBAAkB,CAAC;QAC5B,WAAW,EAAE,cAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,IAAI,UAAU,CAAC;QACvD,IAAI;QACJ,OAAO;KACR,CAAC,CAAC;AACL,CAAC;AAZD,wCAYC","sourcesContent":["import { TransformFilesContent, FileContentTransformStepSettings } from './TransformFilesContent';\nimport chalk from 'chalk';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport { findFiles } from '../utils';\n\nexport class TransformFilesName extends TransformFilesContent {\n  constructor(settings: FileContentTransformStepSettings) {\n    super(settings);\n  }\n\n  async execute() {\n    const workDirectory = this.getWorkingDirectory();\n\n    this.logSubStep(\n      `ðŸ”„ find ${chalk.yellow(this.find.toString())} in files names in path ${chalk.green(\n        this.overrideWorkingDirectory() || '<workingDirectory>'\n      )}/${chalk.yellow(this.filePattern)} and replace with ${chalk.magenta(this.replace)}`\n    );\n\n    const files = await findFiles(workDirectory, this.filePattern);\n    await Promise.all(\n      files.map((file) => {\n        const fileName = path.basename(file).replace(this.find, this.replace);\n        const parent = path.dirname(file);\n\n        return fs.rename(file, path.join(parent, fileName));\n      })\n    );\n  }\n}\n\nexport function renameIOSFiles({\n  find,\n  replace,\n}: {\n  find: string;\n  replace: string;\n}): TransformFilesName {\n  return new TransformFilesName({\n    filePattern: path.join('ios', '**', `*${find}*.@(m|h)`),\n    find,\n    replace,\n  });\n}\n"]}