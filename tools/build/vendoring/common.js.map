{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/vendoring/common.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAE1B,uDAA+B;AAC/B,8CAA6E;AAE7E;;;GAGG;AACI,KAAK,UAAU,sBAAsB,CAC1C,KAAkB,EAClB,OAA4C;IAE5C,KAAK,MAAM,UAAU,IAAI,KAAK,EAAE;QAC9B,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,wCAA2B,CAAC,EAAE,UAAU,EAAE,GAAG,OAAO,EAAE,CAAC,CAAC;QAErF,IAAI,UAAU,KAAK,UAAU,EAAE;YAC7B,gBAAM,CAAC,GAAG,CAAC,qBAAqB,EAAE,eAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,eAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;SACzF;KACF;AACH,CAAC;AAXD,wDAWC","sourcesContent":["import chalk from 'chalk';\n\nimport logger from '../Logger';\nimport { CopyFileOptions, copyFileWithTransformsAsync } from '../Transforms';\n\n/**\n * Copies vendored files from source directory to target directory\n * with transforms applied to their content and relative path.\n */\nexport async function copyVendoredFilesAsync(\n  files: Set<string>,\n  options: Omit<CopyFileOptions, 'sourceFile'>\n): Promise<void> {\n  for (const sourceFile of files) {\n    const { targetFile } = await copyFileWithTransformsAsync({ sourceFile, ...options });\n\n    if (sourceFile !== targetFile) {\n      logger.log('ðŸ“‚ Renamed %s to %s', chalk.magenta(sourceFile), chalk.magenta(targetFile));\n    }\n  }\n}\n"]}