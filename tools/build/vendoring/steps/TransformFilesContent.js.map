{"version":3,"file":"TransformFilesContent.js","sourceRoot":"","sources":["../../../src/vendoring/steps/TransformFilesContent.ts"],"names":[],"mappings":";;;;;;AAAA,iCAA8B;AAC9B,gDAAwB;AACxB,kDAA0B;AAC1B,wDAA0B;AAC1B,oCAAqC;AASrC;;;;GAIG;AACH,MAAa,qBAAsB,SAAQ,WAAI;IAM7C,YAAY,EAAE,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,OAAO,EAAoC;QAClF,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACnC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAES,wBAAwB;QAChC,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,KAAK,CAAC,OAAO;QACX,MAAM,aAAa,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAEjD,IAAI,CAAC,UAAU,CACb,WAAW,eAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,eAAK,CAAC,KAAK,CAC7D,IAAI,CAAC,wBAAwB,EAAE,IAAI,oBAAoB,CACxD,IAAI,eAAK,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAqB,eAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CACtF,CAAC;QAEF,MAAM,KAAK,GAAG,MAAM,iBAAS,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/D,MAAM,OAAO,CAAC,GAAG,CACf,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;YACvB,MAAM,OAAO,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAChD,MAAM,kBAAkB,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YACpE,OAAO,MAAM,kBAAE,CAAC,SAAS,CAAC,IAAI,EAAE,kBAAkB,EAAE,MAAM,CAAC,CAAC;QAC9D,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;CACF;AApCD,sDAoCC;AAEY,QAAA,aAAa,GAAG,CAAC,EAC5B,WAAW,EACX,MAAM,GAKP,EAAyB,EAAE;IAC1B,OAAO,IAAI,qBAAqB,CAAC;QAC/B,WAAW,EAAE,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,cAAc,CAAC;QACvD,IAAI,EAAE,WAAW;QACjB,OAAO,EAAE,GAAG,MAAM,IAAI,WAAW,EAAE;KACpC,CAAC,CAAC;AACL,CAAC,CAAC;AAEW,QAAA,gBAAgB,GAAG,CAAC,QAGhC,EAAyB,EAAE;IAC1B,OAAO,IAAI,qBAAqB,CAAC;QAC/B,GAAG,QAAQ;QACX,WAAW,EAAE,cAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,UAAU,CAAC;KAChD,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { Task } from './Task';\nimport path from 'path';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport { findFiles } from '../utils';\n\nexport type FileContentTransformStepSettings = {\n  source?: string;\n  filePattern: string;\n  find: string;\n  replace: string;\n};\n\n/**\n * A task which will transformed files content.\n * Firstly, it's searching for all files which matched the `filePattern` in the working directory.\n * Then it'll find the provided pattern and replace it with a new value.\n */\nexport class TransformFilesContent extends Task {\n  protected readonly source?: string;\n  protected readonly filePattern: string;\n  protected readonly find: RegExp;\n  protected readonly replace: string;\n\n  constructor({ source, filePattern, find, replace }: FileContentTransformStepSettings) {\n    super();\n    this.source = source;\n    this.filePattern = filePattern;\n    this.find = new RegExp(find, 'gm');\n    this.replace = replace;\n  }\n\n  protected overrideWorkingDirectory(): string | undefined {\n    return this.source;\n  }\n\n  async execute() {\n    const workDirectory = this.getWorkingDirectory();\n\n    this.logSubStep(\n      `ðŸ”„ find ${chalk.yellow(this.find.toString())} in ${chalk.green(\n        this.overrideWorkingDirectory() || '<workingDirectory>'\n      )}/${chalk.yellow(this.filePattern)} and replace with ${chalk.magenta(this.replace)}`\n    );\n\n    const files = await findFiles(workDirectory, this.filePattern);\n    await Promise.all(\n      files.map(async (file) => {\n        const content = await fs.readFile(file, 'utf8');\n        const transformedContent = content.replace(this.find, this.replace);\n        return await fs.writeFile(file, transformedContent, 'utf8');\n      })\n    );\n  }\n}\n\nexport const prefixPackage = ({\n  packageName,\n  prefix,\n}: {\n  source?: string;\n  packageName: string;\n  prefix: string;\n}): TransformFilesContent => {\n  return new TransformFilesContent({\n    filePattern: path.join('android', '**', '*.@(java|kt)'),\n    find: packageName,\n    replace: `${prefix}.${packageName}`,\n  });\n};\n\nexport const renameIOSSymbols = (settings: {\n  find: string;\n  replace: string;\n}): TransformFilesContent => {\n  return new TransformFilesContent({\n    ...settings,\n    filePattern: path.join('ios', '**', '*.@(h|m)'),\n  });\n};\n"]}