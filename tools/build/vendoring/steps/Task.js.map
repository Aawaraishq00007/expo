{"version":3,"file":"Task.js","sourceRoot":"","sources":["../../../src/vendoring/steps/Task.ts"],"names":[],"mappings":";;;;;;AAAA,0DAAkC;AAClC,oCAAsC;AAEtC;;;GAGG;AACH,MAAsB,IAAI;IAGxB;;;OAGG;IACO,UAAU,CAAC,OAAe;QAClC,gBAAM,CAAC,IAAI,CAAC,KAAK,OAAO,EAAE,CAAC,CAAC;IAC9B,CAAC;IAED;;;OAGG;IACO,YAAY,CAAC,OAA0B;QAC/C,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC/B,gBAAM,CAAC,KAAK,CAAC,KAAK,OAAO,EAAE,CAAC,CAAC;SAC9B;aAAM;YACL,gBAAM,CAAC,KAAK,CAAC,KAAK,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;SAC7C;IACH,CAAC;IAED;;;;;OAKG;IACO,wBAAwB;QAChC,OAAO;IACT,CAAC;IAED;;OAEG;IACO,mBAAmB;QAC3B,MAAM,aAAa,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;QACtD,IAAI,aAAa,EAAE;YACjB,OAAO,kBAAU,CAAC,aAAa,CAAC,CAAC;SAClC;QAED,OAAO,kBAAU,CAAC,IAAI,CAAC,gBAAiB,CAAC,CAAC;IAC5C,CAAC;IAED;;;OAGG;IACI,mBAAmB,CAAC,gBAAwB;QACjD,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IAC3C,CAAC;IAOD;;OAEG;IACI,KAAK,CAAC,KAAK;QAChB,IAAI;YACF,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;SACtB;QAAC,OAAO,CAAC,EAAE;YACV,gBAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAChB,OAAO;SACR;IACH,CAAC;CACF;AArED,oBAqEC","sourcesContent":["import logger from '../../Logger';\nimport { toRepoPath } from '../utils';\n\n/**\n * An base class for all task.\n * It provides a simple task luncher, log utils and path to working directory.\n */\nexport abstract class Task {\n  private workingDirectory?: string;\n\n  /**\n   * Tasks can contain multiple steps. This function provides a consistent way to log information about each step.\n   * @param message\n   */\n  protected logSubStep(message: string) {\n    logger.info(`> ${message}`);\n  }\n\n  /**\n   * A function which provides a consistent way of printing debug information inside a task.\n   * @param message which will be printed using debug log level.\n   */\n  protected logDebugInfo(message: string | string[]) {\n    if (typeof message === 'string') {\n      logger.debug(`  ${message}`);\n    } else {\n      logger.debug(`  ${message.join('\\n    ')}`);\n    }\n  }\n\n  /**\n   * We want to have a way to change working directory using task's settings.\n   * For example, we could run pipe in the temp directory but one task from it in the repo.\n   * It's ignored if undefined was returned.\n   * @returns the override working directory for task.\n   */\n  protected overrideWorkingDirectory(): string | undefined {\n    return;\n  }\n\n  /**\n   * @returns the absolute path to working directory for task based on overrideWorkDirectory().\n   */\n  protected getWorkingDirectory(): string {\n    const overrideValue = this.overrideWorkingDirectory();\n    if (overrideValue) {\n      return toRepoPath(overrideValue);\n    }\n\n    return toRepoPath(this.workingDirectory!);\n  }\n\n  /**\n   * Sets the working directory for the task.\n   * @param workingDirectory\n   */\n  public setWorkingDirectory(workingDirectory: string) {\n    this.workingDirectory = workingDirectory;\n  }\n\n  /**\n   * A function which will be call in start method. The body of the task.\n   */\n  protected abstract async execute();\n\n  /**\n   * A method that starts the task. It provides error handling.\n   */\n  public async start() {\n    try {\n      await this.execute();\n    } catch (e) {\n      logger.error(e);\n      return;\n    }\n  }\n}\n"]}