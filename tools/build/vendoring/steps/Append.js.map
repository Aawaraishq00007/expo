{"version":3,"file":"Append.js","sourceRoot":"","sources":["../../../src/vendoring/steps/Append.ts"],"names":[],"mappings":";;;;;;AAAA,iCAA8B;AAC9B,kDAA0B;AAC1B,wDAA0B;AAC1B,oCAAqC;AAQrC;;GAEG;AACH,MAAa,MAAO,SAAQ,WAAI;IAK9B,YAAY,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAkB;QACzD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAES,wBAAwB;QAChC,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,KAAK,CAAC,OAAO;QACX,MAAM,aAAa,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAEjD,IAAI,CAAC,UAAU,CACb,eAAe,eAAK,CAAC,KAAK,CACxB,IAAI,CAAC,wBAAwB,EAAE,IAAI,oBAAoB,CACxD,IAAI,eAAK,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CACtC,CAAC;QAEF,MAAM,KAAK,GAAG,MAAM,iBAAS,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAE/D,MAAM,OAAO,CAAC,GAAG,CACf,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;YACvB,OAAO,MAAM,kBAAE,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAChD,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;CACF;AAjCD,wBAiCC","sourcesContent":["import { Task } from './Task';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport { findFiles } from '../utils';\n\nexport type AppendSettings = {\n  source?: string;\n  filePattern: string;\n  append: string;\n};\n\n/**\n * A task which will append to files content.\n */\nexport class Append extends Task {\n  protected readonly source?: string;\n  protected readonly filePattern: string;\n  protected readonly append: string;\n\n  constructor({ source, filePattern, append }: AppendSettings) {\n    super();\n    this.source = source;\n    this.filePattern = filePattern;\n    this.append = append;\n  }\n\n  protected overrideWorkingDirectory(): string | undefined {\n    return this.source;\n  }\n\n  async execute() {\n    const workDirectory = this.getWorkingDirectory();\n\n    this.logSubStep(\n      `âž• append to ${chalk.green(\n        this.overrideWorkingDirectory() || '<workingDirectory>'\n      )}/${chalk.yellow(this.filePattern)}`\n    );\n\n    const files = await findFiles(workDirectory, this.filePattern);\n\n    await Promise.all(\n      files.map(async (file) => {\n        return await fs.appendFile(file, this.append);\n      })\n    );\n  }\n}\n"]}