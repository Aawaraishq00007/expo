{"version":3,"file":"CopyFiles.js","sourceRoot":"","sources":["../../../src/vendoring/steps/CopyFiles.ts"],"names":[],"mappings":";;;;;;AAAA,iCAA8B;AAC9B,gDAAwB;AACxB,kDAA0B;AAC1B,wDAA0B;AAC1B,oCAAiD;AASjD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCG;AACH,MAAa,SAAU,SAAQ,WAAI;IAMjC;;;OAGG;IACH,YAAY,EAAE,IAAI,EAAE,YAAY,EAAE,WAAW,EAAE,EAAE,EAAqB;QACpE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,EAAE,GAAG,kBAAU,CAAC,EAAE,CAAC,CAAC;QACzB,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;YACnC,IAAI,CAAC,WAAW,GAAG,CAAC,WAAW,CAAC,CAAC;SAClC;aAAM;YACL,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;SAChC;IACH,CAAC;IAES,wBAAwB;QAChC,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,KAAK,CAAC,OAAO;QACX,MAAM,aAAa,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAEjD,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,WAAW,EAAE;YACtC,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY;gBAC/B,CAAC,CAAC,cAAI,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,YAAY,CAAC;gBAC7C,CAAC,CAAC,aAAa,CAAC;YAElB,IAAI,CAAC,UAAU,CACb,WAAW,eAAK,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,oBAAoB,CAAC,IAAI,eAAK,CAAC,KAAK,CACtE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CACjD,GAAG,eAAK,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,eAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAC3D,CAAC;YAEF,MAAM,KAAK,GAAG,MAAM,iBAAS,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAChD,MAAM,OAAO,CAAC,GAAG,CACf,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;gBACvB,MAAM,gBAAgB,GAAG,cAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBACtD,MAAM,mBAAmB,GAAG,cAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAAC;gBAEjE,MAAM,kBAAE,CAAC,MAAM,CAAC,cAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBACnD,OAAO,MAAM,kBAAE,CAAC,IAAI,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;YAClD,CAAC,CAAC,CACH,CAAC;SACH;IACH,CAAC;CACF;AApDD,8BAoDC","sourcesContent":["import { Task } from './Task';\nimport path from 'path';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport { toRepoPath, findFiles } from '../utils';\n\nexport type CopyFilesSettings = {\n  from?: string;\n  subDirectory?: string;\n  filePattern: string | string[];\n  to: string;\n};\n\n/**\n *  A task which will copy files from `workingDirectory()/subDirectory/filePatterns` to the provided path.\n *\n * It's searching for file names which match `filePatterns` and then it copies them into `to/<matched_part_of_file_name>`.\n * So the `subDirectory` part won't be copied.\n *\n * If for this file structure:\n *\n * ```\n * android/\n *   src/\n *     main.java\n *   lib/\n *     lib.java\n * ```\n *\n * you runs CopyFiles with:\n * ```\n * {\n *   from: 'android',\n *   subDirectory: 'src|lib',\n *   to: 'copied',\n *   filePatterns: '*'\n * }\n * ```\n * you gets:\n * ```\n * android/\n *   src/\n *     main.java\n *   lib/\n *     lib.java\n * lib/\n *   main.java\n *   lib.java\n * ```\n */\nexport class CopyFiles extends Task {\n  private from?: string;\n  private subDirectory?: string;\n  private readonly filePattern: string[];\n  private readonly to: string;\n\n  /**\n   * Using `from` key, you can override the work directory.\n   * @param settings\n   */\n  constructor({ from, subDirectory, filePattern, to }: CopyFilesSettings) {\n    super();\n    this.from = from;\n    this.subDirectory = subDirectory;\n    this.to = toRepoPath(to);\n    if (typeof filePattern === 'string') {\n      this.filePattern = [filePattern];\n    } else {\n      this.filePattern = filePattern;\n    }\n  }\n\n  protected overrideWorkingDirectory(): string | undefined {\n    return this.from;\n  }\n\n  async execute() {\n    const workDirectory = this.getWorkingDirectory();\n\n    for (const pattern of this.filePattern) {\n      const subPath = this.subDirectory\n        ? path.join(workDirectory, this.subDirectory)\n        : workDirectory;\n\n      this.logSubStep(\n        `üìù copy ${chalk.green(this.from || '<workingDirectory>')}/${chalk.green(\n          this.subDirectory ? this.subDirectory + '/' : ''\n        )}${chalk.yellow(pattern)} into ${chalk.magenta(this.to)}`\n      );\n\n      const files = await findFiles(subPath, pattern);\n      await Promise.all(\n        files.map(async (file) => {\n          const relativeFilePath = path.relative(subPath, file);\n          const destinationFullPath = path.join(this.to, relativeFilePath);\n\n          await fs.mkdirs(path.dirname(destinationFullPath));\n          return await fs.copy(file, destinationFullPath);\n        })\n      );\n    }\n  }\n}\n"]}