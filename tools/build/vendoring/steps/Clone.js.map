{"version":3,"file":"Clone.js","sourceRoot":"","sources":["../../../src/vendoring/steps/Clone.ts"],"names":[],"mappings":";;;;;;AAAA,iCAA8B;AAC9B,wDAA0B;AAC1B,kDAA0B;AAC1B,oEAA2C;AAmB3C;;GAEG;AACH,MAAa,KAAM,SAAQ,WAAI;IAK7B,YAAY,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,OAAO,EAAqB;QAC7D,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAES,wBAAwB;QAChC,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,OAAO;QACX,MAAM,aAAa,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAEjD,IAAI,CAAC,UAAU,CACb,aAAa,eAAK,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,EAAE,IAAI,oBAAoB,CAAC,EAAE,CACrF,CAAC;QACF,MAAM,kBAAE,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAE/B,IAAI,CAAC,UAAU,CACb,iBAAiB,eAAK,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,eAAK,CAAC,MAAM,CACzD,IAAI,CAAC,wBAAwB,EAAE,IAAI,oBAAoB,CACxD,EAAE,CACJ,CAAC;QAEF,MAAM,cAAc,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAC7C,IAAI,CAAC,YAAY,CAAC,iBAAiB,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC/D,MAAM,qBAAU,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,GAAG,cAAc,EAAE,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC,CAAC;QAE/E,IAAI,QAAQ,IAAI,IAAI,CAAC,OAAO,EAAE;YAC5B,IAAI,CAAC,YAAY,CAAC,oBAAoB,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;YAC7D,MAAM,qBAAU,CAAC,KAAK,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,EAAE,aAAa,EAAE,CAAC,CAAC;SACpF;IACH,CAAC;IAED,cAAc;QACZ,0EAA0E;QAC1E,MAAM,IAAI,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;QAC9B,IAAI,QAAQ,IAAI,IAAI,CAAC,OAAO,EAAE;YAC5B,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SAC5C;aAAM,IAAI,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE;YAChC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;SACzC;aAAM,IAAI,QAAQ,IAAI,IAAI,CAAC,OAAO,EAAE;YACnC,OAAO,EAAE,CAAC;SACX;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AApDD,sBAoDC","sourcesContent":["import { Task } from './Task';\nimport fs from 'fs-extra';\nimport chalk from 'chalk';\nimport spawnAsync from '@expo/spawn-async';\n\ntype CloneSettings =\n  | {\n      branch: string;\n    }\n  | {\n      tag: string;\n    }\n  | {\n      commit: string;\n    }\n  | {};\n\nexport type CloneRepoSettings = {\n  url: string;\n  destination?: string;\n} & CloneSettings;\n\n/**\n * A task which will clone repository into the provided destination or into the working directory.\n */\nexport class Clone extends Task {\n  private readonly url: string;\n  private readonly options: CloneSettings;\n  private destination?: string;\n\n  constructor({ url, destination, ...options }: CloneRepoSettings) {\n    super();\n    this.url = url;\n    this.destination = destination;\n    this.options = options;\n  }\n\n  protected overrideWorkingDirectory(): string | undefined {\n    return this.destination;\n  }\n\n  async execute() {\n    const workDirectory = this.getWorkingDirectory();\n\n    this.logSubStep(\n      `ðŸ§¹ remove ${chalk.yellow(this.overrideWorkingDirectory() || '<workingDirectory>')}`\n    );\n    await fs.remove(workDirectory);\n\n    this.logSubStep(\n      `ðŸ“© clone repo ${chalk.green(this.url)} into ${chalk.yellow(\n        this.overrideWorkingDirectory() || '<workingDirectory>'\n      )}`\n    );\n\n    const cloneArguments = this.cloneArguments();\n    this.logDebugInfo(`run git clone ${cloneArguments.join(' ')}`);\n    await spawnAsync('git', ['clone', ...cloneArguments, this.url, workDirectory]);\n\n    if ('commit' in this.options) {\n      this.logDebugInfo(`run git checkout ${this.options.commit}`);\n      await spawnAsync('git', ['checkout', this.options.commit], { cwd: workDirectory });\n    }\n  }\n\n  cloneArguments(): string[] {\n    // if a branch or tag was provided, we don't need to clone the whole repo.\n    const args = ['--depth', '1'];\n    if ('branch' in this.options) {\n      args.push('--branch', this.options.branch);\n    } else if ('tag' in this.options) {\n      args.push('--branch', this.options.tag);\n    } else if ('commit' in this.options) {\n      return [];\n    }\n    return args;\n  }\n}\n"]}