{"version":3,"file":"IosVendoring.js","sourceRoot":"","sources":["../../src/vendoring/IosVendoring.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAC1B,wDAA0B;AAC1B,gEAAgC;AAChC,wDAAgC;AAChC,gDAAwB;AAExB,4CAAiE;AACjE,4CAAuC;AACvC,uDAA+B;AAC/B,oCAA4C;AAC5C,qCAAkD;AAG3C,KAAK,UAAU,WAAW,CAC/B,eAAuB,EACvB,eAAuB,EACvB,SAAuC,EAAE;;IAEzC,MAAM,CAAC,WAAW,CAAC,GAAG,MAAM,sBAAI,CAAC,cAAc,EAAE;QAC/C,GAAG,EAAE,eAAe;KACrB,CAAC,CAAC;IAEH,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;KAC9C;IAED,MAAM,OAAO,GAAG,MAAM,4BAAgB,CAAC,cAAI,CAAC,IAAI,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC,CAAC;IAEhF,uDAAuD;IACvD,MAAM,aAAa,GAAI,EAAe,CAAC,MAAM,CAC3C,OAAO,CAAC,YAAY,cACpB,OAAO,CAAC,GAAG,0CAAE,YAAY,mCAAI,EAAE,QAC/B,OAAO,CAAC,cAAc,mCAAI,EAAE,CAC7B,CAAC;IACF,MAAM,KAAK,GAAG,MAAM,wBAAgB,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;IAErE,MAAM,+BAAsB,CAAC,KAAK,EAAE;QAClC,eAAe;QACf,eAAe;QACf,UAAU,QAAE,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,UAAU,mCAAI,EAAE;KACrC,CAAC,CAAC;IAEH,iGAAiG;IACjG,gFAAgF;IAChF,MAAA,MAAM,CAAC,aAAa,+CAApB,MAAM,EAAiB,OAAO,EAAE;IAEhC,2EAA2E;IAC3E,4EAA4E;IAC5E,MAAM,eAAe,GAAG,WAAW,GAAG,OAAO,CAAC;IAC9C,MAAM,kBAAE,CAAC,UAAU,CAAC,cAAI,CAAC,IAAI,CAAC,eAAe,EAAE,eAAe,CAAC,EAAE,OAAO,EAAE;QACxE,MAAM,EAAE,CAAC;KACV,CAAC,CAAC;IAEH,gBAAM,CAAC,GAAG,CAAC,kBAAkB,EAAE,eAAK,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;IAE/D,IAAI,MAAM,0BAA0B,EAAE,EAAE;QACtC,gBAAM,CAAC,GAAG,CAAC,6BAA6B,EAAE,eAAK,CAAC,OAAO,CAAC,mBAAO,CAAC,CAAC,CAAC;QAClE,MAAM,2BAAe,CAAC,mBAAO,EAAE;YAC7B,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;KACJ;AACH,CAAC;AAhDD,kCAgDC;AAED;;GAEG;AACH,KAAK,UAAU,0BAA0B;IACvC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE;QACnB,OAAO,IAAI,CAAC;KACb;IACD,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,kBAAQ,CAAC,MAAM,CAAC;QAC1C;YACE,IAAI,EAAE,SAAS;YACf,IAAI,EAAE,WAAW;YACjB,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,gCAAgC;SAC1C;KACF,CAAC,CAAC;IACH,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs-extra';\nimport glob from 'glob-promise';\nimport inquirer from 'inquirer';\nimport path from 'path';\n\nimport { podInstallAsync, readPodspecAsync } from '../CocoaPods';\nimport { IOS_DIR } from '../Constants';\nimport logger from '../Logger';\nimport { searchFilesAsync } from '../Utils';\nimport { copyVendoredFilesAsync } from './common';\nimport { VendoringModuleConfig } from './types';\n\nexport async function vendorAsync(\n  sourceDirectory: string,\n  targetDirectory: string,\n  config: VendoringModuleConfig['ios'] = {}\n): Promise<void> {\n  const [podspecFile] = await glob('**/*.podspec', {\n    cwd: sourceDirectory,\n  });\n\n  if (!podspecFile) {\n    throw new Error('Missing `*.podspec` file!');\n  }\n\n  const podspec = await readPodspecAsync(path.join(sourceDirectory, podspecFile));\n\n  // Get a list of source files specified by the podspec.\n  const filesPatterns = ([] as string[]).concat(\n    podspec.source_files,\n    podspec.ios?.source_files ?? [],\n    podspec.preserve_paths ?? []\n  );\n  const files = await searchFilesAsync(sourceDirectory, filesPatterns);\n\n  await copyVendoredFilesAsync(files, {\n    sourceDirectory,\n    targetDirectory,\n    transforms: config?.transforms ?? {},\n  });\n\n  // We may need to transform the podspec as well. As we have an access to its JSON representation,\n  // it seems better to modify the object directly instead of string-transforming.\n  config.mutatePodspec?.(podspec);\n\n  // Save the dynamic ruby podspec as a static JSON file, so there is no need\n  // to copy `package.json` files, which are often being read by the podspecs.\n  const podspecJsonFile = podspecFile + '.json';\n  await fs.outputJSON(path.join(targetDirectory, podspecJsonFile), podspec, {\n    spaces: 2,\n  });\n\n  logger.log('üìÑ Generating %s', chalk.magenta(podspecJsonFile));\n\n  if (await promptToReinstallPodsAsync()) {\n    logger.log('‚ôªÔ∏è  Reinstalling pods at %s', chalk.magenta(IOS_DIR));\n    await podInstallAsync(IOS_DIR, {\n      noRepoUpdate: true,\n    });\n  }\n}\n\n/**\n * Asks whether to reinstall pods.\n */\nasync function promptToReinstallPodsAsync(): Promise<boolean> {\n  if (!process.env.CI) {\n    return true;\n  }\n  const { reinstall } = await inquirer.prompt([\n    {\n      type: 'confirm',\n      name: 'reinstall',\n      prefix: '‚ùî',\n      message: 'Do you want to reinstall pods?',\n    },\n  ]);\n  return reinstall;\n}\n"]}