{"version":3,"file":"Formatter.js","sourceRoot":"","sources":["../src/Formatter.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport chalk from 'chalk';\nimport terminalLink from 'terminal-link';\n\nimport { GitLog, GitFileLog } from './Git';\n\nconst { white, cyan, red, green, yellow, blue, gray, dim, reset } = chalk;\n\n/**\n * Uses `terminal-link` to create clickable link in the terminal.\n * If the terminal doesn't support this feature, fallback just to provided text, it would look ugly on the CI.\n */\nexport function link(text: string, url: string) {\n  return terminalLink(text, url, { fallback: (text) => text });\n}\n\n/**\n * Formats an entry from git log.\n */\nexport function formatCommitLog(log: GitLog): string {\n  const authorName = green(log.authorName);\n  const commitHash = formatCommitHash(log.hash);\n  const title = formatCommitTitle(log.title);\n  const date = log.committerRelativeDate;\n\n  return `${commitHash} ${title} ${gray(`by ${authorName} ${date}`)}`;\n}\n\n/**\n * Formats commit title. So far it only makes closing PR number a link to the PR on GitHub.\n */\nexport function formatCommitTitle(title: string): string {\n  return title.replace(\n    /\\(#(\\d+)\\)$/g,\n    `(${blue.bold(link('#$1', 'https://github.com/expo/expo/pull/$1'))})`\n  );\n}\n\n/**\n * Formats commit hash to display it as a link pointing to the commit on GitHub.\n */\nexport function formatCommitHash(hash?: string): string {\n  if (!hash) {\n    return gray('undefined');\n  }\n  const url = `https://github.com/expo/expo/commit/${hash}`;\n  const abbreviatedHash = hash.substring(0, 6);\n\n  return yellow.bold(`(${link(abbreviatedHash, url)})`);\n}\n\n/**\n * Formats markdown changelog entry to be displayed nicely in the terminal.\n * Replaces links to terminal chars sequence that prints clickable text pointing to given URL.\n */\nexport function formatChangelogEntry(entry: string): string {\n  return entry\n    .replace(/\\[(#\\d+|@\\w+)\\]\\(([^)]+?)\\)/g, blue.bold(link('$1', '$2')))\n    .replace(/(\\W)([_*]{2})([^\\2]*?)\\2(\\W)/g, '$1' + reset.bold('$3') + '$4')\n    .replace(/(\\W)([_*])([^\\2]*?)\\2(\\W)/g, '$1' + reset.italic('$3') + '$4')\n    .replace(/`([^`]+?)`/g, dim('$1'));\n}\n\n/**\n * Formats file log - that is a relative file path and the status (modified, added, etc.).\n */\nexport function formatFileLog(fileLog: GitFileLog): string {\n  const uri = `vscode://file/${fileLog.path}`;\n  return `${link(fileLog.relativePath, uri)} ${gray(`(${fileLog.status})`)}`;\n}\n\n/**\n * Removes all non-ascii characters (characters with unicode number between `0` and `127` are left untouched) from the string.\n * https://www.utf8-chartable.de/unicode-utf8-table.pl?number=128\n */\nexport function stripNonAsciiChars(str: string): string {\n  return str.replace(/[^\\x00-\\x7F]/gu, '');\n}\n\n/**\n * Makes Xcode logs pretty as xcpretty :)\n */\nexport function formatXcodeBuildOutput(output: string): string {\n  return output\n    .replace(/^(\\/.*)(:\\d+:\\d+): (error|warning|note)(:.*)$/gm, (_, p1, p2, p3, p4) => {\n      if (p3 === 'note') {\n        return gray.bold(p3) + white.bold(p4);\n      }\n      const relativePath = path.relative(process.cwd(), p1);\n      const logColor = p3 === 'error' ? red.bold : yellow.bold;\n\n      return cyan.bold(relativePath + p2) + ' ' + logColor(p3 + p4);\n    })\n    .replace(/^(In file included from )(\\/[^\\n]+)(:\\d+:[^\\n]*)$/gm, (_, p1, p2, p3) => {\n      const relativePath = path.relative(process.cwd(), p2);\n      return gray.italic(p1 + relativePath + p3);\n    })\n    .replace(/\\s\\^\\n(\\s[^\\n]+)?/g, green.bold('$&\\n'))\n    .replace(/\\*\\* BUILD FAILED \\*\\*/, red.bold('$&'));\n}\n"]}