{"version":3,"file":"getPackagesToCheckAsync.js","sourceRoot":"","sources":["../../src/check-packages/getPackagesToCheckAsync.ts"],"names":[],"mappings":";;;;;AAAA,kDAA0B;AAE1B,iDAAyB;AACzB,uDAA+B;AAC/B,4CAAgD;AAChD,0CAAqD;AAGrD,MAAM,EAAE,MAAM,EAAE,GAAG,eAAK,CAAC;AAEzB,KAAK,UAAU,qBAAqB,CAAC,GAAW;IAC9C,IAAI;QACF,OAAO,MAAM,aAAG,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;KACtC;IAAC,OAAO,CAAC,EAAE;QACV,gBAAM,CAAC,KAAK,CAAC,2CAA2C,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;QAClF,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAED;;GAEG;AACY,KAAK,UAAU,uBAAuB,CAAC,OAAsB;;IAC1E,MAAM,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG,OAAO,CAAC;IAEtC,MAAM,WAAW,GAAG,CAAC,MAAM,iCAAsB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;QAClE,kEAAkE;QAClE,OAAO,GAAG,CAAC,OAAO,CAAC,KAAK,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,IAAI,GAAG,EAAE;QACP,OAAO,WAAW,CAAC;KACpB;IACD,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;QAC3B,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;YAChC,OAAO,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;KACJ;IAED,MAAM,QAAQ,SAAG,OAAO,CAAC,KAAK,mCAAI,QAAQ,CAAC;IAC3C,MAAM,SAAS,GAAG,MAAM,qBAAqB,CAAC,QAAQ,CAAC,CAAC;IAExD,IAAI,CAAC,SAAS,EAAE;QACd,gBAAM,CAAC,IAAI,CACT,oCAAoC,MAAM,CAAC,QAAQ,CAAC,kCAAkC,CACvF,CAAC;QACF,OAAO,WAAW,CAAC;KACpB;IAED,gBAAM,CAAC,IAAI,CAAC,qCAAqC,4BAAgB,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IACzF,MAAM,YAAY,GAAG,MAAM,aAAG,CAAC,aAAa,CAAC,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC;IAExE,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;QAChC,MAAM,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QACpD,OAAO,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;AACL,CAAC;AAlCD,0CAkCC","sourcesContent":["import chalk from 'chalk';\n\nimport Git from '../Git';\nimport logger from '../Logger';\nimport { formatCommitHash } from '../Formatter';\nimport { getListOfPackagesAsync } from '../Packages';\nimport { ActionOptions } from './types';\n\nconst { yellow } = chalk;\n\nasync function safeGetMergeBaseAsync(ref: string): Promise<string | null> {\n  try {\n    return await Git.mergeBaseAsync(ref);\n  } catch (e) {\n    logger.error(`ðŸ›‘ Cannot get merge base for reference: ${yellow(ref)}\\n`, e.stack);\n    return null;\n  }\n}\n\n/**\n * Resolves which packages should go through checks based on given options.\n */\nexport default async function getPackagesToCheckAsync(options: ActionOptions) {\n  const { all, packageNames } = options;\n\n  const allPackages = (await getListOfPackagesAsync()).filter((pkg) => {\n    // If the package doesn't have build or test script, just skip it.\n    return pkg.scripts.build || pkg.scripts.test;\n  });\n\n  if (all) {\n    return allPackages;\n  }\n  if (packageNames.length > 0) {\n    return allPackages.filter((pkg) => {\n      return packageNames.includes(pkg.packageName);\n    });\n  }\n\n  const sinceRef = options.since ?? 'master';\n  const mergeBase = await safeGetMergeBaseAsync(sinceRef);\n\n  if (!mergeBase) {\n    logger.warn(\n      `ðŸ˜¿ Couldn't find merge base with ${yellow(sinceRef)}, falling back to all packages\\n`\n    );\n    return allPackages;\n  }\n\n  logger.info(`ðŸ˜º Using incremental checks since ${formatCommitHash(mergeBase)} commit\\n`);\n  const changedFiles = await Git.logFilesAsync({ fromCommit: mergeBase });\n\n  return allPackages.filter((pkg) => {\n    const pkgPath = pkg.path.replace(/([^\\/])$/, '$1/');\n    return changedFiles.some(({ path }) => path.startsWith(pkgPath));\n  });\n}\n"]}