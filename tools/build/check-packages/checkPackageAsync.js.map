{"version":3,"file":"checkPackageAsync.js","sourceRoot":"","sources":["../../src/check-packages/checkPackageAsync.ts"],"names":[],"mappings":";;;;;AAAA,kDAA0B;AAE1B,uDAA+B;AAG/B,oFAA4D;AAC5D,4FAAoE;AAEpE,MAAM,EAAE,KAAK,EAAE,GAAG,eAAK,CAAC;AAExB;;GAEG;AACY,KAAK,UAAU,iBAAiB,CAC7C,GAAY,EACZ,OAAsB;IAEtB,IAAI;QACF,IAAI,OAAO,CAAC,QAAQ,EAAE;YACpB,gBAAM,CAAC,IAAI,CAAC,eAAe,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;SAClE;aAAM;YACL,gBAAM,CAAC,IAAI,CAAC,eAAe,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;SACnE;QAED,MAAM,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAChD,IAAI,OAAO,CAAC,KAAK,EAAE;YACjB,MAAM,+BAAqB,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAChD,MAAM,+BAAqB,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAEhD,IAAI,OAAO,CAAC,eAAe,EAAE;gBAC3B,MAAM,mCAAyB,CAAC,GAAG,CAAC,CAAC;aACtC;SACF;QACD,IAAI,OAAO,CAAC,IAAI,EAAE;YAChB,MAAM,IAAI,GAAG,CAAC,SAAS,EAAE,OAAO,EAAE,mBAAmB,CAAC,CAAC;YACvD,IAAI,OAAO,CAAC,QAAQ,EAAE;gBACpB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;aACxB;YACD,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE;gBAClB,6BAA6B;gBAC7B,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;aAChC;YACD,MAAM,+BAAqB,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;SAChD;QACD,IAAI,OAAO,CAAC,IAAI,EAAE;YAChB,MAAM,IAAI,GAAG,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;YACrC,IAAI,OAAO,CAAC,QAAQ,EAAE;gBACpB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;aACxB;YACD,IAAI,OAAO,CAAC,OAAO,EAAE;gBACnB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACpB;YACD,MAAM,+BAAqB,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;SAChD;QACD,gBAAM,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;QAE7D,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,GAAG,CAAC,SAAS,EAAE;YACtC,OAAO,MAAM,iBAAiB,CAAC,GAAG,EAAE,EAAE,GAAG,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;SACrE;QACD,OAAO,IAAI,CAAC;KACb;IAAC,WAAM;QACN,oHAAoH;QACpH,OAAO,KAAK,CAAC;KACd;AACH,CAAC;AAnDD,oCAmDC","sourcesContent":["import chalk from 'chalk';\n\nimport logger from '../Logger';\nimport { Package } from '../Packages';\nimport { ActionOptions } from './types';\nimport runPackageScriptAsync from './runPackageScriptAsync';\nimport checkBuildUniformityAsync from './checkBuildUniformityAsync';\n\nconst { green } = chalk;\n\n/**\n * Runs package checks on given package.\n */\nexport default async function checkPackageAsync(\n  pkg: Package,\n  options: ActionOptions\n): Promise<boolean> {\n  try {\n    if (options.isPlugin) {\n      logger.info(`üîå Checking ${green.bold(pkg.packageName)} plugin`);\n    } else {\n      logger.info(`üîç Checking ${green.bold(pkg.packageName)} package`);\n    }\n\n    const args = options.isPlugin ? ['plugin'] : [];\n    if (options.build) {\n      await runPackageScriptAsync(pkg, 'clean', args);\n      await runPackageScriptAsync(pkg, 'build', args);\n\n      if (options.uniformityCheck) {\n        await checkBuildUniformityAsync(pkg);\n      }\n    }\n    if (options.test) {\n      const args = ['--watch', 'false', '--passWithNoTests'];\n      if (options.isPlugin) {\n        args.unshift('plugin');\n      }\n      if (process.env.CI) {\n        // Limit to one worker on CIs\n        args.push('--maxWorkers', '1');\n      }\n      await runPackageScriptAsync(pkg, 'test', args);\n    }\n    if (options.lint) {\n      const args = ['--max-warnings', '0'];\n      if (options.isPlugin) {\n        args.unshift('plugin');\n      }\n      if (options.fixLint) {\n        args.push('--fix');\n      }\n      await runPackageScriptAsync(pkg, 'lint', args);\n    }\n    logger.log(`‚ú® ${green.bold(pkg.packageName)} checks passed`);\n\n    if (!options.isPlugin && pkg.hasPlugin) {\n      return await checkPackageAsync(pkg, { ...options, isPlugin: true });\n    }\n    return true;\n  } catch {\n    // runPackageScriptAsync is intentionally written to handle errors and make it safe to suppress errors in the caller\n    return false;\n  }\n}\n"]}