{"version":3,"file":"runPackageScriptAsync.js","sourceRoot":"","sources":["../../src/check-packages/runPackageScriptAsync.ts"],"names":[],"mappings":";;;;;AAAA,kDAA0B;AAE1B,oCAAsC;AAEtC,uDAA+B;AAE/B,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,eAAK,CAAC;AAEzC;;GAEG;AACY,KAAK,UAAU,qBAAqB,CACjD,GAAY,EACZ,UAAkB,EAClB,OAAiB,EAAE;IAEnB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;QAC5B,oCAAoC;QACpC,gBAAM,CAAC,KAAK,CAAC,SAAS,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;QAC3D,OAAO;KACR;IACD,MAAM,SAAS,GAAG,CAAC,UAAU,EAAE,GAAG,IAAI,CAAC,CAAC;IAExC,gBAAM,CAAC,GAAG,CAAC,iBAAiB,IAAI,CAAC,MAAM,CAAC,QAAQ,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAE1E,IAAI;QACF,MAAM,kBAAU,CAAC,MAAM,EAAE,SAAS,EAAE;YAClC,KAAK,EAAE,MAAM;YACb,GAAG,EAAE,GAAG,CAAC,IAAI;SACd,CAAC,CAAC;KACJ;IAAC,OAAO,KAAK,EAAE;QACd,gBAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,qCAAqC,CAAC,CAAC;QACvE,kBAAkB,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;QACpD,kBAAkB,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,EAAE,GAAG,CAAC,CAAC;QAElD,uDAAuD;QACvD,MAAM,KAAK,CAAC;KACb;AACH,CAAC;AA3BD,wCA2BC;AAED,SAAS,kBAAkB,CAAC,MAAc,EAAE,KAAa,EAAE,KAAyB;IAClF,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IAC/C,gBAAM,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AAC9E,CAAC","sourcesContent":["import chalk from 'chalk';\n\nimport { spawnAsync } from '../Utils';\nimport { Package } from '../Packages';\nimport logger from '../Logger';\n\nconst { cyan, gray, red, reset } = chalk;\n\n/**\n * Executes the specified script (defined in package.json under \"scripts\") on the given package.\n */\nexport default async function runPackageScriptAsync(\n  pkg: Package,\n  scriptName: string,\n  args: string[] = []\n): Promise<void> {\n  if (!pkg.scripts[scriptName]) {\n    // Package doesn't have such script.\n    logger.debug(`🤷‍♂️ ${cyan(scriptName)} script not found`);\n    return;\n  }\n  const spawnArgs = [scriptName, ...args];\n\n  logger.log(`🏃‍♀️ Running ${cyan.italic(`yarn ${spawnArgs.join(' ')}`)}`);\n\n  try {\n    await spawnAsync('yarn', spawnArgs, {\n      stdio: 'pipe',\n      cwd: pkg.path,\n    });\n  } catch (error) {\n    logger.error(`${cyan(scriptName)} script failed, see process output:`);\n    consoleErrorOutput(error.stdout, 'stdout >', reset);\n    consoleErrorOutput(error.stderr, 'stderr >', red);\n\n    // Rethrow error so we can count how many checks failed\n    throw error;\n  }\n}\n\nfunction consoleErrorOutput(output: string, label: string, color: (string) => string): void {\n  const lines = output.trim().split(/\\r\\n?|\\n/g);\n  logger.log(lines.map((line) => `${gray(label)} ${color(line)}`).join('\\n'));\n}\n"]}