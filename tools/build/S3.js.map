{"version":3,"file":"S3.js","sourceRoot":"","sources":["../src/S3.ts"],"names":[],"mappings":"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","sourcesContent":["import aws from 'aws-sdk';\nimport { SpawnOptions } from 'child_process';\nimport fse from 'fs-extra';\nimport os from 'os';\nimport path from 'path';\nimport { promisify } from 'util';\nimport spawnAsync from '@expo/spawn-async';\n\nexport const S3_BUCKET = 'exp-artifacts';\nexport const S3_URL = `s3://${S3_BUCKET}`;\nexport const S3_WEBSITE_PATH = `build-artifacts.exp.host`;\n\nconst fsWriteFileAsync = promisify(fse.writeFile);\n\nexport async function addRedirectAsync(from: string, to: string): Promise<void> {\n  from = from.replace(new RegExp(`^s3:\\/\\/${S3_BUCKET}\\/?`), '');\n\n  let s3 = await _s3ClientAsync();\n  await s3\n    .putObject({\n      Bucket: S3_BUCKET,\n      CacheControl: 'no-cache',\n      Key: `${to}`,\n      Body: '',\n      ACL: 'public-read',\n      WebsiteRedirectLocation: `/${from.replace(/^\\//, '')}`,\n    })\n    .promise();\n}\n\nexport function getURI(path: string): string {\n  return `http://${S3_WEBSITE_PATH}/${path.replace(/^\\//, '')}`;\n}\n\nexport async function getCachedArtifactAsync(\n  key: string,\n  destFile: string,\n  createArtifactAsync: () => Promise<void>,\n  options: { [key: string]: any } = {}\n) {\n  try {\n    await downloadAsync(key, destFile, options);\n  } catch (e) {\n    await createArtifactAsync();\n  }\n}\n\nexport async function uploadAsync(\n  sourceFile: string,\n  key: string,\n  options: { [key: string]: any } = {}\n): Promise<string> {\n  let file = fse.createReadStream(sourceFile);\n\n  let s3 = await _s3ClientAsync();\n  await s3\n    .putObject({\n      Bucket: S3_BUCKET,\n      Key: key,\n      Body: file,\n      ACL: 'public-read',\n      ...options,\n    })\n    .promise();\n\n  return `https://s3.amazonaws.com/${options.Bucket || S3_BUCKET}/${key}`;\n}\n\nexport async function downloadAsync(\n  key: string,\n  destFile: string,\n  options: { [key: string]: any } = {}\n): Promise<void> {\n  let s3 = await _s3ClientAsync();\n  return new Promise<void>((resolve, reject) => {\n    const file = fse.createWriteStream(destFile);\n\n    const reader = s3\n      .getObject({\n        Bucket: S3_BUCKET,\n        Key: key,\n        ...options,\n      })\n      .createReadStream();\n\n    file\n      .on('error', (e) => {\n        reject(e);\n      })\n      .on('close', () => {\n        resolve();\n      });\n\n    reader\n      .on('error', (e) => {\n        reject(e);\n      })\n      .pipe(file);\n  });\n}\n\nexport async function downloadFromRedirectAsync(s3Path: string, dest: string): Promise<void> {\n  let s3 = await _s3ClientAsync();\n\n  const { WebsiteRedirectLocation: redirect } = await s3\n    .headObject({\n      Bucket: S3_BUCKET,\n      Key: s3Path,\n    })\n    .promise();\n\n  if (redirect) {\n    s3Path = redirect.replace(/^\\//, '');\n  }\n\n  return new Promise<void>((resolve, reject) => {\n    let reader = s3\n      .getObject({\n        Bucket: S3_BUCKET,\n        Key: s3Path,\n      })\n      .createReadStream();\n    let file = fse.createWriteStream(dest);\n\n    file\n      .on('error', (e) => {\n        reject(e);\n      })\n      .on('close', () => {\n        resolve();\n      });\n\n    reader\n      .on('error', (e) => {\n        reject(e);\n      })\n      .pipe(file);\n  });\n}\n\nexport async function _s3ClientAsync(): Promise<aws.S3> {\n  if (\n    process.env.CI_S3_ACCESS_KEY_ID &&\n    process.env.CI_S3_SECRET_ACCESS_KEY &&\n    process.env.CI_S3_DEFAULT_REGION\n  ) {\n    aws.config.update({\n      accessKeyId: process.env.CI_S3_ACCESS_KEY_ID,\n      secretAccessKey: process.env.CI_S3_SECRET_ACCESS_KEY,\n      region: process.env.CI_S3_DEFAULT_REGION,\n    });\n  } else {\n    console.log('Defaulting to AWS credentials on developer machine.');\n  }\n\n  return new aws.S3({ region: 'us-east-1' });\n}\n\n/*\n * `directories` is an array of objects that look like:\n * {\n *   source: absolute path to a directory,\n *   destination: relative path in the resulting tarball,\n * }\n * These will all be zipped up and uploaded to the specified bucket.\n */\nexport async function uploadDirectoriesAsync(\n  bucket: string,\n  key: string,\n  directories: { source: string; destination: string; isFile?: boolean }[]\n): Promise<void> {\n  let dirname = await fse.mkdtemp(path.join(os.tmpdir(), '-pt-upload'));\n  const tmpDir = path.join(dirname, 'upload-directories-tmp');\n  const tmpTarGz = path.join(dirname, 'upload-directories-tmp-targz.tar.gz');\n  let spawnOptions: SpawnOptions = {\n    stdio: 'inherit',\n    cwd: dirname,\n  };\n\n  await spawnAsync('mkdir', ['-p', tmpDir], spawnOptions);\n\n  const excludeFile = path.join(dirname, 'excludeFile.txt');\n  for (let directory of directories) {\n    if (directory.isFile) {\n      await spawnAsync(\n        'cp',\n        [directory.source, path.join(tmpDir, directory.destination)],\n        spawnOptions\n      );\n    } else {\n      await spawnAsync('mkdir', ['-p', path.join(tmpDir, directory.destination)], spawnOptions);\n      // Exclude files that are not tracked in git\n      let gitCommand = await spawnAsync(\n        'git',\n        ['-C', '.', 'ls-files', '--exclude-standard', '-oi', '--directory'],\n        {\n          cwd: directory.source,\n        }\n      );\n      let gitCommandOutput = gitCommand.stdout.toString();\n      await fsWriteFileAsync(excludeFile, gitCommandOutput);\n      await spawnAsync(\n        'rsync',\n        [\n          '-azP',\n          '--exclude=.git',\n          `--exclude-from=${excludeFile}`,\n          '.',\n          path.join(tmpDir, directory.destination),\n        ],\n        {\n          stdio: 'inherit',\n          cwd: directory.source,\n        }\n      );\n    }\n  }\n\n  await spawnAsync(\n    'tar',\n    ['-zcvf', tmpTarGz, '-C', tmpDir, '--exclude', '__internal__', '.'],\n    spawnOptions\n  );\n\n  let s3 = await _s3ClientAsync();\n  let file = fse.createReadStream(tmpTarGz);\n  await s3\n    .putObject({\n      Bucket: bucket,\n      Key: key,\n      Body: file,\n      ACL: 'public-read',\n    })\n    .promise();\n\n  await spawnAsync('rm', [tmpTarGz], spawnOptions);\n  await spawnAsync('rm', ['-rf', tmpDir], spawnOptions);\n}\n"]}