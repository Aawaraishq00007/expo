{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/publish-packages/types.ts"],"names":[],"mappings":";;;AA+HA;;GAEG;AACH,IAAY,WAQX;AARD,WAAY,WAAW;IACrB,8BAAe,CAAA;IACf,8BAAe,CAAA;IACf,8BAAe,CAAA;IACf,oCAAqB,CAAA;IACrB,oCAAqB,CAAA;IACrB,oCAAqB,CAAA;IACrB,wCAAyB,CAAA;AAC3B,CAAC,EARW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAQtB","sourcesContent":["import { Changelog, ChangelogChanges } from '../Changelogs';\nimport { GitLog, GitFileLog, GitDirectory } from '../Git';\nimport { PackageViewType } from '../Npm';\nimport { Package } from '../Packages';\nimport { BACKUPABLE_OPTIONS_FIELDS } from './constants';\n\n/**\n * Command's options.\n */\nexport type CommandOptions = {\n  packageNames: string[];\n  prerelease: boolean | string;\n  tag: string;\n  retry: boolean;\n  commitMessage: string;\n  skipRepoChecks: boolean;\n  dry: boolean;\n\n  /* exclusive options that affect what the command does */\n  listUnpublished: boolean;\n  grantAccess: boolean;\n  checkIntegrity: boolean;\n};\n\n/**\n * CommandOptions without options that aren't backupable or just don't matter when restoring a backup.\n */\nexport type BackupableOptions = Pick<CommandOptions, typeof BACKUPABLE_OPTIONS_FIELDS[number]>;\n\n/**\n * Represents command's backup data.\n */\nexport type PublishBackupData = {\n  head: string;\n  options: BackupableOptions;\n  state: {\n    [key: string]: PublishState;\n  };\n};\n\nexport type PublishState = {\n  /**\n   * Provides informations about changelog changes that have been added since last publish.\n   */\n  changelogChanges?: ChangelogChanges;\n\n  /**\n   * Object that contains a list of commits and changed files since last publish.\n   */\n  logs?: PackageGitLogs;\n\n  /**\n   * This is the smallest possible release type that we can use.\n   * It depends only on changes within this package.\n   */\n  minReleaseType?: ReleaseType;\n\n  /**\n   * The final release type that also takes into account release types of the dependencies.\n   *\n   * Example: Package A depends only on package B and package B has no dependencies.\n   * If `minReleaseType` of package A is `patch` and `minor` in package B, then `releaseType` of A is `minor`\n   * because it's higher than `patch`.\n   */\n  releaseType?: ReleaseType;\n\n  /**\n   * The final suggested version to publish. Resolved based on `releaseType`.\n   */\n  releaseVersion?: string | null;\n\n  /**\n   * Property that is set to `true` once the parcel finishes publishing to NPM registry.\n   */\n  published?: boolean;\n};\n\nexport type BaseParcel<State> = {\n  /**\n   * Package instance that stores `package.json` object and some other useful data.\n   */\n  pkg: Package;\n\n  /**\n   * JSON object representing the result of `npm view` command run for the package.\n   * Can be `null` if package is not published yet.\n   */\n  pkgView: PackageViewType | null;\n\n  /**\n   * Changelog instance that can read and modify package changelog.\n   */\n  changelog: Changelog;\n\n  /**\n   * Instance of GitDirectory that runs all git commands from package root directory.\n   */\n  gitDir: GitDirectory;\n\n  /**\n   * Command's tasks should put their results in this object.\n   * It's being serialized and saved in the backup after each task.\n   */\n  state: State;\n};\n\n/**\n * Type of objects that are being passed through command's tasks.\n * It's kind of a wrapper for all data related to the package.\n */\nexport type Parcel = BaseParcel<PublishState> & {\n  /**\n   * Lists of parcels whose package depends on this one.\n   */\n  dependents: Parcel[];\n\n  /**\n   * Lists of parcels on which this parcel depends on.\n   */\n  dependencies: Parcel[];\n};\n\n/**\n * Array type representing arguments passed to the tasks.\n */\nexport type TaskArgs = [Parcel[], CommandOptions];\n\n/**\n * Enum of possible release types. It must be in sync with `semver.ReleaseType` union options.\n */\nexport enum ReleaseType {\n  MAJOR = 'major',\n  MINOR = 'minor',\n  PATCH = 'patch',\n  PREMAJOR = 'premajor',\n  PREMINOR = 'preminor',\n  PREPATCH = 'prepatch',\n  PRERELEASE = 'prerelease',\n}\n\n/**\n * Object containing git logs. `null` if logs couldn't be resolved due to corrupted package data.\n */\nexport type PackageGitLogs = null | {\n  commits: GitLog[];\n  files: GitFileLog[];\n};\n"]}