{"version":3,"file":"updateAndroidProjects.js","sourceRoot":"","sources":["../../../src/publish-packages/tasks/updateAndroidProjects.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAC1B,wDAA0B;AAC1B,gDAAwB;AAExB,+CAA2C;AAC3C,0DAAkC;AAClC,mDAAyC;AACzC,iDAAsD;AAEtD,uEAAoE;AAEpE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,eAAK,CAAC;AAElC;;GAEG;AACU,QAAA,qBAAqB,GAAG,IAAI,kBAAI,CAC3C;IACE,IAAI,EAAE,uBAAuB;IAC7B,SAAS,EAAE,CAAC,iDAAuB,CAAC;IACpC,YAAY,EAAE,CAAC,kCAAkC,CAAC;CACnD,EACD,KAAK,EAAE,OAAiB,EAAE,EAAE;IAC1B,gBAAM,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;IAEjD,KAAK,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,OAAO,EAAE;QACpC,MAAM,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,sBAAsB,CAAC,CAAC;QAE/D,yCAAyC;QACzC,IAAI,CAAC,CAAC,MAAM,kBAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,EAAE;YACtC,SAAS;SACV;QAED,MAAM,kBAAkB,GAAG,cAAI,CAAC,QAAQ,CAAC,oBAAQ,EAAE,UAAU,CAAC,CAAC;QAE/D,gBAAM,CAAC,GAAG,CAAC,IAAI,EAAE,YAAY,MAAM,CAAC,SAAS,CAAC,OAAO,OAAO,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;QAEpF,MAAM,+BAAkB,CAAC,UAAU,EAAE;YACnC;gBACE,yDAAyD;gBACzD,IAAI,EAAE,iDAAiD;gBACvD,WAAW,EAAE,OAAO,KAAK,CAAC,cAAc,IAAI;aAC7C;SACF,CAAC,CAAC;KACJ;AACH,CAAC,CACF,CAAC","sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { EXPO_DIR } from '../../Constants';\nimport logger from '../../Logger';\nimport { Task } from '../../TasksRunner';\nimport { transformFileAsync } from '../../Transforms';\nimport { Parcel, TaskArgs } from '../types';\nimport { selectPackagesToPublish } from './selectPackagesToPublish';\n\nconst { yellow, magenta } = chalk;\n\n/**\n * Updates version props in packages containing Android's native code.\n */\nexport const updateAndroidProjects = new Task<TaskArgs>(\n  {\n    name: 'updateAndroidProjects',\n    dependsOn: [selectPackagesToPublish],\n    filesToStage: ['packages/**/android/build.gradle'],\n  },\n  async (parcels: Parcel[]) => {\n    logger.info('\\nðŸ¤– Updating Android projects...');\n\n    for (const { pkg, state } of parcels) {\n      const gradlePath = path.join(pkg.path, 'android/build.gradle');\n\n      // Some packages don't have android code.\n      if (!(await fs.pathExists(gradlePath))) {\n        continue;\n      }\n\n      const relativeGradlePath = path.relative(EXPO_DIR, gradlePath);\n\n      logger.log('  ', `Updating ${yellow('version')} in ${magenta(relativeGradlePath)}`);\n\n      await transformFileAsync(gradlePath, [\n        {\n          // update version and versionName in android/build.gradle\n          find: /\\b(version\\s*=\\s*|versionName\\s+)(['\"])(.*?)\\2/g,\n          replaceWith: `$1$2${state.releaseVersion}$2`,\n        },\n      ]);\n    }\n  }\n);\n"]}