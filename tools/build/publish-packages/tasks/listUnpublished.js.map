{"version":3,"file":"listUnpublished.js","sourceRoot":"","sources":["../../../src/publish-packages/tasks/listUnpublished.ts"],"names":[],"mappings":";;;;;;AAAA,mDAAyC;AACzC,0DAAkC;AAClC,wCAAgD;AAEhD,uDAAoD;AACpD,iFAA8E;AAE9E;;GAEG;AACU,QAAA,eAAe,GAAG,IAAI,kBAAI,CACrC;IACE,IAAI,EAAE,iBAAiB;IACvB,SAAS,EAAE,CAAC,iCAAe,EAAE,2DAA4B,CAAC;CAC3D,EACD,KAAK,EAAE,OAAiB,EAAE,EAAE;IAC1B,gBAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;IAC1C,OAAO,CAAC,OAAO,CAAC,4BAAkB,CAAC,CAAC;AACtC,CAAC,CACF,CAAC","sourcesContent":["import { Task } from '../../TasksRunner';\nimport logger from '../../Logger';\nimport { printPackageParcel } from '../helpers';\nimport { Parcel, TaskArgs } from '../types';\nimport { findUnpublished } from './findUnpublished';\nimport { resolveReleaseTypeAndVersion } from './resolveReleaseTypeAndVersion';\n\n/**\n * Lists packages that have any unpublished changes.\n */\nexport const listUnpublished = new Task<TaskArgs>(\n  {\n    name: 'listUnpublished',\n    dependsOn: [findUnpublished, resolveReleaseTypeAndVersion],\n  },\n  async (parcels: Parcel[]) => {\n    logger.info('\\nðŸ§© Unpublished packages:');\n    parcels.forEach(printPackageParcel);\n  }\n);\n"]}