{"version":3,"file":"updateWorkspaceProjects.js","sourceRoot":"","sources":["../../../src/publish-packages/tasks/updateWorkspaceProjects.ts"],"names":[],"mappings":"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","sourcesContent":["import JsonFile from '@expo/json-file';\nimport chalk from 'chalk';\nimport path from 'path';\n\nimport { EXPO_DIR } from '../../Constants';\nimport logger from '../../Logger';\nimport { Task } from '../../TasksRunner';\nimport * as Workspace from '../../Workspace';\nimport { Parcel, TaskArgs } from '../types';\n\nconst { green, yellow, cyan } = chalk;\n\n/**\n * Updates versions of packages to be published in other workspace projects depending on them.\n */\nexport const updateWorkspaceProjects = new Task<TaskArgs>(\n  {\n    name: 'updateWorkspaceProjects',\n    filesToStage: ['**/package.json', 'yarn.lock'],\n  },\n  async (parcels: Parcel[]) => {\n    logger.info('\\nðŸ“¤ Updating workspace projects...');\n\n    const workspaceInfo = await Workspace.getInfoAsync();\n    const dependenciesKeys = ['dependencies', 'devDependencies', 'peerDependencies'];\n\n    const parcelsObject = parcels.reduce((acc, parcel) => {\n      acc[parcel.pkg.packageName] = parcel;\n      return acc;\n    }, {});\n\n    await Promise.all(\n      Object.entries(workspaceInfo).map(async ([projectName, projectInfo]) => {\n        const projectDependencies = [\n          ...projectInfo.workspaceDependencies,\n          ...projectInfo.mismatchedWorkspaceDependencies,\n        ]\n          .map((dependencyName) => parcelsObject[dependencyName])\n          .filter(Boolean);\n\n        // If this project doesn't depend on any package we're going to publish.\n        if (projectDependencies.length === 0) {\n          return;\n        }\n\n        // Get copy of project's `package.json`.\n        const projectPackageJsonPath = path.join(EXPO_DIR, projectInfo.location, 'package.json');\n        const projectPackageJson = await JsonFile.readAsync(projectPackageJsonPath);\n        const batch = logger.batch();\n\n        batch.log('  ', green(projectName));\n\n        // Iterate through different dependencies types.\n        for (const dependenciesKey of dependenciesKeys) {\n          const dependenciesObject = projectPackageJson[dependenciesKey];\n\n          if (!dependenciesObject) {\n            continue;\n          }\n\n          for (const { pkg, state } of projectDependencies) {\n            const currentVersionRange = dependenciesObject[pkg.packageName];\n\n            if (!currentVersionRange) {\n              continue;\n            }\n\n            // Leave tilde and caret as they are, just replace the version.\n            const newVersionRange = currentVersionRange.replace(\n              /([\\^~]?).*/,\n              `$1${state.releaseVersion}`\n            );\n            dependenciesObject[pkg.packageName] = newVersionRange;\n\n            batch.log(\n              '    ',\n              `Updating ${yellow(`${dependenciesKey}.${pkg.packageName}`)}`,\n              `from ${cyan(currentVersionRange)} to ${cyan(newVersionRange)}`\n            );\n          }\n        }\n\n        // Save project's `package.json`.\n        await JsonFile.writeAsync(projectPackageJsonPath, projectPackageJson);\n\n        // Flush batched logs.\n        batch.flush();\n      })\n    );\n  }\n);\n"]}