{"version":3,"file":"publishPackages.js","sourceRoot":"","sources":["../../../src/publish-packages/tasks/publishPackages.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gEAAuC;AACvC,kDAA0B;AAC1B,gDAAwB;AAExB,oDAA4B;AAC5B,+CAAiC;AACjC,0DAAkC;AAClC,mDAAyC;AAEzC,iFAA8E;AAE9E,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,eAAK,CAAC;AAEtC;;GAEG;AACU,QAAA,eAAe,GAAG,IAAI,kBAAI,CACrC;IACE,IAAI,EAAE,iBAAiB;IACvB,SAAS,EAAE,CAAC,2DAA4B,CAAC;CAC1C,EACD,KAAK,EAAE,OAAiB,EAAE,OAAuB,EAAE,EAAE;IACnD,gBAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;IAE3C,MAAM,OAAO,GAAG,MAAM,aAAG,CAAC,sBAAsB,EAAE,CAAC;IAEnD,KAAK,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,OAAO,EAAE;QACpC,MAAM,eAAe,GAAG,cAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QAE5D,gBAAM,CAAC,GAAG,CACR,IAAI,EACJ,GAAG,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,YAAY,IAAI,CAAC,KAAK,CAAC,cAAe,CAAC,OAAO,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAC7F,CAAC;QAEF,qFAAqF;QACrF,4EAA4E;QAC5E,MAAM,mBAAQ,CAAC,QAAQ,CAAC,eAAe,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;QAE7D,uBAAuB;QACvB,MAAM,GAAG,CAAC,mBAAmB,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;QAElE,gEAAgE;QAChE,MAAM,mBAAQ,CAAC,cAAc,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC;QAE1D,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;KACxB;AACH,CAAC,CACF,CAAC","sourcesContent":["import JsonFile from '@expo/json-file';\nimport chalk from 'chalk';\nimport path from 'path';\n\nimport Git from '../../Git';\nimport * as Npm from '../../Npm';\nimport logger from '../../Logger';\nimport { Task } from '../../TasksRunner';\nimport { CommandOptions, Parcel, TaskArgs } from '../types';\nimport { resolveReleaseTypeAndVersion } from './resolveReleaseTypeAndVersion';\n\nconst { green, cyan, yellow } = chalk;\n\n/**\n * Publishes all packages that have been selected to publish.\n */\nexport const publishPackages = new Task<TaskArgs>(\n  {\n    name: 'publishPackages',\n    dependsOn: [resolveReleaseTypeAndVersion],\n  },\n  async (parcels: Parcel[], options: CommandOptions) => {\n    logger.info('\\nðŸš€ Publishing packages...');\n\n    const gitHead = await Git.getHeadCommitHashAsync();\n\n    for (const { pkg, state } of parcels) {\n      const packageJsonPath = path.join(pkg.path, 'package.json');\n\n      logger.log(\n        '  ',\n        `${green(pkg.packageName)} version ${cyan(state.releaseVersion!)} as ${yellow(options.tag)}`\n      );\n\n      // Update `gitHead` property so it will be available to read using `npm view --json`.\n      // Next publish will depend on this to properly get changes made after that.\n      await JsonFile.setAsync(packageJsonPath, 'gitHead', gitHead);\n\n      // Publish the package.\n      await Npm.publishPackageAsync(pkg.path, options.tag, options.dry);\n\n      // Delete `gitHead` from `package.json` â€“ no need to clutter it.\n      await JsonFile.deleteKeyAsync(packageJsonPath, 'gitHead');\n\n      state.published = true;\n    }\n  }\n);\n"]}