{"version":3,"file":"checkRepositoryStatus.js","sourceRoot":"","sources":["../../../src/publish-packages/tasks/checkRepositoryStatus.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAC1B,wDAAgC;AAEhC,oDAA4B;AAC5B,0DAAkC;AAClC,mDAAyC;AAGzC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,eAAK,CAAC;AAErC;;GAEG;AACU,QAAA,qBAAqB,GAAG,IAAI,kBAAI,CAC3C;IACE,IAAI,EAAE,uBAAuB;IAC7B,QAAQ,EAAE,IAAI;IACd,UAAU,EAAE,KAAK;CAClB,EACD,KAAK,EAAE,OAAiB,EAAE,OAAuB,EAA0B,EAAE;IAC3E,IAAI,OAAO,CAAC,cAAc,EAAE;QAC1B,OAAO;KACR;IACD,gBAAM,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;IAEtD,MAAM,aAAa,GAAG,MAAM,aAAG,CAAC,yBAAyB,EAAE,CAAC;IAC5D,MAAM,cAAc,GAAG,MAAM,aAAG,CAAC,0BAA0B,EAAE,CAAC;IAE9D,iEAAiE;IACjE,IAAI,CAAC,CAAC,MAAM,oBAAoB,CAAC,aAAa,CAAC,CAAC,EAAE;QAChD,OAAO,kBAAI,CAAC,IAAI,CAAC;KAClB;IAED,iFAAiF;IACjF,IAAI,cAAc,EAAE;QAClB,MAAM,aAAG,CAAC,UAAU,EAAE,CAAC;QAEvB,MAAM,KAAK,GAAG,MAAM,aAAG,CAAC,oBAAoB,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;QAE5E,IAAI,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YAClC,gBAAM,CAAC,KAAK,CACV,wBAAwB,IAAI,CAAC,aAAa,CAAC,qCAAqC,CACjF,CAAC;YACF,OAAO,kBAAI,CAAC,IAAI,CAAC;SAClB;KACF;IACD,IAAI,MAAM,aAAG,CAAC,uBAAuB,EAAE,EAAE;QACvC,gBAAM,CAAC,KAAK,CAAC,6EAA6E,CAAC,CAAC;QAC5F,gBAAM,CAAC,KAAK,CAAC,yDAAyD,CAAC,CAAC;QACxE,OAAO,kBAAI,CAAC,IAAI,CAAC;KAClB;AACH,CAAC,CACF,CAAC;AAEF;;;;GAIG;AACH,KAAK,UAAU,oBAAoB,CAAC,UAAkB;IACpD,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE;QAClB,6CAA6C;QAC7C,OAAO,UAAU,KAAK,QAAQ,CAAC;KAChC;IAED,wFAAwF;IACxF,IAAI,UAAU,KAAK,QAAQ,IAAI,gCAAgC,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;QAChF,OAAO,IAAI,CAAC;KACb;IAED,gBAAM,CAAC,IAAI,CACT,KAAK,EACL,oCAAoC,IAAI,CAAC,QAAQ,CAAC,4BAA4B,IAAI,CAAC,UAAU,CAAC,EAAE,CACjG,CAAC;IAEF,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,kBAAQ,CAAC,MAAM,CAAyB;QAClE;YACE,IAAI,EAAE,SAAS;YACf,IAAI,EAAE,WAAW;YACjB,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC;YACrB,OAAO,EAAE,MAAM,CAAC,yBAAyB,CAAC;YAC1C,OAAO,EAAE,IAAI;SACd;KACF,CAAC,CAAC;IACH,gBAAM,CAAC,GAAG,EAAE,CAAC;IACb,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import chalk from 'chalk';\nimport inquirer from 'inquirer';\n\nimport Git from '../../Git';\nimport logger from '../../Logger';\nimport { Task } from '../../TasksRunner';\nimport { CommandOptions, Parcel, TaskArgs } from '../types';\n\nconst { cyan, yellow, blue } = chalk;\n\n/**\n * Checks whether the current branch is correct and working dir is not dirty.\n */\nexport const checkRepositoryStatus = new Task<TaskArgs>(\n  {\n    name: 'checkRepositoryStatus',\n    required: true,\n    backupable: false,\n  },\n  async (parcels: Parcel[], options: CommandOptions): Promise<void | symbol> => {\n    if (options.skipRepoChecks) {\n      return;\n    }\n    logger.info(`\\nüïµÔ∏è‚Äç‚ôÇÔ∏è Checking repository status...`);\n\n    const currentBranch = await Git.getCurrentBranchNameAsync();\n    const trackingBranch = await Git.getTrackingBranchNameAsync();\n\n    // Check whether it's allowed to publish from the current branch.\n    if (!(await checkBranchNameAsync(currentBranch))) {\n      return Task.STOP;\n    }\n\n    // If tracking branch is set, then we must ensure it is still up-to-date with it.\n    if (trackingBranch) {\n      await Git.fetchAsync();\n\n      const stats = await Git.compareBranchesAsync(currentBranch, trackingBranch);\n\n      if (stats.ahead + stats.behind > 0) {\n        logger.error(\n          `üö´ Your local branch ${cyan(currentBranch)} is out of sync with remote branch.`\n        );\n        return Task.STOP;\n      }\n    }\n    if (await Git.hasUnstagedChangesAsync()) {\n      logger.error(`üö´ Repository contains unstaged changes, please make sure to have it clear.`);\n      logger.error(`üö´ If you want to include them, they must be committed.`);\n      return Task.STOP;\n    }\n  }\n);\n\n/**\n * Checks whether the command is run on master branch or package side-branch.\n * Otherwise, it prompts to confirm that you know what you're doing.\n * On CI it returns `true` only if run on `master` branch.\n */\nasync function checkBranchNameAsync(branchName: string) {\n  if (process.env.CI) {\n    // CI is allowed to publish only from master.\n    return branchName === 'master';\n  }\n\n  // Publishes can be run on `master` or package's side-branches like `expo-package/1.x.x`\n  if (branchName === 'master' || /^[\\w\\-@]+\\/\\d+\\.(x\\.x|\\d+\\.x)$/.test(branchName)) {\n    return true;\n  }\n\n  logger.warn(\n    '‚ö†Ô∏è ',\n    `It's recommended to publish from ${blue('master')} branch, while you're at ${blue(branchName)}`\n  );\n\n  const { confirmed } = await inquirer.prompt<{ confirmed: boolean }>([\n    {\n      type: 'confirm',\n      name: 'confirmed',\n      prefix: yellow('‚ö†Ô∏è '),\n      message: yellow(`Do you want to proceed?`),\n      default: true,\n    },\n  ]);\n  logger.log();\n  return confirmed;\n}\n"]}