{"version":3,"file":"checkPackagesIntegrity.js","sourceRoot":"","sources":["../../../src/publish-packages/tasks/checkPackagesIntegrity.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport inquirer from 'inquirer';\n\nimport logger from '../../Logger';\nimport Git from '../../Git';\nimport { Task } from '../../TasksRunner';\nimport { prepareParcels } from './prepareParcels';\nimport { CommandOptions, Parcel, TaskArgs } from '../types';\n\nconst { green, cyan, blue, yellow } = chalk;\n\n/**\n * Checks packages integrity and warns about violations.\n * Integrity is violated if the current version of a package:\n * - has no `gitHead` property in its package view.\n * - commit to which `gitHead` refers is not an ancestor of the current head commit.\n * - mismatches last version found in changelog.\n */\nexport const checkPackagesIntegrity = new Task<TaskArgs>(\n  {\n    name: 'checkPackagesIntegrity',\n    dependsOn: [prepareParcels],\n  },\n  async (parcels: Parcel[], options: CommandOptions): Promise<void | symbol> => {\n    logger.info('\\nüëÅ  Checking packages integrity...');\n\n    const resolver = async ({ pkg, pkgView, changelog }: Parcel): Promise<boolean> => {\n      if (!pkgView) {\n        // If package view is not there, then the package hasn't been released yet - no need to check integrity.\n        return true;\n      }\n\n      const isAncestor = !!pkgView.gitHead && (await Git.isAncestorAsync(pkgView.gitHead));\n      const lastChangelogVersion = await changelog.getLastPublishedVersionAsync();\n      const isVersionMatching = !lastChangelogVersion || pkgView.version === lastChangelogVersion;\n      const integral = isAncestor && isVersionMatching;\n\n      if (!integral) {\n        logger.warn(`\\n‚ö†Ô∏è  Integrity checks failed for ${green(pkg.packageName)}.`);\n      }\n      if (!pkgView.gitHead) {\n        logger.warn(`   Cannot find ${blue('gitHead')} in package view.`);\n      } else if (!isAncestor) {\n        logger.warn(\n          `   Local version ${cyan(pkgView.version)} has been published from different branch.`\n        );\n      }\n      if (!isVersionMatching) {\n        logger.warn(\n          `   Last version in changelog ${cyan(lastChangelogVersion!)}`,\n          `doesn't match local version ${cyan(pkgView.version)}.`\n        );\n      }\n      return integral;\n    };\n\n    const results = await Promise.all(parcels.map(resolver));\n    const somethingFailed = results.some((result) => !result);\n\n    if (options.checkIntegrity) {\n      if (somethingFailed) {\n        logger.error('\\nüö´ Integrity checks failed.');\n      } else {\n        logger.success('\\n‚úÖ All integrity checks passed.');\n      }\n      return;\n    }\n    if (somethingFailed && (await shouldStopOnFailedIntegrityChecksAsync())) {\n      if (process.env.CI) {\n        throw new Error('Some integrity checks failed ‚Äì it is prohibited on the CI.');\n      }\n      return Task.STOP;\n    }\n  }\n);\n\n/**\n * Resolves to a boolean value that means whether to stop the workflow if some integrity checks have failed.\n * It immediately returns `true` if it's run on the CI.\n */\nasync function shouldStopOnFailedIntegrityChecksAsync(): Promise<boolean> {\n  if (process.env.CI) {\n    return true;\n  }\n  const { proceed } = await inquirer.prompt<{ proceed: boolean }>([\n    {\n      type: 'confirm',\n      name: 'proceed',\n      prefix: '‚ùî',\n      message: yellow('Some integrity checks have failed. Do you want to proceed either way?'),\n      default: true,\n    },\n  ]);\n  return !proceed;\n}\n"]}