{"version":3,"file":"selectPackagesToPublish.js","sourceRoot":"","sources":["../../../src/publish-packages/tasks/selectPackagesToPublish.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAC1B,wDAAgC;AAChC,oDAA4B;AAE5B,0DAAkC;AAClC,mDAAyC;AACzC,wCAAgD;AAEhD,uDAAoD;AACpD,iFAA8E;AAE9E,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,eAAK,CAAC;AACnC,MAAM,2BAA2B,GAAG,gBAAgB,CAAC;AAErD;;GAEG;AACU,QAAA,uBAAuB,GAAG,IAAI,kBAAI,CAC7C;IACE,IAAI,EAAE,yBAAyB;IAC/B,SAAS,EAAE,CAAC,iCAAe,EAAE,2DAA4B,CAAC;CAC3D,EACD,KAAK,EAAE,OAAiB,EAAE,OAAuB,EAA8B,EAAE;IAC/E,gBAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;IAErD,MAAM,UAAU,GAAa,EAAE,CAAC;IAEhC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;QAC5B,4BAAkB,CAAC,MAAM,CAAC,CAAC;QAE3B,IAAI,MAAM,2BAA2B,CAAC,MAAM,CAAC,EAAE;YAC7C,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACzB;KACF;IACD,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;QAC3B,gBAAM,CAAC,OAAO,CAAC,yCAAyC,CAAC,CAAC;QAC1D,OAAO,kBAAI,CAAC,IAAI,CAAC;KAClB;IACD,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;AAC/B,CAAC,CACF,CAAC;AAEF;;;GAGG;AACH,KAAK,UAAU,2BAA2B,CAAC,MAAc;IACvD,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE;QAClB,OAAO,IAAI,CAAC;KACb;IACD,MAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC;IAC3C,MAAM,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC;IAC5C,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,kBAAQ,CAAC,MAAM,CAAC;QACzC;YACE,IAAI,EAAE,SAAS;YACf,IAAI,EAAE,UAAU;YAChB,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,0BAA0B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAQ,CAAC,GAAG;YACvF,OAAO,EAAE,IAAI;SACd;KACF,CAAC,CAAC;IACH,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,mBAAmB,GAAG,gBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QACxE,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,GAAG,MAAM,kBAAQ,CAAC,MAAM,CAAC;YACvD;gBACE,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE,SAAS;gBACf,MAAM,EAAE,GAAG;gBACX,OAAO,EAAE,+BAA+B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG;gBAClE,OAAO,EAAE;oBACP;wBACE,IAAI,EAAE,eAAe;wBACrB,KAAK,EAAE,IAAI;qBACZ;oBACD,GAAG,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;wBAC/C,OAAO;4BACL,IAAI,EAAE,cAAc,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,GAAG;4BACpE,KAAK,EAAE,mBAAmB,CAAC,IAAI,CAAC;yBACjC,CAAC;oBACJ,CAAC,CAAC;oBACF;wBACE,IAAI,EAAE,2BAA2B;wBACjC,KAAK,EAAE,2BAA2B;qBACnC;iBACF;gBACD,QAAQ,EAAE,eAAe,CAAC,MAAM,CAAC;aAClC;YACD;gBACE,IAAI,EAAE,OAAO;gBACb,IAAI,EAAE,eAAe;gBACrB,MAAM,EAAE,GAAG;gBACX,OAAO,EAAE,oCAAoC;gBAC7C,IAAI,CAAC,OAA+B;oBAClC,OAAO,OAAO,CAAC,OAAO,KAAK,2BAA2B,CAAC;gBACzD,CAAC;gBACD,QAAQ,EAAE,eAAe,CAAC,MAAM,CAAC;aAClC;SACF,CAAC,CAAC;QACH,IAAI,aAAa,IAAI,OAAO,EAAE;YAC5B,MAAM,CAAC,KAAK,CAAC,cAAc,GAAG,aAAa,IAAI,OAAO,CAAC;YACvD,OAAO,IAAI,CAAC;SACb;KACF;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED;;GAEG;AACH,SAAS,gBAAgB,CAAC,OAAe;IACvC,MAAM,YAAY,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACjD,OAAO,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;QACvC,GAAG,CAAC,IAAI,CAAC,GAAG,gBAAM,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACtC,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC;AAED;;GAEG;AACH,SAAS,eAAe,CAAC,MAAc;IACrC,OAAO,CAAC,KAAa,EAAE,EAAE;QACvB,IAAI,KAAK,EAAE;YACT,IAAI,CAAC,gBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACxB,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;aAClE;YACD,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBAC7D,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;aAC/D;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport semver from 'semver';\n\nimport logger from '../../Logger';\nimport { Task } from '../../TasksRunner';\nimport { printPackageParcel } from '../helpers';\nimport { CommandOptions, Parcel, TaskArgs } from '../types';\nimport { findUnpublished } from './findUnpublished';\nimport { resolveReleaseTypeAndVersion } from './resolveReleaseTypeAndVersion';\n\nconst { green, cyan, red } = chalk;\nconst CUSTOM_VERSION_CHOICE_VALUE = 'custom-version';\n\n/**\n * Prompts which suggested packages are going to be published.\n */\nexport const selectPackagesToPublish = new Task<TaskArgs>(\n  {\n    name: 'selectPackagesToPublish',\n    dependsOn: [findUnpublished, resolveReleaseTypeAndVersion],\n  },\n  async (parcels: Parcel[], options: CommandOptions): Promise<symbol | TaskArgs> => {\n    logger.info('\\nüëâ Selecting packages to publish...');\n\n    const newParcels: Parcel[] = [];\n\n    for (const parcel of parcels) {\n      printPackageParcel(parcel);\n\n      if (await selectPackageToPublishAsync(parcel)) {\n        newParcels.push(parcel);\n      }\n    }\n    if (newParcels.length === 0) {\n      logger.success('ü§∑‚Äç‚ôÇÔ∏è There is nothing to be published.');\n      return Task.STOP;\n    }\n    return [newParcels, options];\n  }\n);\n\n/**\n * Prompts the user to confirm whether the package should be published.\n * It immediately returns `true` if it's run on the CI.\n */\nasync function selectPackageToPublishAsync(parcel: Parcel): Promise<boolean> {\n  if (process.env.CI) {\n    return true;\n  }\n  const packageName = parcel.pkg.packageName;\n  const version = parcel.state.releaseVersion;\n  const { selected } = await inquirer.prompt([\n    {\n      type: 'confirm',\n      name: 'selected',\n      prefix: '‚ùî',\n      message: `Do you want to publish ${green.bold(packageName)} as ${cyan.bold(version!)}?`,\n      default: true,\n    },\n  ]);\n  if (!selected) {\n    const incrementedVersions = incrementVersion(parcel.pkg.packageVersion);\n    const { version, customVersion } = await inquirer.prompt([\n      {\n        type: 'list',\n        name: 'version',\n        prefix: '‚ùî',\n        message: `What do you want to do with ${green.bold(packageName)}?`,\n        choices: [\n          {\n            name: \"Don't publish\",\n            value: null,\n          },\n          ...Object.keys(incrementedVersions).map((type) => {\n            return {\n              name: `Publish as ${cyan.bold(incrementedVersions[type])} (${type})`,\n              value: incrementedVersions[type],\n            };\n          }),\n          {\n            name: 'Publish as custom version',\n            value: CUSTOM_VERSION_CHOICE_VALUE,\n          },\n        ],\n        validate: validateVersion(parcel),\n      },\n      {\n        type: 'input',\n        name: 'customVersion',\n        prefix: '‚ùî',\n        message: 'Type in custom version to publish:',\n        when(answers: Record<string, string>): boolean {\n          return answers.version === CUSTOM_VERSION_CHOICE_VALUE;\n        },\n        validate: validateVersion(parcel),\n      },\n    ]);\n    if (customVersion || version) {\n      parcel.state.releaseVersion = customVersion || version;\n      return true;\n    }\n  }\n  return selected;\n}\n\n/**\n * Creates an object with possible incrementations of given version.\n */\nfunction incrementVersion(version: string): Record<string, string> {\n  const releaseTypes = ['major', 'minor', 'patch'];\n  return releaseTypes.reduce((acc, type) => {\n    acc[type] = semver.inc(version, type);\n    return acc;\n  }, {});\n}\n\n/**\n * Returns a function that validates the version for given parcel.\n */\nfunction validateVersion(parcel: Parcel) {\n  return (input: string) => {\n    if (input) {\n      if (!semver.valid(input)) {\n        return red(`${cyan.bold(input)} is not a valid semver version.`);\n      }\n      if (parcel.pkgView && parcel.pkgView.versions.includes(input)) {\n        return red(`${cyan.bold(input)} has already been published.`);\n      }\n    }\n    return true;\n  };\n}\n"]}