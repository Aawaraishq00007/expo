{"version":3,"file":"resolveReleaseTypeAndVersion.js","sourceRoot":"","sources":["../../../src/publish-packages/tasks/resolveReleaseTypeAndVersion.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAE5B,mDAAyC;AACzC,oCAAyE;AACzE,uDAAoD;AAEpD,MAAM,uBAAuB,GAAG,CAAC,mBAAW,CAAC,KAAK,EAAE,mBAAW,CAAC,KAAK,EAAE,mBAAW,CAAC,KAAK,CAAC,CAAC;AAE1F;;GAEG;AACU,QAAA,4BAA4B,GAAG,IAAI,kBAAI,CAClD;IACE,IAAI,EAAE,8BAA8B;IACpC,SAAS,EAAE,CAAC,iCAAe,CAAC;CAC7B,EACD,KAAK,EAAE,OAAiB,EAAE,OAAuB,EAAE,EAAE;;IACnD,MAAM,UAAU,GAAG,OAAO,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,IAAI,SAAS,CAAC;IAExF,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;QAC5B,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;QAEvC,6DAA6D;QAC7D,MAAM,gBAAgB,GAAG,iCAAiC,CAAC,MAAM,CAAC,CAAC;QACnE,MAAM,kBAAkB,GAAG,CAAC,GAAG,gBAAgB,CAAC,CAAC,MAAM,CACrD,yBAAyB,EACzB,mBAAW,CAAC,KAAK,CAClB,CAAC;QAEF,qFAAqF;QACrF,KAAK,CAAC,WAAW,GAAG,UAAU;YAC5B,CAAC,CAAE,CAAC,KAAK,GAAG,kBAAkB,CAAiB;YAC/C,CAAC,CAAC,kBAAkB,CAAC;QAEvB,uCAAuC;QACvC,KAAK,CAAC,cAAc,GAAG,uBAAuB,CAC5C,GAAG,CAAC,cAAc,QAClB,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,mCAAI,EAAE,EACvB,KAAK,CAAC,WAAW,EACjB,UAAU,CACX,CAAC;KACH;AACH,CAAC,CACF,CAAC;AAEF;;GAEG;AACH,SAAS,uBAAuB,CAC9B,aAAqB,EACrB,aAAuB,EACvB,WAAwB,EACxB,oBAAoC;IAEpC,kFAAkF;IAClF,6CAA6C;IAC7C,iEAAiE;IACjE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,gBAAM,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE;QACzE,OAAO,aAAa,CAAC;KACtB;IAED,MAAM,0BAA0B,GAAG,oBAAoB,aAApB,oBAAoB,cAApB,oBAAoB,GAAI,uBAAuB,CAAC,aAAa,CAAC,CAAC;IAElG,uEAAuE;IACvE,oEAAoE;IACpE,MAAM,wBAAwB,GAAG,aAAa;SAC3C,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE;QAClB,OAAO,CACL,gBAAM,CAAC,EAAE,CAAC,OAAO,EAAE,aAAa,CAAC;YACjC,gBAAM,CAAC,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC,KAAK,WAAW;YACnD,uBAAuB,CAAC,OAAO,CAAC,KAAK,0BAA0B,CAChE,CAAC;IACJ,CAAC,CAAC;SACD,IAAI,CAAC,gBAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAE5B,OAAO,gBAAM,CAAC,GAAG,CACf,wBAAwB,aAAxB,wBAAwB,cAAxB,wBAAwB,GAAI,aAAa,EACzC,WAAW,EACX,0BAA0B,CACjB,CAAC;AACd,CAAC;AAED;;GAEG;AACH,SAAS,iCAAiC,CAAC,MAAc,EAAE,MAAwB,IAAI,GAAG,EAAE;IAC1F,IAAI,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE;QAC/B,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;KACtC;IACD,KAAK,MAAM,UAAU,IAAI,MAAM,CAAC,YAAY,EAAE;QAC5C,iCAAiC,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;KACpD;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAED;;GAEG;AACH,SAAS,yBAAyB,CAAC,CAAc,EAAE,CAAc;IAC/D,MAAM,EAAE,GAAG,uBAAuB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9C,MAAM,EAAE,GAAG,uBAAuB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9C,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC;AAED;;;;GAIG;AACH,SAAS,uBAAuB,CAAC,OAAe;IAC9C,MAAM,UAAU,GAAG,gBAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC9C,OAAO,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,OAAO,UAAU,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAC/F,CAAC","sourcesContent":["import semver from 'semver';\n\nimport { Task } from '../../TasksRunner';\nimport { CommandOptions, Parcel, ReleaseType, TaskArgs } from '../types';\nimport { findUnpublished } from './findUnpublished';\n\nconst RELEASE_TYPES_ASC_ORDER = [ReleaseType.PATCH, ReleaseType.MINOR, ReleaseType.MAJOR];\n\n/**\n * Resolves parcel's release type and version, based on its `minReleaseType` and its dependencies.\n */\nexport const resolveReleaseTypeAndVersion = new Task<TaskArgs>(\n  {\n    name: 'resolveReleaseTypeAndVersion',\n    dependsOn: [findUnpublished],\n  },\n  async (parcels: Parcel[], options: CommandOptions) => {\n    const prerelease = options.prerelease === true ? 'rc' : options.prerelease || undefined;\n\n    for (const parcel of parcels) {\n      const { pkg, pkgView, state } = parcel;\n\n      // Find the highest release type among parcel's dependencies.\n      const accumulatedTypes = recursivelyAccumulateReleaseTypes(parcel);\n      const highestReleaseType = [...accumulatedTypes].reduce(\n        highestReleaseTypeReducer,\n        ReleaseType.PATCH\n      );\n\n      // Make it a prerelease version if `--prerelease` was passed and assign to the state.\n      state.releaseType = prerelease\n        ? (('pre' + highestReleaseType) as ReleaseType)\n        : highestReleaseType;\n\n      // Calculate version to should bump to.\n      state.releaseVersion = resolveSuggestedVersion(\n        pkg.packageVersion,\n        pkgView?.versions ?? [],\n        state.releaseType,\n        prerelease\n      );\n    }\n  }\n);\n\n/**\n * Returns suggested version based on given current version, already published versions and suggested release type.\n */\nfunction resolveSuggestedVersion(\n  versionToBump: string,\n  otherVersions: string[],\n  releaseType: ReleaseType,\n  prereleaseIdentifier?: string | null\n): string {\n  // If the version to bump is not published yet, then we do want to use it instead,\n  // no matter which release type is suggested.\n  // TODO: do we need to make an exception for prerelease versions?\n  if (!otherVersions.includes(versionToBump) && semver.valid(versionToBump)) {\n    return versionToBump;\n  }\n\n  const targetPrereleaseIdentifier = prereleaseIdentifier ?? getPrereleaseIdentifier(versionToBump);\n\n  // Higher version might have already been published from another place,\n  // so get the highest published version that satisfies release type.\n  const highestSatisfyingVersion = otherVersions\n    .filter((version) => {\n      return (\n        semver.gt(version, versionToBump) &&\n        semver.diff(version, versionToBump) === releaseType &&\n        getPrereleaseIdentifier(version) === targetPrereleaseIdentifier\n      );\n    })\n    .sort(semver.rcompare)[0];\n\n  return semver.inc(\n    highestSatisfyingVersion ?? versionToBump,\n    releaseType,\n    targetPrereleaseIdentifier\n  ) as string;\n}\n\n/**\n * Accumulates all `minReleaseType` in given parcel and all its dependencies.\n */\nfunction recursivelyAccumulateReleaseTypes(parcel: Parcel, set: Set<ReleaseType> = new Set()) {\n  if (parcel.state.minReleaseType) {\n    set.add(parcel.state.minReleaseType);\n  }\n  for (const dependency of parcel.dependencies) {\n    recursivelyAccumulateReleaseTypes(dependency, set);\n  }\n  return set;\n}\n\n/**\n * Used as a reducer to find the highest release type.\n */\nfunction highestReleaseTypeReducer(a: ReleaseType, b: ReleaseType): ReleaseType {\n  const ai = RELEASE_TYPES_ASC_ORDER.indexOf(a);\n  const bi = RELEASE_TYPES_ASC_ORDER.indexOf(b);\n  return bi > ai ? b : a;\n}\n\n/**\n * Returns prerelease identifier of given version or `null` if given version is not a prerelease version.\n * `semver.prerelease` returns an array of prerelease parts (`1.0.0-beta.0` results in `['beta', 0]`),\n * however we just need the identifier.\n */\nfunction getPrereleaseIdentifier(version: string): string | null {\n  const prerelease = semver.prerelease(version);\n  return Array.isArray(prerelease) && typeof prerelease[0] === 'string' ? prerelease[0] : null;\n}\n"]}