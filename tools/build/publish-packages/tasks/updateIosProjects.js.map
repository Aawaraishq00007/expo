{"version":3,"file":"updateIosProjects.js","sourceRoot":"","sources":["../../../src/publish-packages/tasks/updateIosProjects.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kDAA0B;AAC1B,gDAAwB;AAExB,+CAAkD;AAClD,0DAAkC;AAClC,mDAAyC;AACzC,uCAA0C;AAC1C,2DAA6C;AAE7C,uEAAoE;AAEpE,MAAM,EAAE,KAAK,EAAE,GAAG,eAAK,CAAC;AAExB;;GAEG;AACU,QAAA,iBAAiB,GAAG,IAAI,kBAAI,CACvC;IACE,IAAI,EAAE,mBAAmB;IACzB,SAAS,EAAE,CAAC,iDAAuB,CAAC;IACpC,YAAY,EAAE,CAAC,KAAK,EAAE,eAAe,CAAC;CACvC,EACD,KAAK,EAAE,OAAiB,EAAE,EAAE;IAC1B,gBAAM,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;IAE7C,MAAM,UAAU,GAAG,SAAS,CAAC,aAAa,EAAE,CAAC;IAE7C,MAAM,OAAO,CAAC,GAAG,CACf,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE;QACjC,MAAM,SAAS,GAAG,MAAM,mBAAW,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,EAAE;YACtD,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC,GAAG,CAAC;YACnC,OAAO,CAAC,CAAC,WAAW,IAAI,SAAS,CAAC,0BAA0B,CAAC,WAAW,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QACH,MAAM,YAAY,GAAG,SAAS;aAC3B,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC;aACvC,MAAM,CAAC,OAAO,CAAa,CAAC;QAE/B,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;YAC7B,gBAAM,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,sBAAsB,CAAC,CAAC;YACxE,OAAO;SACR;QAED,gBAAM,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,wBAAwB,CAAC,CAAC;QAE1E,iEAAiE;QACjE,4DAA4D;QAC5D,IAAI;YACF,MAAM,2BAAe,CAAC,cAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;SACjF;QAAC,OAAO,CAAC,EAAE;YACV,gBAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;YACnC,gBAAM,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;YAC3E,gBAAM,CAAC,KAAK,CAAC,yEAAyE,CAAC,CAAC;SACzF;IACH,CAAC,CAAC,CACH,CAAC;AACJ,CAAC,CACF,CAAC","sourcesContent":["import chalk from 'chalk';\nimport path from 'path';\n\nimport { podInstallAsync } from '../../CocoaPods';\nimport logger from '../../Logger';\nimport { Task } from '../../TasksRunner';\nimport { filterAsync } from '../../Utils';\nimport * as Workspace from '../../Workspace';\nimport { Parcel, TaskArgs } from '../types';\nimport { selectPackagesToPublish } from './selectPackagesToPublish';\n\nconst { green } = chalk;\n\n/**\n * Updates pods in Expo client's and bare-expo.\n */\nexport const updateIosProjects = new Task<TaskArgs>(\n  {\n    name: 'updateIosProjects',\n    dependsOn: [selectPackagesToPublish],\n    filesToStage: ['ios', 'apps/*/ios/**'],\n  },\n  async (parcels: Parcel[]) => {\n    logger.info('\\nüçé Updating iOS projects...');\n\n    const nativeApps = Workspace.getNativeApps();\n\n    await Promise.all(\n      nativeApps.map(async (nativeApp) => {\n        const localPods = await filterAsync(parcels, (parcel) => {\n          const { podspecName } = parcel.pkg;\n          return !!podspecName && nativeApp.hasLocalPodDependencyAsync(podspecName);\n        });\n        const podspecNames = localPods\n          .map((parcel) => parcel.pkg.podspecName)\n          .filter(Boolean) as string[];\n\n        if (podspecNames.length === 0) {\n          logger.log('  ', `${green(nativeApp.packageName)}: No pods to update.`);\n          return;\n        }\n\n        logger.log('  ', `${green(nativeApp.packageName)}: Reinstalling pods...`);\n\n        // `pod install` sometimes fails, but it's not needed to properly\n        // publish packages, so let's just continue if that happens.\n        try {\n          await podInstallAsync(path.join(nativeApp.path, 'ios'), { noRepoUpdate: true });\n        } catch (e) {\n          logger.debug(e.stderr || e.stdout);\n          logger.error('üçé Failed to install pods in', green(nativeApp.packageName));\n          logger.error('üçé Please review the output above and fix it once the publish completes');\n        }\n      })\n    );\n  }\n);\n"]}