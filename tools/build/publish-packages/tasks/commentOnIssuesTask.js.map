{"version":3,"file":"commentOnIssuesTask.js","sourceRoot":"","sources":["../../../src/publish-packages/tasks/commentOnIssuesTask.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport path from 'path';\n\nimport { ChangelogEntry, UNPUBLISHED_VERSION_NAME } from '../../Changelogs';\nimport { EXPO_DIR } from '../../Constants';\nimport { link } from '../../Formatter';\nimport Git from '../../Git';\nimport { dispatchWorkflowEventAsync, getClosedIssuesAsync } from '../../GitHubActions';\nimport logger from '../../Logger';\nimport { Package } from '../../Packages';\nimport { Task } from '../../TasksRunner';\nimport { CommentatorPayload } from '../../commands/CommentatorCommand';\nimport { CommandOptions, Parcel, TaskArgs } from '../types';\nimport { selectPackagesToPublish } from './selectPackagesToPublish';\n\ntype CommentRowObject = {\n  pkg: Package;\n  version: string;\n  pullRequests: number[];\n};\n\n/**\n * Dispatches GitHub Actions workflow that adds comments to the issues\n * that were closed by pull requests mentioned in the changelog changes.\n */\nexport const commentOnIssuesTask = new Task<TaskArgs>(\n  {\n    name: 'commentOnIssuesTask',\n    dependsOn: [selectPackagesToPublish],\n    backupable: true,\n  },\n  async (parcels: Parcel[], options: CommandOptions) => {\n    logger.info('\\n🐙 Commenting on issues closed by published changes');\n\n    const payload = await generatePayloadForCommentatorAsync(parcels, options.tag);\n\n    if (!payload.length) {\n      logger.log('There are no closed issues to comment on\\n');\n      return;\n    }\n    if (options.dry) {\n      logger.debug('Skipping due to --dry flag');\n      logManualFallback(payload);\n      return;\n    }\n    if (!process.env.GITHUB_TOKEN) {\n      logger.error(\n        'Environment variable `%s` must be set to dispatch a commentator workflow',\n        chalk.magenta('GITHUB_TOKEN')\n      );\n      logManualFallback(payload);\n      return;\n    }\n\n    const currentBranchName = await Git.getCurrentBranchNameAsync();\n\n    // Sometimes we publish from different branches (especially for testing) where comments are not advisable.\n    if (currentBranchName !== 'master') {\n      logger.warn('This feature is disabled on branches other than master');\n      logManualFallback(payload);\n      return;\n    }\n\n    // Dispatch commentator workflow on GitHub Actions with stringified and escaped payload.\n    await dispatchWorkflowEventAsync('commentator.yml', currentBranchName, {\n      payload: JSON.stringify(payload).replace(/(\"|`)/g, '\\\\$1'),\n    });\n    logger.success(\n      'Successfully dispatched commentator action for the following issues: %s',\n      linksToClosedIssues(payload.map(({ issue }) => issue))\n    );\n  }\n);\n\n/**\n * Generates payload for `expotools commentator` command.\n */\nasync function generatePayloadForCommentatorAsync(\n  parcels: Parcel[],\n  tag: string\n): Promise<CommentatorPayload> {\n  // An object whose key is the issue number and value is an array of rows to put in the comment's body.\n  const commentRows: Record<number, CommentRowObject[]> = {};\n\n  // An object whose key is the pull request number and value is an array of issues it closes.\n  const closedIssuesRegistry: Record<number, number[]> = {};\n\n  for (const { pkg, state } of parcels) {\n    const versionChanges = state.changelogChanges?.versions[UNPUBLISHED_VERSION_NAME];\n\n    if (!versionChanges) {\n      continue;\n    }\n    const allEntries = ([] as ChangelogEntry[]).concat(...Object.values(versionChanges));\n    const allPullRequests = new Set(\n      ([] as number[]).concat(...allEntries.map((entry) => entry.pullRequests ?? []))\n    );\n\n    // Visit all pull requests mentioned in the changelog.\n    for (const pullRequest of allPullRequests) {\n      // Look for closed issues just once per pull request to reduce number of GitHub API calls.\n      if (!closedIssuesRegistry[pullRequest]) {\n        closedIssuesRegistry[pullRequest] = await getClosedIssuesAsync(pullRequest);\n      }\n      const closedIssues = closedIssuesRegistry[pullRequest];\n\n      // Visit all issues that have been closed by this pull request.\n      for (const issue of closedIssues) {\n        if (!commentRows[issue]) {\n          commentRows[issue] = [];\n        }\n\n        // Check if the row for the package already exists. If it does, then just add\n        // another pull request reference into that row instead of creating a new one.\n        // This is to prevent duplicating packages within the comment's body.\n        const existingRowForPackage = commentRows[issue].find((entry) => entry.pkg === pkg);\n\n        if (existingRowForPackage) {\n          existingRowForPackage.pullRequests.push(pullRequest);\n        } else {\n          commentRows[issue].push({\n            pkg,\n            version: state.releaseVersion!,\n            pullRequests: [pullRequest],\n          });\n        }\n      }\n    }\n  }\n\n  return Object.entries(commentRows).map(([issue, entries]) => {\n    return {\n      issue: +issue,\n      body: generateCommentBody(entries, tag),\n    };\n  });\n}\n\n/**\n * Logs a list of closed issues. We use it as a fallback in several places, so it's extracted.\n */\nfunction logManualFallback(payload: CommentatorPayload): void {\n  logger.log(\n    'If necessary, you can still do this manually on the following issues: %s',\n    linksToClosedIssues(payload.map(({ issue }) => issue))\n  );\n}\n\n/**\n * Returns a string with concatenated links to all given issues.\n */\nfunction linksToClosedIssues(issues: number[]): string {\n  return issues\n    .map((issue) => link(chalk.blue('#' + issue), `https://github.com/expo/expo/issues/${issue}`))\n    .join(', ');\n}\n\n/**\n * Generates comment body based on given entries.\n */\nfunction generateCommentBody(entries: CommentRowObject[], tag: string): string {\n  const rows = entries.map(({ pkg, version, pullRequests }) => {\n    const items = [\n      linkToNpmPackage(pkg.packageName, version),\n      version,\n      pullRequests.map((pr) => '#' + pr).join(', '),\n      linkToChangelog(pkg),\n    ];\n    return `| ${items.join(' | ')} |`;\n  });\n\n  return `<!-- Generated by \\`expotools publish\\` -->\nSome changes in the following packages that may fix this issue have just been published to npm under \\`${tag}\\` tag 🚀\n\n| 📦 Package | 🔢 Version | ↖️ Pull requests | 📝 Release notes |\n|:--:|:--:|:--:|:--:|\n${rows.join('\\n')}\n\nIf you're using bare workflow you can upgrade them right away. We kindly ask you for some feedback—even if it works 🙏\n\nThey will become available in managed workflow with the next SDK release 👀\n\nHappy Coding! 🎉`;\n}\n\n/**\n * Returns markdown link to the package on npm.\n */\nfunction linkToNpmPackage(packageName: string, version: string): string {\n  return `[${packageName}](https://www.npmjs.com/package/${packageName}/v/${version})`;\n}\n\n/**\n * Returns markdown link to package's changelog.\n */\nfunction linkToChangelog(pkg: Package): string {\n  const changelogRelativePath = path.relative(EXPO_DIR, pkg.changelogPath);\n  return `[CHANGELOG.md](https://github.com/expo/expo/blob/master/${changelogRelativePath})`;\n}\n"]}