{"version":3,"file":"publishPackagesPipeline.js","sourceRoot":"","sources":["../../../src/publish-packages/tasks/publishPackagesPipeline.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAE1B,0DAAkC;AAClC,mDAAyC;AAEzC,iEAA8D;AAC9D,qEAAkE;AAClE,mEAAgE;AAChE,6DAA0D;AAC1D,+DAA4D;AAC5D,+DAA4D;AAC5D,yDAAsD;AACtD,2EAAwE;AACxE,iEAA8D;AAC9D,qDAAkD;AAClD,uDAAoD;AACpD,iEAA8D;AAC9D,uEAAoE;AACpE,mEAAgE;AAChE,qFAAkF;AAClF,2DAAwD;AACxD,mEAAgE;AAChE,uEAAoE;AAEpE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,eAAK,CAAC;AAE/B;;GAEG;AACU,QAAA,uBAAuB,GAAG,IAAI,kBAAI,CAC7C;IACE,IAAI,EAAE,yBAAyB;IAC/B,SAAS,EAAE;QACT,2CAAoB;QACpB,6CAAqB;QACrB,+BAAc;QACd,+CAAsB;QACtB,iDAAuB;QACvB,6CAAqB;QACrB,+DAA8B;QAC9B,iDAAuB;QACvB,6CAAqB;QACrB,qCAAiB;QACjB,mCAAgB;QAChB,yCAAmB;QACnB,2CAAoB;QACpB,2CAAoB;QACpB,iCAAe;QACf,uCAAkB;QAClB,qDAAyB;QACzB,yCAAmB;KACpB;CACF,EACD,KAAK,EAAE,OAAiB,EAAE,OAAuB,EAAE,EAAE;IACnD,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC;IAC7B,gBAAM,CAAC,OAAO,CACZ,8BAA8B,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,WAAW,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,CACxF,CAAC;IAEF,IAAI,OAAO,CAAC,GAAG,KAAK,QAAQ,EAAE;QAC5B,gBAAM,CAAC,GAAG,CACR,OAAO,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,MAAM,CAAC,QAAQ,CAAC,OAAO,CACtF,CAAC;KACH;AACH,CAAC,CACF,CAAC","sourcesContent":["import chalk from 'chalk';\n\nimport logger from '../../Logger';\nimport { Task } from '../../TasksRunner';\nimport { CommandOptions, Parcel, TaskArgs } from '../types';\nimport { checkEnvironmentTask } from './checkEnvironmentTask';\nimport { checkPackagesIntegrity } from './checkPackagesIntegrity';\nimport { checkRepositoryStatus } from './checkRepositoryStatus';\nimport { cleanPrebuildsTask } from './cleanPrebuildsTask';\nimport { commentOnIssuesTask } from './commentOnIssuesTask';\nimport { commitStagedChanges } from './commitStagedChanges';\nimport { cutOffChangelogs } from './cutOffChangelogs';\nimport { grantTeamAccessToPackages } from './grantTeamAccessToPackages';\nimport { prebuildPackagesTask } from './prebuildPackagesTask';\nimport { prepareParcels } from './prepareParcels';\nimport { publishPackages } from './publishPackages';\nimport { pushCommittedChanges } from './pushCommittedChanges';\nimport { selectPackagesToPublish } from './selectPackagesToPublish';\nimport { updateAndroidProjects } from './updateAndroidProjects';\nimport { updateBundledNativeModulesFile } from './updateBundledNativeModulesFile';\nimport { updateIosProjects } from './updateIosProjects';\nimport { updatePackageVersions } from './updatePackageVersions';\nimport { updateWorkspaceProjects } from './updateWorkspaceProjects';\n\nconst { cyan, yellow } = chalk;\n\n/**\n * Pipeline with a bunch of tasks required to publish packages.\n */\nexport const publishPackagesPipeline = new Task<TaskArgs>(\n  {\n    name: 'publishPackagesPipeline',\n    dependsOn: [\n      checkEnvironmentTask,\n      checkRepositoryStatus,\n      prepareParcels,\n      checkPackagesIntegrity,\n      selectPackagesToPublish,\n      updatePackageVersions,\n      updateBundledNativeModulesFile,\n      updateWorkspaceProjects,\n      updateAndroidProjects,\n      updateIosProjects,\n      cutOffChangelogs,\n      commitStagedChanges,\n      pushCommittedChanges,\n      prebuildPackagesTask,\n      publishPackages,\n      cleanPrebuildsTask,\n      grantTeamAccessToPackages,\n      commentOnIssuesTask,\n    ],\n  },\n  async (parcels: Parcel[], options: CommandOptions) => {\n    const count = parcels.length;\n    logger.success(\n      `\\nâœ… Successfully published ${cyan.bold(count + '')} package${count > 1 ? 's' : ''}.\\n`\n    );\n\n    if (options.tag !== 'latest') {\n      logger.log(\n        `Run ${cyan.bold('et promote-packages')} to promote them to ${yellow('latest')} tag.`\n      );\n    }\n  }\n);\n"]}