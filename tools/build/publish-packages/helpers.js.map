{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../src/publish-packages/helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport { pick } from 'lodash';\nimport inquirer from 'inquirer';\n\nimport * as Formatter from '../Formatter';\nimport logger from '../Logger';\nimport { BACKUPABLE_OPTIONS_FIELDS } from './constants';\nimport { BackupableOptions, CommandOptions, Parcel } from './types';\nimport { UNPUBLISHED_VERSION_NAME } from '../Changelogs';\n\nconst { green, cyan, magenta, gray } = chalk;\n\n/**\n * Returns options that are capable of being backed up.\n * We will need just a few options to determine whether the backup is valid\n * and we can't pass them all because `options` is in fact commander's `Command` instance.\n */\nexport function pickBackupableOptions(options: CommandOptions): BackupableOptions {\n  return pick(options, BACKUPABLE_OPTIONS_FIELDS);\n}\n\n/**\n * Whether tasks backup can be used to retry previous command invocation.\n */\nexport async function shouldUseBackupAsync(options: CommandOptions): Promise<boolean> {\n  if (process.env.CI) {\n    return false;\n  }\n  if (options.retry) {\n    return true;\n  }\n  const { restore } = await inquirer.prompt([\n    {\n      type: 'confirm',\n      name: 'restore',\n      prefix: '❔',\n      message: cyan('Found valid backup file. Would you like to use it?'),\n    },\n  ]);\n  logger.log();\n  return restore;\n}\n\n/**\n * Prints gathered crucial informations about the package.\n */\nexport function printPackageParcel(parcel: Parcel): void {\n  const { pkg, pkgView, state, dependencies } = parcel;\n  const { logs, changelogChanges, releaseType, releaseVersion } = state;\n  const gitHead = pkgView?.gitHead;\n\n  logger.log(\n    '\\n📦',\n    `${green.bold(pkg.packageName)},`,\n    `current version ${cyan.bold(pkg.packageVersion)},`,\n    pkgView ? `published from ${Formatter.formatCommitHash(gitHead)}` : 'not published yet'\n  );\n\n  if (!pkgView) {\n    logger.log(\n      '  ',\n      magenta(`Version ${cyan.bold(pkg.packageVersion)} hasn't been published yet.`)\n    );\n  } else if (!logs) {\n    logger.warn(\"   We couldn't determine new commits for this package.\");\n\n    if (gitHead) {\n      // There are no logs and `gitHead` is there, so probably it's unreachable.\n      logger.warn('   Git head of its current version is not reachable from this branch.');\n    } else {\n      logger.warn(\"   It doesn't seem to be published by this script yet.\");\n    }\n  }\n\n  if (dependencies.length) {\n    logger.log('  ', magenta('Package depends on:'));\n\n    dependencies.forEach((dependency) => {\n      logger.log(\n        '    ',\n        green(dependency.pkg.packageName),\n        gray(`(requires ${cyan(dependency.state.releaseType!)} upgrade)`)\n      );\n    });\n  }\n  if (logs && logs.commits.length > 0) {\n    logger.log('  ', magenta('New commits:'));\n\n    [...logs.commits].reverse().forEach((commitLog) => {\n      logger.log('    ', Formatter.formatCommitLog(commitLog));\n    });\n  }\n  if (logs && logs.files.length > 0) {\n    logger.log('  ', magenta('File changes:'), gray('(build folder not displayed)'));\n\n    logs.files.forEach((fileLog) => {\n      if (fileLog.relativePath.startsWith('build/')) {\n        return;\n      }\n      logger.log('    ', Formatter.formatFileLog(fileLog));\n    });\n  }\n\n  const unpublishedChanges = changelogChanges?.versions[UNPUBLISHED_VERSION_NAME] ?? {};\n\n  for (const changeType in unpublishedChanges) {\n    const changes = unpublishedChanges[changeType];\n\n    if (changes.length > 0) {\n      logger.log('  ', magenta(`${Formatter.stripNonAsciiChars(changeType).trim()}:`));\n\n      for (const change of unpublishedChanges[changeType]) {\n        logger.log('    ', Formatter.formatChangelogEntry(change.message));\n      }\n    }\n  }\n\n  if (pkgView && releaseType && releaseVersion) {\n    logger.log(\n      '  ',\n      magenta(`Suggested ${cyan.bold(releaseType)} upgrade to ${cyan.bold(releaseVersion)}`)\n    );\n  }\n}\n"]}