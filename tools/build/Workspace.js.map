{"version":3,"file":"Workspace.js","sourceRoot":"","sources":["../src/Workspace.ts"],"names":[],"mappings":";;;;;;AAAA,gEAAuC;AACvC,gDAAwB;AAExB,yCAAqC;AACrC,mCAA4D;AAC5D,2CAAuC;AAEvC,MAAM,iBAAiB,GAAG,CAAC,oBAAQ,EAAE,cAAI,CAAC,IAAI,CAAC,oBAAQ,EAAE,gBAAgB,CAAC,CAAC,CAAC;AAgB5E;;GAEG;AACI,KAAK,UAAU,YAAY;IAChC,MAAM,IAAI,GAAG,MAAM,6BAAqB,CAAmB,MAAM,EAAE;QACjE,QAAQ;QACR,YAAY;QACZ,MAAM;KACP,CAAC,CAAC;IACH,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC/B,CAAC;AAPD,oCAOC;AAED;;GAEG;AACI,KAAK,UAAU,YAAY;IAChC,MAAM,kBAAU,CAAC,MAAM,CAAC,CAAC;AAC3B,CAAC;AAFD,oCAEC;AAED;;GAEG;AACH,SAAgB,aAAa;IAC3B,OAAO,iBAAiB,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,kBAAO,CAAC,OAAO,CAAC,CAAC,CAAC;AAClE,CAAC;AAFD,sCAEC;AAED;;GAEG;AACI,KAAK,UAAU,qBAAqB,CAAC,cAAsB,EAAE,YAAoB;IACtF,MAAM,gBAAgB,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,YAAY,EAAE,CAAC,CAAC,GAAG,CAC9D,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,QAAQ,CACtC,CAAC;IAEF,MAAM,OAAO,CAAC,GAAG,CACf,gBAAgB,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;QACtC,MAAM,QAAQ,GAAG,IAAI,mBAAQ,CAAC,cAAI,CAAC,IAAI,CAAC,oBAAQ,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC,CAAC;QAC7E,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,SAAS,EAAE,CAAC;QAE/C,KAAK,MAAM,cAAc,IAAI,CAAC,cAAc,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,EAAE;YACpF,MAAM,YAAY,GAAG,WAAW,CAAC,cAAc,CAAC,CAAC;YACjD,MAAM,cAAc,GAAG,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAG,cAAc,CAAC,CAAC;YAEtD,IAAI,YAAY,IAAI,cAAc,IAAI,cAAc,KAAK,GAAG,EAAE;gBAC5D,YAAY,CAAC,cAAc,CAAC,GAAG,YAAY,CAAC;aAC7C;SACF;QACD,MAAM,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;IACzC,CAAC,CAAC,CACH,CAAC;AACJ,CAAC;AArBD,sDAqBC","sourcesContent":["import JsonFile from '@expo/json-file';\nimport path from 'path';\n\nimport { Package } from './Packages';\nimport { spawnAsync, spawnJSONCommandAsync } from './Utils';\nimport { EXPO_DIR } from './Constants';\n\nconst NATIVE_APPS_PATHS = [EXPO_DIR, path.join(EXPO_DIR, 'apps/bare-expo')];\n\n/**\n * Workspace info for the single project.\n */\nexport type WorkspaceProjectInfo = {\n  location: string;\n  workspaceDependencies: string[];\n  mismatchedWorkspaceDependencies: string[];\n};\n\n/**\n * An object with workspace's projects info.\n */\nexport type WorkspacesInfo = Record<string, WorkspaceProjectInfo>;\n\n/**\n * Returns an object containing info for all projects in the workspace.\n */\nexport async function getInfoAsync(): Promise<WorkspacesInfo> {\n  const info = await spawnJSONCommandAsync<{ data: string }>('yarn', [\n    '--json',\n    'workspaces',\n    'info',\n  ]);\n  return JSON.parse(info.data);\n}\n\n/**\n * Runs yarn in the root workspace directory.\n */\nexport async function installAsync(): Promise<void> {\n  await spawnAsync('yarn');\n}\n\n/**\n * Returns an array of workspace's native apps, like Expo Client or BareExpo.\n */\nexport function getNativeApps(): Package[] {\n  return NATIVE_APPS_PATHS.map((appPath) => new Package(appPath));\n}\n\n/**\n * Updates the dependency across all workspace projects to given version range.\n */\nexport async function updateDependencyAsync(dependencyName: string, versionRange: string) {\n  const projectLocations = Object.values(await getInfoAsync()).map(\n    (projectInfo) => projectInfo.location\n  );\n\n  await Promise.all(\n    projectLocations.map(async (location) => {\n      const jsonFile = new JsonFile(path.join(EXPO_DIR, location, 'package.json'));\n      const packageJson = await jsonFile.readAsync();\n\n      for (const dependencyType of ['dependencies', 'devDependencies', 'peerDependencies']) {\n        const dependencies = packageJson[dependencyType];\n        const currentVersion = dependencies?.[dependencyName];\n\n        if (dependencies && currentVersion && currentVersion !== '*') {\n          dependencies[dependencyName] = versionRange;\n        }\n      }\n      await jsonFile.writeAsync(packageJson);\n    })\n  );\n}\n"]}