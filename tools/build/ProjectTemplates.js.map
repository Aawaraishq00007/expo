{"version":3,"file":"ProjectTemplates.js","sourceRoot":"","sources":["../src/ProjectTemplates.ts"],"names":[],"mappings":";;;;;;AAAA,gEAAuC;AACvC,wDAA0B;AAC1B,gDAAwB;AAExB,2CAA4C;AAQrC,KAAK,UAAU,iCAAiC;IACrD,MAAM,SAAS,GAAG,MAAM,kBAAE,CAAC,OAAO,CAAC,yBAAa,CAAC,CAAC;IAElD,OAAO,OAAO,CAAC,GAAG,CAChB,SAAS,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;QAC/B,MAAM,WAAW,GAAG,MAAM,mBAAQ,CAAC,SAAS,CAC1C,cAAI,CAAC,IAAI,CAAC,yBAAa,EAAE,QAAQ,EAAE,cAAc,CAAC,CACnD,CAAC;QAEF,OAAO;YACL,IAAI,EAAE,WAAW,CAAC,IAAI;YACtB,OAAO,EAAE,WAAW,CAAC,OAAO;YAC5B,IAAI,EAAE,cAAI,CAAC,IAAI,CAAC,yBAAa,EAAE,QAAQ,CAAC;SACzC,CAAC;IACJ,CAAC,CAAC,CACH,CAAC;AACJ,CAAC;AAhBD,8EAgBC","sourcesContent":["import JsonFile from '@expo/json-file';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { TEMPLATES_DIR } from './Constants';\n\nexport type Template = {\n  name: string;\n  version: string;\n  path: string;\n};\n\nexport async function getAvailableProjectTemplatesAsync(): Promise<Template[]> {\n  const templates = await fs.readdir(TEMPLATES_DIR);\n\n  return Promise.all<Template>(\n    templates.map(async (template) => {\n      const packageJson = await JsonFile.readAsync<Template>(\n        path.join(TEMPLATES_DIR, template, 'package.json')\n      );\n\n      return {\n        name: packageJson.name,\n        version: packageJson.version,\n        path: path.join(TEMPLATES_DIR, template),\n      };\n    })\n  );\n}\n"]}