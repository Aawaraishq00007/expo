{"version":3,"file":"IOSSimulatorTestSuite.js","sourceRoot":"","sources":["../src/IOSSimulatorTestSuite.ts"],"names":[],"mappings":"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","sourcesContent":["import JUnitReportBuilder from 'junit-report-builder';\nimport path from 'path';\n\nimport * as IOSSimulator from './IOSSimulator';\nimport * as Log from './Log';\n\nconst TEST_SUITE_BUNDLE_ID = 'io.expo.testsuite';\nconst TEST_SUITE_END_SENTINEL = '[TEST-SUITE-END]';\n\n// Keep this type in sync with test-suite\ntype TestSuiteResults = {\n  failed: number;\n  failures: string;\n};\n\nexport async function runTestSuiteOnIOSSimulatorAsync(simulatorId, archivePath, reportPath) {\n  Log.collapsed(`Running test-suite on the iOS simulator`);\n  if (!simulatorId) {\n    console.log(`Starting a new simulator`);\n    await IOSSimulator.startSimulatorAsync();\n    simulatorId = 'booted';\n  }\n\n  console.log(`Installing test-suite on the simulator`);\n  await IOSSimulator.installSimulatorAppAsync(simulatorId, path.resolve(archivePath));\n  console.log(`Streaming logs from the simulator`);\n  let resultsPromise = _streamSimulatorLogsAsync(simulatorId);\n  console.log(`Launching the test-suite app and waiting for tests to complete`);\n  await IOSSimulator.launchSimulatorAppAsync(simulatorId, TEST_SUITE_BUNDLE_ID);\n\n  let results = await resultsPromise;\n  if (results.failed === 0) {\n    console.log(`ðŸ˜Š All tests passed`);\n  } else {\n    console.error(`ðŸ˜£ ${results.failed} ${results.failed === 1 ? 'test' : 'tests'} failed`);\n  }\n\n  if (reportPath) {\n    _writeJUnitReport(results, reportPath);\n    console.log(`Saved test results to ${reportPath}`);\n  }\n\n  return results;\n}\n\nfunction _streamSimulatorLogsAsync(simulatorId: string): Promise<TestSuiteResults> {\n  return new Promise((resolve, reject) => {\n    let logProcess = IOSSimulator.getSimulatorLogProcess(\n      simulatorId,\n      '(subsystem == \"host.exp.Exponent\") && (category == \"test\")'\n    );\n    let logStream = new IOSSimulator.IOSLogStream();\n    logProcess.stdout.pipe(logStream);\n\n    logStream.on('data', (entry) => {\n      // Show the log messages in the CI log\n      console.log(entry.eventMessage);\n\n      if (!entry.eventMessage.startsWith(TEST_SUITE_END_SENTINEL)) {\n        return;\n      }\n\n      try {\n        logStream.removeAllListeners('data');\n\n        let resultsJson = entry.eventMessage.substring(TEST_SUITE_END_SENTINEL.length).trim();\n        let results = JSON.parse(resultsJson);\n        resolve(results);\n      } catch (e) {\n        reject(e);\n      } finally {\n        console.log(`Terminating simulator log stream`);\n        logProcess.kill('SIGTERM');\n      }\n    });\n  });\n}\n\nfunction _writeJUnitReport(results: TestSuiteResults, reportPath: string): void {\n  let builder = JUnitReportBuilder.newBuilder();\n  // let suite = builder.testSuite().name('Test Suite');\n\n  // TODO: parse the results\n\n  builder.writeTo(reportPath);\n}\n"]}