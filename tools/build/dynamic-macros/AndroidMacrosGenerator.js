"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAndroidBuildConstantsFromMacrosAsync = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const chalk_1 = __importDefault(require("chalk"));
const Directories = __importStar(require("../Directories"));
const EXPO_DIR = Directories.getExpoRepositoryRootDir();
function formatJavaType(value) {
    if (value == null) {
        return 'String';
    }
    else if (typeof value === 'string') {
        return 'String';
    }
    else if (typeof value === 'number') {
        return 'int';
    }
    throw new Error(`Unsupported literal value: ${value}`);
}
function formatJavaLiteral(value) {
    if (value == null) {
        return 'null';
    }
    else if (typeof value === 'string') {
        value = value.replace(/"/g, '\\"');
        return `"${value}"`;
    }
    else if (typeof value === 'number') {
        return value;
    }
    throw new Error(`Unsupported literal value: ${value}`);
}
async function readExistingSourceAsync(filepath) {
    try {
        return await fs_extra_1.default.readFile(filepath, 'utf8');
    }
    catch (e) {
        return null;
    }
}
async function generateAndroidBuildConstantsFromMacrosAsync(macros) {
    let source;
    // android falls back to published dev home if local dev home
    // doesn't exist or had an error.
    const isLocalManifestEmpty = !macros.BUILD_MACHINE_KERNEL_MANIFEST || macros.BUILD_MACHINE_KERNEL_MANIFEST === '';
    if (isLocalManifestEmpty) {
        macros.BUILD_MACHINE_KERNEL_MANIFEST = macros.DEV_PUBLISHED_KERNEL_MANIFEST;
    }
    console.log(`Using ${chalk_1.default.yellow(isLocalManifestEmpty ? 'published dev' : 'local')} version of Expo Home.`);
    delete macros['DEV_PUBLISHED_KERNEL_MANIFEST'];
    const definitions = Object.entries(macros).map(([name, value]) => `  public static final ${formatJavaType(value)} ${name} = ${formatJavaLiteral(value)};`);
    source = `
package host.exp.exponent.generated;

public class ExponentBuildConstants {
${definitions.join('\n')}
}`;
    return (`
// Copyright 2016-present 650 Industries. All rights reserved.
// @generated by \`expotools android-generate-dynamic-macros\`

${source.trim()}
`.trim() + '\n');
}
exports.generateAndroidBuildConstantsFromMacrosAsync = generateAndroidBuildConstantsFromMacrosAsync;
async function updateBuildConstants(buildConstantsPath, macros) {
    console.log('Generating build config %s ...', chalk_1.default.cyan(path_1.default.relative(EXPO_DIR, buildConstantsPath)));
    const [source, existingSource] = await Promise.all([
        generateAndroidBuildConstantsFromMacrosAsync(macros),
        readExistingSourceAsync(path_1.default.resolve(buildConstantsPath)),
    ]);
    if (source !== existingSource) {
        await fs_extra_1.default.ensureDir(path_1.default.dirname(buildConstantsPath));
        await fs_extra_1.default.writeFile(buildConstantsPath, source, 'utf8');
    }
}
class AndroidMacrosGenerator {
    async generateAsync(options) {
        const { buildConstantsPath, macros } = options;
        await updateBuildConstants(path_1.default.resolve(buildConstantsPath), macros);
    }
    async cleanupAsync(options) {
        // Nothing to clean on Android
    }
}
exports.default = AndroidMacrosGenerator;
//# sourceMappingURL=AndroidMacrosGenerator.js.map