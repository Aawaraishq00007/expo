{"version":3,"file":"IosMacrosGenerator.js","sourceRoot":"","sources":["../../src/dynamic-macros/IosMacrosGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["import { IosPlist, IosPodsTools } from '@expo/xdl';\nimport chalk from 'chalk';\nimport plist from 'plist';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport * as Directories from '../Directories';\nimport * as ProjectVersions from '../ProjectVersions';\n\ninterface PlistObject {\n  [key: string]: any;\n}\n\nconst EXPO_DIR = Directories.getExpoRepositoryRootDir();\n\nasync function readPlistAsync(plistPath: string): Promise<PlistObject> {\n  const plistFileContent = await fs.readFile(plistPath, 'utf8');\n  return plist.parse(plistFileContent);\n}\n\nasync function generateBuildConstantsFromMacrosAsync(\n  buildConfigPlistPath,\n  macros,\n  buildConfiguration,\n  infoPlistContents,\n  keys\n): Promise<PlistObject> {\n  const plistPath = path.dirname(buildConfigPlistPath);\n  const plistName = path.basename(buildConfigPlistPath);\n\n  if (!(await fs.pathExists(buildConfigPlistPath))) {\n    await IosPlist.createBlankAsync(plistPath, plistName);\n  }\n\n  console.log(\n    'Generating build config %s ...',\n    chalk.cyan(path.relative(EXPO_DIR, buildConfigPlistPath))\n  );\n\n  const result = await IosPlist.modifyAsync(plistPath, plistName, (config) => {\n    if (config.USE_GENERATED_DEFAULTS === false) {\n      // this flag means don't generate anything, let the user override.\n      return config;\n    }\n\n    for (const [name, value] of Object.entries(macros)) {\n      config[name] = value || '';\n    }\n\n    config.EXPO_RUNTIME_VERSION = infoPlistContents.CFBundleVersion\n      ? infoPlistContents.CFBundleVersion\n      : infoPlistContents.CFBundleShortVersionString;\n\n    if (!config.API_SERVER_ENDPOINT) {\n      config.API_SERVER_ENDPOINT = 'https://exp.host/--/api/v2/';\n    }\n    if (keys) {\n      const { AMPLITUDE_KEY, AMPLITUDE_DEV_KEY, GOOGLE_MAPS_IOS_API_KEY } = keys;\n      config.DEFAULT_API_KEYS = { AMPLITUDE_KEY, AMPLITUDE_DEV_KEY, GOOGLE_MAPS_IOS_API_KEY };\n    }\n    return validateBuildConstants(config, buildConfiguration);\n  });\n\n  return result;\n}\n\n/**\n *  Adds IS_DEV_KERNEL (bool) and DEV_KERNEL_SOURCE (PUBLISHED, LOCAL)\n *  and errors if there's a problem with the chosen environment.\n */\nfunction validateBuildConstants(config, buildConfiguration) {\n  config.USE_GENERATED_DEFAULTS = true;\n\n  let IS_DEV_KERNEL,\n    DEV_KERNEL_SOURCE = '';\n  if (buildConfiguration === 'Debug') {\n    IS_DEV_KERNEL = true;\n    DEV_KERNEL_SOURCE = config.DEV_KERNEL_SOURCE;\n    if (!DEV_KERNEL_SOURCE) {\n      // default to dev published build if nothing specified\n      DEV_KERNEL_SOURCE = 'PUBLISHED';\n    }\n  } else {\n    IS_DEV_KERNEL = false;\n  }\n\n  if (IS_DEV_KERNEL) {\n    if (DEV_KERNEL_SOURCE === 'LOCAL' && !config.BUILD_MACHINE_KERNEL_MANIFEST) {\n      throw new Error(\n        `Error generating local kernel manifest.\\nMake sure a local kernel is being served, or switch DEV_KERNEL_SOURCE to use PUBLISHED instead.`\n      );\n    }\n\n    if (DEV_KERNEL_SOURCE === 'PUBLISHED' && !config.DEV_PUBLISHED_KERNEL_MANIFEST) {\n      throw new Error(`Error downloading DEV published kernel manifest.\\n`);\n    }\n  }\n\n  config.IS_DEV_KERNEL = IS_DEV_KERNEL;\n  config.DEV_KERNEL_SOURCE = DEV_KERNEL_SOURCE;\n  return config;\n}\n\nasync function writeTemplatesAsync(expoKitPath: string, templateFilesPath: string) {\n  if (expoKitPath) {\n    await renderExpoKitPodspecAsync(expoKitPath, templateFilesPath);\n    await renderExpoKitPodfileAsync(expoKitPath, templateFilesPath);\n  }\n}\n\nasync function renderExpoKitPodspecAsync(\n  expoKitPath: string,\n  templateFilesPath: string\n): Promise<void> {\n  const podspecPath = path.join(expoKitPath, 'ios', 'ExpoKit.podspec');\n  const podspecTemplatePath = path.join(templateFilesPath, 'ios', 'ExpoKit.podspec');\n\n  console.log(\n    'Rendering %s from template %s ...',\n    chalk.cyan(path.relative(EXPO_DIR, podspecPath)),\n    chalk.cyan(path.relative(EXPO_DIR, podspecTemplatePath))\n  );\n\n  await IosPodsTools.renderExpoKitPodspecAsync(podspecTemplatePath, podspecPath, {\n    IOS_EXPONENT_CLIENT_VERSION: await ProjectVersions.getNewestSDKVersionAsync('ios'),\n  });\n}\n\nasync function renderExpoKitPodfileAsync(\n  expoKitPath: string,\n  templateFilesPath: string\n): Promise<void> {\n  const podfilePath = path.join(expoKitPath, 'exponent-view-template', 'ios', 'Podfile');\n  const podfileTemplatePath = path.join(templateFilesPath, 'ios', 'ExpoKit-Podfile');\n\n  console.log(\n    'Rendering %s from template %s ...',\n    chalk.cyan(path.relative(EXPO_DIR, podfilePath)),\n    chalk.cyan(path.relative(EXPO_DIR, podfileTemplatePath))\n  );\n\n  await IosPodsTools.renderPodfileAsync(podfileTemplatePath, podfilePath, {\n    TARGET_NAME: 'exponent-view-template',\n    EXPOKIT_PATH: '../..',\n    REACT_NATIVE_PATH: '../../react-native-lab/react-native',\n    UNIVERSAL_MODULES_PATH: '../../packages',\n  });\n}\n\nexport default class IosMacrosGenerator {\n  async generateAsync(options): Promise<void> {\n    const { infoPlistPath, buildConstantsPath, macros, templateSubstitutions } = options;\n\n    // Read Info.plist\n    const infoPlist = await readPlistAsync(infoPlistPath);\n\n    // Generate EXBuildConstants.plist\n    await generateBuildConstantsFromMacrosAsync(\n      path.resolve(buildConstantsPath),\n      macros,\n      options.configuration,\n      infoPlist,\n      templateSubstitutions\n    );\n\n    // // Generate Podfile and ExpoKit podspec using template files.\n    await writeTemplatesAsync(options.expoKitPath, options.templateFilesPath);\n  }\n}\n"]}