{"version":3,"file":"generateDynamicMacros.js","sourceRoot":"","sources":["../../src/dynamic-macros/generateDynamicMacros.ts"],"names":[],"mappings":"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","sourcesContent":["import JsonFile from '@expo/json-file';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { Directories } from '../expotools';\nimport AndroidMacrosGenerator from './AndroidMacrosGenerator';\nimport IosMacrosGenerator from './IosMacrosGenerator';\nimport macros from './macros';\n\nconst EXPO_DIR = Directories.getExpoRepositoryRootDir();\n\ntype TemplateSubstitutions = {\n  [key: string]: string;\n};\n\nasync function getTemplateSubstitutionsFromSecrets(): Promise<TemplateSubstitutions> {\n  try {\n    return await new JsonFile<TemplateSubstitutions>(\n      path.join(EXPO_DIR, 'secrets', 'keys.json')\n    ).readAsync();\n  } catch (e) {\n    // Don't have access to decrypted secrets, use public keys\n    console.log(\n      \"You don't have access to decrypted secrets. Falling back to `template-files/keys.json`.\"\n    );\n    return await new JsonFile<TemplateSubstitutions>(\n      path.join(EXPO_DIR, 'template-files', 'keys.json')\n    ).readAsync();\n  }\n}\n\nasync function getTemplateSubstitutionsAsync() {\n  const defaultKeys = await getTemplateSubstitutionsFromSecrets();\n\n  try {\n    // Keys from secrets/template-files can be overwritten by private-keys.json file.\n    const privateKeys = await new JsonFile(path.join(EXPO_DIR, 'private-keys.json')).readAsync();\n    return { ...defaultKeys, ...privateKeys };\n  } catch (error) {\n    return defaultKeys;\n  }\n}\n\nasync function generateMacrosAsync(platform, configuration) {\n  const macrosObject = {};\n\n  console.log('Resolving macros...');\n\n  for (const [name, func] of Object.entries(macros)) {\n    // @ts-ignore\n    const macroValue = await func.call(macros, platform, configuration);\n\n    macrosObject[name] = macroValue;\n\n    console.log(\n      'Resolved %s macro to %s',\n      chalk.green(name),\n      chalk.yellow(JSON.stringify(macroValue))\n    );\n  }\n  console.log();\n  return macrosObject;\n}\n\nfunction getMacrosGeneratorForPlatform(platform) {\n  if (platform === 'ios') {\n    return new IosMacrosGenerator();\n  }\n  if (platform === 'android') {\n    return new AndroidMacrosGenerator();\n  }\n  throw new Error(`Platform '${platform}' is not supported.`);\n}\n\nasync function generateDynamicMacrosAsync(args) {\n  try {\n    const { platform } = args;\n    const templateSubstitutions = await getTemplateSubstitutionsAsync();\n\n    const macros = await generateMacrosAsync(platform, args.configuration);\n    const macrosGenerator = getMacrosGeneratorForPlatform(platform);\n\n    await macrosGenerator.generateAsync({ ...args, macros, templateSubstitutions });\n\n    // Copy template files - it is platform-agnostic.\n    await copyTemplateFilesAsync(platform, args, templateSubstitutions);\n  } catch (error) {\n    console.error(\n      `There was an error while generating Expo template files, which could lead to unexpected behavior at runtime:\\n${error.stack}`\n    );\n    process.exit(1);\n  }\n}\n\nasync function readExistingSourceAsync(filepath): Promise<string | null> {\n  try {\n    return await fs.readFile(filepath, 'utf8');\n  } catch (e) {\n    return null;\n  }\n}\n\nasync function copyTemplateFileAsync(\n  source: string,\n  dest: string,\n  templateSubstitutions: TemplateSubstitutions,\n  configuration,\n  isOptional: boolean\n): Promise<void> {\n  let [currentSourceFile, currentDestFile] = await Promise.all([\n    readExistingSourceAsync(source),\n    readExistingSourceAsync(dest),\n  ]);\n\n  if (!currentSourceFile) {\n    console.error(`Couldn't find ${chalk.magenta(source)} file.`);\n    process.exit(1);\n  }\n\n  for (const [textToReplace, value] of Object.entries(templateSubstitutions)) {\n    currentSourceFile = currentSourceFile.replace(\n      new RegExp(`\\\\$\\\\{${textToReplace}\\\\}`, 'g'),\n      value\n    );\n  }\n\n  if (configuration === 'debug') {\n    // We need these permissions when testing but don't want them\n    // ending up in our release.\n    currentSourceFile = currentSourceFile.replace(\n      `<!-- ADD TEST PERMISSIONS HERE -->`,\n      `<uses-permission android:name=\"android.permission.WRITE_CONTACTS\" />`\n    );\n  }\n\n  if (currentSourceFile !== currentDestFile) {\n    try {\n      await fs.writeFile(dest, currentSourceFile, 'utf8');\n    } catch (error) {\n      if (!isOptional) throw error;\n    }\n  }\n}\n\ntype TemplatePaths = Record<string, string>;\ntype TemplatePathsFile = {\n  paths: TemplatePaths;\n  generateOnly: TemplatePaths;\n};\n\nasync function copyTemplateFilesAsync(platform: string, args: any, templateSubstitutions: any) {\n  const templateFilesPath = args.templateFilesPath || path.join(EXPO_DIR, 'template-files');\n  const templatePathsFile = (await new JsonFile(\n    path.join(templateFilesPath, `${platform}-paths.json`)\n  ).readAsync()) as TemplatePathsFile;\n  const templatePaths = { ...templatePathsFile.paths, ...templatePathsFile.generateOnly };\n  const checkIgnoredTemplatePaths = Object.values(templatePathsFile.generateOnly);\n  const promises: Promise<any>[] = [];\n  const skipTemplates: string[] = args.skipTemplates || [];\n  for (const [source, dest] of Object.entries(templatePaths)) {\n    if (skipTemplates.includes(source)) {\n      console.log(\n        'Skipping template %s ...',\n        chalk.cyan(path.join(templateFilesPath, platform, source))\n      );\n      continue;\n    }\n\n    const isOptional = checkIgnoredTemplatePaths.includes(dest);\n    console.log(\n      'Rendering %s from template %s %s...',\n      chalk.cyan(path.join(EXPO_DIR, dest)),\n      chalk.cyan(path.join(templateFilesPath, platform, source)),\n      isOptional ? chalk.yellow('(Optional) ') : ''\n    );\n\n    promises.push(\n      copyTemplateFileAsync(\n        path.join(templateFilesPath, platform, source),\n        path.join(EXPO_DIR, dest),\n        templateSubstitutions,\n        args.configuration,\n        isOptional\n      )\n    );\n  }\n\n  await Promise.all(promises);\n}\n\nexport { generateDynamicMacrosAsync, getTemplateSubstitutionsAsync };\n"]}