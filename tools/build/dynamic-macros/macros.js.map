{"version":3,"file":"macros.js","sourceRoot":"","sources":["../../src/dynamic-macros/macros.ts"],"names":[],"mappings":"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","sourcesContent":["import JsonFile from '@expo/json-file';\nimport spawnAsync from '@expo/spawn-async';\nimport { ExponentTools, Project, UrlUtils } from '@expo/xdl';\nimport chalk from 'chalk';\nimport ip from 'ip';\nimport os from 'os';\nimport path from 'path';\nimport request from 'request-promise-native';\nimport uuidv4 from 'uuid/v4';\n\nimport { getExpoRepositoryRootDir } from '../Directories';\nimport { getHomeSDKVersionAsync } from '../ProjectVersions';\n\ninterface Manifest {\n  id: string;\n  name: string;\n}\n\n// some files are absent on turtle builders and we don't want log errors there\nconst isTurtle = !!process.env.TURTLE_WORKING_DIR_PATH;\n\nconst EXPO_DIR = getExpoRepositoryRootDir();\n\nasync function getManifestAsync(\n  url: string,\n  platform: string,\n  sdkVersion: string | null\n): Promise<Manifest> {\n  const headers = {\n    'Exponent-Platform': platform,\n    Accept: 'application/expo+json,application/json',\n  };\n  if (sdkVersion) {\n    headers['Exponent-SDK-Version'] = sdkVersion;\n  }\n  return await ExponentTools.getManifestAsync(url, headers, {\n    logger: {\n      log: () => {},\n      error: () => {},\n      info: () => {},\n    },\n  });\n}\n\nasync function getSavedDevHomeUrlAsync(): Promise<string> {\n  const devHomeConfig = await new JsonFile(path.join(EXPO_DIR, 'dev-home-config.json')).readAsync();\n  return devHomeConfig.url as string;\n}\n\nfunction kernelManifestObjectToJson(manifest) {\n  if (!manifest.id) {\n    // hack for now because unsigned manifest won't have an id\n    manifest.id = '@exponent/home';\n  }\n  manifest.sdkVersion = 'UNVERSIONED';\n  return JSON.stringify(manifest);\n}\n\nexport default {\n  async TEST_APP_URI() {\n    if (process.env.TEST_SUITE_URI) {\n      return process.env.TEST_SUITE_URI;\n    } else {\n      try {\n        let testSuitePath = path.join(__dirname, '..', 'apps', 'test-suite');\n        let status = await Project.currentStatus(testSuitePath);\n        if (status === 'running') {\n          return await UrlUtils.constructManifestUrlAsync(testSuitePath);\n        } else {\n          return '';\n        }\n      } catch (e) {\n        return '';\n      }\n    }\n  },\n\n  async TEST_CONFIG() {\n    if (process.env.TEST_CONFIG) {\n      return process.env.TEST_CONFIG;\n    } else {\n      return '';\n    }\n  },\n\n  async TEST_SERVER_URL() {\n    let url = 'TODO';\n\n    try {\n      let lanAddress = ip.address();\n      let localServerUrl = `http://${lanAddress}:3013`;\n      let result = await request.get({\n        url: `${localServerUrl}/expo-test-server-status`,\n        timeout: 500, // ms\n        resolveWithFullResponse: true,\n      });\n      if (result.body === 'running!') {\n        url = localServerUrl;\n      }\n    } catch (e) {}\n\n    return url;\n  },\n\n  async TEST_RUN_ID() {\n    return process.env.UNIVERSE_BUILD_ID || uuidv4();\n  },\n\n  async BUILD_MACHINE_LOCAL_HOSTNAME() {\n    if (process.env.SHELL_APP_BUILDER) {\n      return '';\n    }\n\n    try {\n      let result = await spawnAsync('scutil', ['--get', 'LocalHostName']);\n      return `${result.stdout.trim()}.local`;\n    } catch (e) {\n      if (e.code !== 'ENOENT') {\n        console.error(e.stack);\n      }\n      return os.hostname();\n    }\n  },\n\n  async DEV_PUBLISHED_KERNEL_MANIFEST(platform) {\n    let manifest, savedDevHomeUrl;\n    try {\n      savedDevHomeUrl = await getSavedDevHomeUrlAsync();\n      const sdkVersion = await this.TEMPORARY_SDK_VERSION();\n\n      manifest = await getManifestAsync(savedDevHomeUrl, platform, sdkVersion);\n    } catch (e) {\n      const msg = `Unable to download manifest from ${savedDevHomeUrl}: ${e.message}`;\n      console[isTurtle ? 'debug' : 'error'](msg);\n      return '';\n    }\n\n    return kernelManifestObjectToJson(manifest);\n  },\n\n  async BUILD_MACHINE_KERNEL_MANIFEST(platform) {\n    if (process.env.SHELL_APP_BUILDER) {\n      return '';\n    }\n\n    const pathToHome = 'home';\n    const url = await UrlUtils.constructManifestUrlAsync(path.join(EXPO_DIR, pathToHome));\n\n    try {\n      const manifest = await getManifestAsync(url, platform, null);\n\n      if (manifest.name !== 'expo-home') {\n        console.log(\n          `Manifest at ${url} is not expo-home; using published kernel manifest instead...`\n        );\n        return '';\n      }\n      return kernelManifestObjectToJson(manifest);\n    } catch (e) {\n      console.error(\n        chalk.red(\n          `Unable to generate manifest from ${chalk.cyan(\n            pathToHome\n          )}: Failed to fetch manifest from ${chalk.cyan(url)}`\n        )\n      );\n      return '';\n    }\n  },\n\n  async TEMPORARY_SDK_VERSION(): Promise<string> {\n    return await getHomeSDKVersionAsync();\n  },\n\n  INITIAL_URL() {\n    return null;\n  },\n};\n"]}