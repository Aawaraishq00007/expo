{"version":3,"file":"AndroidMacrosGenerator.js","sourceRoot":"","sources":["../../src/dynamic-macros/AndroidMacrosGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs-extra';\nimport chalk from 'chalk';\n\nimport * as Directories from '../Directories';\n\nconst EXPO_DIR = Directories.getExpoRepositoryRootDir();\n\nfunction formatJavaType(value) {\n  if (value == null) {\n    return 'String';\n  } else if (typeof value === 'string') {\n    return 'String';\n  } else if (typeof value === 'number') {\n    return 'int';\n  }\n  throw new Error(`Unsupported literal value: ${value}`);\n}\n\nfunction formatJavaLiteral(value) {\n  if (value == null) {\n    return 'null';\n  } else if (typeof value === 'string') {\n    value = value.replace(/\"/g, '\\\\\"');\n    return `\"${value}\"`;\n  } else if (typeof value === 'number') {\n    return value;\n  }\n  throw new Error(`Unsupported literal value: ${value}`);\n}\n\nasync function readExistingSourceAsync(filepath) {\n  try {\n    return await fs.readFile(filepath, 'utf8');\n  } catch (e) {\n    return null;\n  }\n}\n\nexport async function generateAndroidBuildConstantsFromMacrosAsync(macros) {\n  let source;\n\n  // android falls back to published dev home if local dev home\n  // doesn't exist or had an error.\n  const isLocalManifestEmpty =\n    !macros.BUILD_MACHINE_KERNEL_MANIFEST || macros.BUILD_MACHINE_KERNEL_MANIFEST === '';\n\n  if (isLocalManifestEmpty) {\n    macros.BUILD_MACHINE_KERNEL_MANIFEST = macros.DEV_PUBLISHED_KERNEL_MANIFEST;\n  }\n\n  console.log(\n    `Using ${chalk.yellow(isLocalManifestEmpty ? 'published dev' : 'local')} version of Expo Home.`\n  );\n\n  delete macros['DEV_PUBLISHED_KERNEL_MANIFEST'];\n\n  const definitions = Object.entries(macros).map(\n    ([name, value]) =>\n      `  public static final ${formatJavaType(value)} ${name} = ${formatJavaLiteral(value)};`\n  );\n\n  source = `\npackage host.exp.exponent.generated;\n\npublic class ExponentBuildConstants {\n${definitions.join('\\n')}\n}`;\n\n  return (\n    `\n// Copyright 2016-present 650 Industries. All rights reserved.\n// @generated by \\`expotools android-generate-dynamic-macros\\`\n\n${source.trim()}\n`.trim() + '\\n'\n  );\n}\n\nasync function updateBuildConstants(buildConstantsPath, macros) {\n  console.log(\n    'Generating build config %s ...',\n    chalk.cyan(path.relative(EXPO_DIR, buildConstantsPath))\n  );\n\n  const [source, existingSource] = await Promise.all([\n    generateAndroidBuildConstantsFromMacrosAsync(macros),\n    readExistingSourceAsync(path.resolve(buildConstantsPath)),\n  ]);\n\n  if (source !== existingSource) {\n    await fs.ensureDir(path.dirname(buildConstantsPath));\n    await fs.writeFile(buildConstantsPath, source, 'utf8');\n  }\n}\n\nexport default class AndroidMacrosGenerator {\n  async generateAsync(options): Promise<void> {\n    const { buildConstantsPath, macros } = options;\n\n    await updateBuildConstants(path.resolve(buildConstantsPath), macros);\n  }\n\n  async cleanupAsync(options): Promise<void> {\n    // Nothing to clean on Android\n  }\n}\n"]}