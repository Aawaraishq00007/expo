{"version":3,"file":"Versions.js","sourceRoot":"","sources":["../src/Versions.ts"],"names":[],"mappings":";;;AAAA,mCAA6C;AAE7C,IAAY,eAGX;AAHD,WAAY,eAAe;IACzB,0CAAuB,CAAA;IACvB,+CAA4B,CAAA;AAC9B,CAAC,EAHW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAG1B;AA0BM,KAAK,UAAU,gBAAgB,CACpC,UAA2B,eAAe,CAAC,OAAO;IAElD,OAAO,MAAM,cAAc,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,cAAQ,CAAC,aAAa,EAA6B,CAAC,CAAC;AAClG,CAAC;AAJD,4CAIC;AAEM,KAAK,UAAU,mBAAmB,CACvC,UAAkB,EAClB,UAA2B,eAAe,CAAC,OAAO;;IAElD,MAAM,QAAQ,GAAG,MAAM,gBAAgB,CAAC,OAAO,CAAC,CAAC;IACjD,mBAAO,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,WAAW,0CAAG,UAAU,oCAAK,IAAI,CAAC;AACrD,CAAC;AAND,kDAMC;AAEM,KAAK,UAAU,gBAAgB,CACpC,QAAwB,EACxB,UAA2B,eAAe,CAAC,OAAO;IAElD,OAAO,MAAM,cAAc,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,cAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;AAClF,CAAC;AALD,4CAKC;AAEM,KAAK,UAAU,sBAAsB,CAC1C,UAAkB,EAClB,QAA4F;;IAE5F,MAAM,QAAQ,GAAG,MAAM,gBAAgB,EAAE,CAAC;IAC1C,MAAM,WAAW,GAAG,MAAM,QAAQ,OAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,mCAAI,EAAE,CAAC,CAAC;IAE3E,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,WAAW,CAAC;IAC/C,MAAM,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IACjC,OAAO,WAAW,CAAC;AACrB,CAAC;AAVD,wDAUC;AAED,KAAK,UAAU,cAAc,CAC3B,OAAwB,EACxB,MAA4B;IAE5B,MAAM,YAAY,GAAG,YAAM,CAAC,GAAG,CAAC,IAAI,CAAC;IACrC,YAAM,CAAC,GAAG,CAAC,IAAI,GAAG,OAAO,CAAC;IAC1B,MAAM,MAAM,GAAG,MAAM,MAAM,EAAE,CAAC;IAC9B,YAAM,CAAC,GAAG,CAAC,IAAI,GAAG,YAAY,CAAC;IAC/B,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { Config, Versions } from '@expo/xdl';\n\nexport enum VersionsApiHost {\n  PRODUCTION = 'exp.host',\n  STAGING = 'staging.exp.host',\n}\n\nexport type VersionsSchema = {\n  sdkVersions: Record<string, VersionsSdkSchema>;\n  turtleSdkVersions: {\n    android: string;\n    ios: string;\n  };\n};\n\nexport type VersionsSdkSchema = Partial<{\n  androidClientUrl: string;\n  androidClientVersion: string;\n  androidExpoViewUrl: string;\n  expokitNpmPackage: string;\n  expoReactNativeTag: string;\n  facebookReactNativeVersion: string;\n  facebookReactVersion: string;\n  iosClientUrl: string;\n  iosClientVersion: string;\n  iosExpoViewUrl: string;\n  packagesToInstallWhenEjecting: Record<string, string>;\n  relatedPackages: Record<string, string>;\n  releaseNoteUrl: string;\n}>;\n\nexport async function getVersionsAsync(\n  apiHost: VersionsApiHost = VersionsApiHost.STAGING\n): Promise<VersionsSchema> {\n  return await runWithApiHost(apiHost, () => Versions.versionsAsync() as Promise<VersionsSchema>);\n}\n\nexport async function getSdkVersionsAsync(\n  sdkVersion: string,\n  apiHost: VersionsApiHost = VersionsApiHost.STAGING\n): Promise<VersionsSdkSchema | null> {\n  const versions = await getVersionsAsync(apiHost);\n  return versions?.sdkVersions?.[sdkVersion] ?? null;\n}\n\nexport async function setVersionsAsync(\n  versions: VersionsSchema,\n  apiHost: VersionsApiHost = VersionsApiHost.STAGING\n): Promise<void> {\n  return await runWithApiHost(apiHost, () => Versions.setVersionsAsync(versions));\n}\n\nexport async function modifySdkVersionsAsync(\n  sdkVersion: string,\n  modifier: (sdkVersions: VersionsSdkSchema) => VersionsSdkSchema | Promise<VersionsSdkSchema>\n): Promise<VersionsSdkSchema> {\n  const versions = await getVersionsAsync();\n  const sdkVersions = await modifier(versions.sdkVersions[sdkVersion] ?? {});\n\n  versions.sdkVersions[sdkVersion] = sdkVersions;\n  await setVersionsAsync(versions);\n  return sdkVersions;\n}\n\nasync function runWithApiHost<T = any>(\n  apiHost: VersionsApiHost,\n  lambda: () => T | Promise<T>\n): Promise<T> {\n  const originalHost = Config.api.host;\n  Config.api.host = apiHost;\n  const result = await lambda();\n  Config.api.host = originalHost;\n  return result;\n}\n"]}