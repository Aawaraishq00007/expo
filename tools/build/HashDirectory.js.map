{"version":3,"file":"HashDirectory.js","sourceRoot":"","sources":["../src/HashDirectory.ts"],"names":[],"mappings":"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","sourcesContent":["import globby from 'globby';\nimport path from 'path';\nimport fs from 'fs';\nimport _ from 'lodash';\nimport hashFiles from 'hash-files';\nimport spawnAsync from '@expo/spawn-async';\n\nimport * as Directories from './Directories';\n\nexport async function getListOfFilesAsync(directory: string): Promise<string[]> {\n  let expoGitignore = fs.readFileSync(\n    path.join(Directories.getExpoRepositoryRootDir(), '.gitignore'),\n    'utf8'\n  );\n  let directoryGitignore = '';\n  try {\n    directoryGitignore = fs.readFileSync(path.join(directory, '.gitignore'), 'utf8');\n  } catch (e) {\n    // Don't worry if we can't find this gitignore\n  }\n  let gitignoreLines = [...expoGitignore.split('\\n'), ...directoryGitignore.split('\\n')].filter(\n    (line) => {\n      return _.trim(line).length > 0 && !_.trim(line).startsWith('#');\n    }\n  );\n\n  let gitignoreGlobPatterns: string[] = [];\n\n  gitignoreLines.forEach((line) => {\n    // Probably doesn't cover every gitignore possiblity but works better than the gitignore-to-glob\n    // package on npm\n    let firstCharacter = '';\n    if (line.startsWith('!')) {\n      line = line.substring(1);\n    } else {\n      firstCharacter = '!';\n    }\n\n    if (line.startsWith('/')) {\n      line = line.substring(1);\n    }\n\n    gitignoreGlobPatterns.push(firstCharacter + line);\n    gitignoreGlobPatterns.push(firstCharacter + line + '/**');\n    gitignoreGlobPatterns.push(firstCharacter + '/**' + line);\n    gitignoreGlobPatterns.push(firstCharacter + '/**' + line + '/**');\n  });\n\n  let files = await globby(['**', ...gitignoreGlobPatterns], {\n    cwd: directory,\n  });\n  return files.map((file) => path.resolve(directory, file));\n}\n\nexport async function hashFilesAsync(options: { [key: string]: any }): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    hashFiles(options, (error, hash) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(hash);\n      }\n    });\n  });\n}\n\nexport async function hashDirectoryAsync(directory: string): Promise<string> {\n  let files = await getListOfFilesAsync(directory);\n  let hash = await hashFilesAsync({\n    files,\n    noGlob: true,\n  });\n\n  return hash;\n}\n\nexport async function hashDirectoryWithVersionsAsync(directory: string): Promise<string> {\n  // Add Node and Yarn versions to the hash\n  let yarnVersion = (await spawnAsync('yarn', ['--version'])).stdout;\n  let metadataFilename = path.join(directory, 'HASH_DIRECTORY_METADATA');\n  fs.writeFileSync(\n    metadataFilename,\n    `NODE_VERSION=${process.version}\nYARN_VERSION=${yarnVersion}`\n  );\n\n  let hash = await hashDirectoryAsync(directory);\n\n  fs.unlinkSync(metadataFilename);\n  return hash;\n}\n"]}