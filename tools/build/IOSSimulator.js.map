{"version":3,"file":"IOSSimulator.js","sourceRoot":"","sources":["../src/IOSSimulator.ts"],"names":[],"mappings":";;;;;;AAAA,iDAAsC;AACtC,mCAAwE;AACxE,oEAA2C;AAE3C;;GAEG;AACI,KAAK,UAAU,mBAAmB;IACvC,IAAI;QACF,MAAM,qBAAU,CAAC,OAAO,EAAE,CAAC,aAAa,EAAE,IAAI,EAAE,mBAAmB,CAAC,CAAC,CAAC;KACvE;IAAC,OAAO,CAAC,EAAE;QACV,2CAA2C;QAC3C,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,yBAAyB,CAAC,EAAE;YACjD,MAAM,CAAC,CAAC;SACT;KACF;AACH,CAAC;AATD,kDASC;AAEM,KAAK,UAAU,wBAAwB,CAC5C,WAAmB,EACnB,WAAmB;IAEnB,IAAI;QACF,MAAM,qBAAU,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC;KAC5E;IAAC,OAAO,CAAC,EAAE;QACV,IAAI,KAAK,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QAC/B,KAAa,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;QACjC,MAAM,KAAK,CAAC;KACb;AACH,CAAC;AAXD,4DAWC;AAEM,KAAK,UAAU,uBAAuB,CAC3C,WAAmB,EACnB,gBAAwB;IAExB,IAAI;QACF,MAAM,qBAAU,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,gBAAgB,CAAC,CAAC,CAAC;KAChF;IAAC,OAAO,CAAC,EAAE;QACV,IAAI,KAAK,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QAC/B,KAAa,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;QACjC,MAAM,KAAK,CAAC;KACb;AACH,CAAC;AAXD,0DAWC;AAED,SAAgB,sBAAsB,CAAC,WAAmB,EAAE,SAAkB;IAC5E,OAAO,qBAAK,CACV,OAAO,EACP;QACE,QAAQ;QACR,OAAO;QACP,WAAW;QACX,KAAK;QACL,QAAQ;QACR,SAAS;QACT,MAAM;QACN,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;KACjD,EACD;QACE,KAAK,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,SAAS,CAAC;KACrC,CACF,CAAC;AACJ,CAAC;AAjBD,wDAiBC;AAED,MAAa,YAAa,SAAQ,kBAAS;IACzC,YAAY,OAA0B;QACpC,KAAK,CAAC,EAAE,GAAG,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;IAC1C,CAAC;IAED,UAAU,CAAC,IAAY,EAAE,QAAgB,EAAE,QAA2B;QACpE,6FAA6F;QAC7F,6BAA6B;QAC7B,IAAI,KAAK,CAAC;QACV,IAAI;YACF,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;SAC3C;QAAC,OAAO,CAAC,EAAE,GAAE;QAEd,IAAI,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,YAAY,EAAE;YACvB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAClB;QACD,QAAQ,EAAE,CAAC;IACb,CAAC;CACF;AAlBD,oCAkBC","sourcesContent":["import { spawn } from 'child_process';\nimport { Transform, TransformCallback, TransformOptions } from 'stream';\nimport spawnAsync from '@expo/spawn-async';\n\n/**\n * Starts an arbitrary iOS simulator so that simctl can reference a \"booted\" simulator.\n */\nexport async function startSimulatorAsync(): Promise<void> {\n  try {\n    await spawnAsync('xcrun', ['instruments', '-w', 'iPhone X (11.2) [']);\n  } catch (e) {\n    // Instruments exits with an expected error\n    if (!e.stderr.includes('Instruments Usage Error')) {\n      throw e;\n    }\n  }\n}\n\nexport async function installSimulatorAppAsync(\n  simulatorId: string,\n  archivePath: string\n): Promise<void> {\n  try {\n    await spawnAsync('xcrun', ['simctl', 'install', simulatorId, archivePath]);\n  } catch (e) {\n    let error = new Error(e.stderr);\n    (error as any).status = e.status;\n    throw error;\n  }\n}\n\nexport async function launchSimulatorAppAsync(\n  simulatorId: string,\n  bundleIdentifier: string\n): Promise<void> {\n  try {\n    await spawnAsync('xcrun', ['simctl', 'launch', simulatorId, bundleIdentifier]);\n  } catch (e) {\n    let error = new Error(e.stderr);\n    (error as any).status = e.status;\n    throw error;\n  }\n}\n\nexport function getSimulatorLogProcess(simulatorId: string, predicate?: string) {\n  return spawn(\n    'xcrun',\n    [\n      'simctl',\n      'spawn',\n      simulatorId,\n      'log',\n      'stream',\n      '--style',\n      'json',\n      ...(predicate ? ['--predicate', predicate] : []),\n    ],\n    {\n      stdio: ['ignore', 'pipe', 'inherit'],\n    }\n  );\n}\n\nexport class IOSLogStream extends Transform {\n  constructor(options?: TransformOptions) {\n    super({ ...options, objectMode: true });\n  }\n\n  _transform(data: Buffer, encoding: string, callback: TransformCallback): void {\n    // In practice, we receive each log entry as a separate chunk and can test if they are valid,\n    // JSON-formatted log entries\n    let entry;\n    try {\n      entry = JSON.parse(data.toString('utf8'));\n    } catch (e) {}\n\n    if (entry?.eventMessage) {\n      this.push(entry);\n    }\n    callback();\n  }\n}\n"]}