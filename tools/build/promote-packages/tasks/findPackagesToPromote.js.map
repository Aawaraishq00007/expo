{"version":3,"file":"findPackagesToPromote.js","sourceRoot":"","sources":["../../../src/promote-packages/tasks/findPackagesToPromote.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAE5B,0DAAkC;AAClC,mDAAyC;AAGzC;;GAEG;AACU,QAAA,qBAAqB,GAAG,IAAI,kBAAI,CAC3C;IACE,IAAI,EAAE,uBAAuB;CAC9B,EACD,KAAK,EAAE,OAAiB,EAAE,OAAuB,EAA8B,EAAE;IAC/E,gBAAM,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;IAEzD,MAAM,UAAU,GAAa,EAAE,CAAC;IAEhC,MAAM,OAAO,CAAC,GAAG,CACf,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;;QAC3B,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;QACvC,MAAM,eAAe,GAAG,MAAM,GAAG,CAAC,gBAAgB,EAAE,CAAC;QACrD,MAAM,gBAAgB,eAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAG,WAAW,2CAAI,OAAO,CAAC,GAAG,oCAAK,IAAI,CAAC;QACvE,MAAM,UAAU,GAAG,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAErE,KAAK,CAAC,QAAQ,GAAG,eAAe,CAAC;QACjC,KAAK,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QAC1C,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,gBAAgB,IAAI,gBAAM,CAAC,EAAE,CAAC,GAAG,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;QAEzF,IAAI,UAAU,IAAI,CAAC,CAAC,KAAK,CAAC,UAAU,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;YACvE,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACzB;IACH,CAAC,CAAC,CACH,CAAC;IAEF,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;QAC3B,gBAAM,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC;QAChD,OAAO,kBAAI,CAAC,IAAI,CAAC;KAClB;IACD,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;AAC/B,CAAC,CACF,CAAC","sourcesContent":["import semver from 'semver';\n\nimport logger from '../../Logger';\nimport { Task } from '../../TasksRunner';\nimport { CommandOptions, Parcel, TaskArgs } from '../types';\n\n/**\n * Finds packages whose local version is not tagged as the target tag provided as a command option (defaults to `latest`).\n */\nexport const findPackagesToPromote = new Task<TaskArgs>(\n  {\n    name: 'findPackagesToPromote',\n  },\n  async (parcels: Parcel[], options: CommandOptions): Promise<symbol | TaskArgs> => {\n    logger.info('\\nðŸ‘€ Searching for packages to promote...');\n\n    const newParcels: Parcel[] = [];\n\n    await Promise.all(\n      parcels.map(async (parcel) => {\n        const { pkg, pkgView, state } = parcel;\n        const currentDistTags = await pkg.getDistTagsAsync();\n        const versionToReplace = pkgView?.['dist-tags']?.[options.tag] ?? null;\n        const canPromote = pkgView && !currentDistTags.includes(options.tag);\n\n        state.distTags = currentDistTags;\n        state.versionToReplace = versionToReplace;\n        state.isDemoting = !!versionToReplace && semver.lt(pkg.packageVersion, versionToReplace);\n\n        if (canPromote && (!state.isDemoting || options.list || options.demote)) {\n          newParcels.push(parcel);\n        }\n      })\n    );\n\n    if (newParcels.length === 0) {\n      logger.success('\\nâœ… No packages to promote.\\n');\n      return Task.STOP;\n    }\n    return [newParcels, options];\n  }\n);\n"]}