{"version":3,"file":"Logger.js","sourceRoot":"","sources":["../src/Logger.ts"],"names":[],"mappings":";;;;;;AAAA,kDAAqC;AACrC,wDAAgC;AAMhC,MAAM,gBAAgB,GAAmB,CAAC,KAAe,EAAE,KAAmB,EAAE,IAAc,EAAE,EAAE;IAChG,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;AAC3E,CAAC,CAAC;AAEF;;GAEG;AACH,MAAa,MAAM;IACjB,YAAqB,WAA2B,gBAAgB;QAA3C,aAAQ,GAAR,QAAQ,CAAmC;IAAG,CAAC;IAEpE,OAAO,CAAC,GAAG,IAAW;QACpB,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,eAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,GAAG,IAAW;QAClB,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,eAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED,GAAG,CAAC,GAAG,IAAW;QAChB,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,OAAO,CAAC,GAAG,IAAW;QACpB,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,eAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;IAED,IAAI,CAAC,GAAG,IAAW;QACjB,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,eAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;IAED,IAAI,CAAC,GAAG,IAAW;QACjB,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,eAAK,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,GAAG,IAAW;QAClB,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,eAAK,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED,KAAK;QACH,OAAO,IAAI,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAED,SAAS;QACP,kBAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3C,kBAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACxC,CAAC;CACF;AAvCD,wBAuCC;AAED;;;GAGG;AACH,MAAa,WAAY,SAAQ,MAAM;IAGrC,YAAqB,iBAAiC,gBAAgB;QACpE,KAAK,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;YAC3B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAHgB,mBAAc,GAAd,cAAc,CAAmC;QAF7D,gBAAW,GAAsC,EAAE,CAAC;QAM3D,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IACxB,CAAC;IAED,KAAK;QACH,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;QAC5F,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;IAC9B,CAAC;CACF;AAdD,kCAcC;AAED,kBAAe,IAAI,MAAM,EAAE,CAAC","sourcesContent":["import chalk, { Chalk } from 'chalk';\nimport readline from 'readline';\n\ntype LogLevel = 'log' | 'debug' | 'info' | 'warn' | 'error';\n\ntype LoggerResolver = (level: LogLevel, color: Chalk | null, args: string[]) => void;\n\nconst CONSOLE_RESOLVER: LoggerResolver = (level: LogLevel, color: Chalk | null, args: string[]) => {\n  return console[level](...(color ? args.map((arg) => color(arg)) : args));\n};\n\n/**\n * Basic logger just for simple console logging with colored output.\n */\nexport class Logger {\n  constructor(readonly resolver: LoggerResolver = CONSOLE_RESOLVER) {}\n\n  verbose(...args: any[]): void {\n    this.resolver('debug', chalk.dim, args);\n  }\n\n  debug(...args: any[]): void {\n    this.resolver('debug', chalk.gray, args);\n  }\n\n  log(...args: any[]): void {\n    this.resolver('log', null, args);\n  }\n\n  success(...args: any[]): void {\n    this.resolver('log', chalk.green, args);\n  }\n\n  info(...args: any[]): void {\n    this.resolver('info', chalk.cyan, args);\n  }\n\n  warn(...args: any[]): void {\n    this.resolver('warn', chalk.yellow.bold, args);\n  }\n\n  error(...args: any[]): void {\n    this.resolver('error', chalk.red.bold, args);\n  }\n\n  batch(): LoggerBatch {\n    return new LoggerBatch(this.resolver);\n  }\n\n  clearLine() {\n    readline.moveCursor(process.stdout, 0, -1);\n    readline.clearLine(process.stdout, 0);\n  }\n}\n\n/**\n * Batched logger, it batches all logs until they're flushed.\n * Useful for asynchronous simultaneous operations to preserve logs order.\n */\nexport class LoggerBatch extends Logger {\n  readonly batchedLogs: [LogLevel, Chalk | null, any[]][] = [];\n\n  constructor(readonly parentResolver: LoggerResolver = CONSOLE_RESOLVER) {\n    super((level, color, args) => {\n      this.batchedLogs.push([level, color, args]);\n    });\n    this.batchedLogs = [];\n  }\n\n  flush() {\n    this.batchedLogs.forEach(([level, color, args]) => this.parentResolver(level, color, args));\n    this.batchedLogs.length = 0;\n  }\n}\n\nexport default new Logger();\n"]}