{"version":3,"file":"askForSDKVersionAsync.js","sourceRoot":"","sources":["../../src/utils/askForSDKVersionAsync.ts"],"names":[],"mappings":";;;;;AAAA,kDAA0B;AAC1B,oDAA4B;AAC5B,wDAAgC;AAEhC,wDAAmE;AAEpD,KAAK,UAAU,qBAAqB,CACjD,QAAkB,EAClB,iBAA0B;IAE1B,MAAM,WAAW,GAAG,MAAM,qCAAmB,CAAC,QAAQ,CAAC,CAAC;IAExD,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE;QAClB,IAAI,iBAAiB,EAAE;YACrB,OAAO,CAAC,GAAG,CACT,GAAG,eAAK,CAAC,GAAG,CAAC,gBAAgB,CAAC,iCAAiC,eAAK,CAAC,IAAI,CACvE,iBAAiB,CAClB,GAAG,CACL,CAAC;YACF,OAAO,iBAAiB,CAAC;SAC1B;QACD,MAAM,IAAI,KAAK,CACb,GAAG,eAAK,CAAC,GAAG,CAAC,gBAAgB,CAAC,mDAAmD,CAClF,CAAC;KACH;IAED,MAAM,YAAY,GAChB,iBAAiB,IAAI,WAAW,CAAC,QAAQ,CAAC,iBAAiB,CAAC;QAC1D,CAAC,CAAC,iBAAiB;QACnB,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC1C,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,kBAAQ,CAAC,MAAM,CAAyB;QACnE;YACE,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,YAAY;YAClB,OAAO,EAAE,mEAAmE;YAC5E,OAAO,EAAE,YAAY;YACrB,OAAO,EAAE,WAAW;YACpB,QAAQ,CAAC,KAAK;gBACZ,IAAI,CAAC,gBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;oBACxB,OAAO,oBAAoB,eAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;iBAChD;gBACD,OAAO,IAAI,CAAC;YACd,CAAC;SACF;KACF,CAAC,CAAC;IACH,OAAO,UAAU,CAAC;AACpB,CAAC;AAxCD,wCAwCC","sourcesContent":["import chalk from 'chalk';\nimport semver from 'semver';\nimport inquirer from 'inquirer';\n\nimport { Platform, getSDKVersionsAsync } from '../ProjectVersions';\n\nexport default async function askForSDKVersionAsync(\n  platform: Platform,\n  defaultSdkVersion?: string\n) {\n  const sdkVersions = await getSDKVersionsAsync(platform);\n\n  if (process.env.CI) {\n    if (defaultSdkVersion) {\n      console.log(\n        `${chalk.red('`--sdkVersion`')} not provided - defaulting to ${chalk.cyan(\n          defaultSdkVersion\n        )}.`\n      );\n      return defaultSdkVersion;\n    }\n    throw new Error(\n      `${chalk.red('`--sdkVersion`')} not provided and unable to obtain default value.`\n    );\n  }\n\n  const defaultValue =\n    defaultSdkVersion && sdkVersions.includes(defaultSdkVersion)\n      ? defaultSdkVersion\n      : sdkVersions[sdkVersions.length - 1];\n  const { sdkVersion } = await inquirer.prompt<{ sdkVersion: string }>([\n    {\n      type: 'list',\n      name: 'sdkVersion',\n      message: 'What is the SDK version that you want to run this script against?',\n      default: defaultValue,\n      choices: sdkVersions,\n      validate(value) {\n        if (!semver.valid(value)) {\n          return `Invalid version: ${chalk.cyan(value)}`;\n        }\n        return true;\n      },\n    },\n  ]);\n  return sdkVersion;\n}\n"]}